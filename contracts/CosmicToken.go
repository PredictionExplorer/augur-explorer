// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CheckpointsCheckpoint208 is an auto generated low-level Go binding around an user-defined struct.
type CheckpointsCheckpoint208 struct {
	Key   *big.Int
	Value *big.Int
}

// CosmicTokenMetaData contains all meta data concerning the CosmicToken contract.
var CosmicTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededSafeSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"_key\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"_value\",\"type\":\"uint208\"}],\"internalType\":\"structCheckpoints.Checkpoint208\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101606040523461006a576100126101a1565b61001a61006f565b613ee3610af0823960805181611bdd015260a05181611c14015260c05181611ba4015260e051816125de01526101005181612603015261012051816121e9015261014051816122290152613ee390f35b610075565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100a190610079565b810190811060018060401b038211176100b957604052565b610083565b906100d16100ca61006f565b9283610097565b565b60018060401b0381116100ef576100eb602091610079565b0190565b610083565b90610106610101836100d3565b6100be565b918252565b5f7f436f736d6963546f6b656e000000000000000000000000000000000000000000910152565b61013c600b6100f4565b906101496020830161010b565b565b610153610132565b90565b5f7f4353540000000000000000000000000000000000000000000000000000000000910152565b61018760036100f4565b9061019460208301610156565b565b61019e61017d565b90565b6101c46101ac61014b565b336101b561014b565b906101be610196565b926101c6565b565b906101d29392916101d4565b565b906101e09392916101e2565b565b906101ee9392916101f0565b565b906101fc9392916101fe565b565b9061020a93929161020c565b565b90610218939291610265565b565b5f7f3100000000000000000000000000000000000000000000000000000000000000910152565b61024b60016100f4565b906102586020830161021a565b565b610262610241565b90565b9061027a93929161027461025a565b9061027c565b565b90610289949392916102dd565b565b90565b90565b60200190565b5190565b60018060a01b031690565b90565b6102bd6102b86102c29261029b565b6102a6565b61029b565b90565b6102ce906102a9565b90565b6102da906102c5565b90565b9092610340946102f09161032594610374565b610304816102fe600661028b565b9061071e565b6101205261031c83610316600761028b565b9061071e565b6101405261028e565b61033761033182610297565b91610291565b2060e05261028e565b61035261034c82610297565b91610291565b20610100524660a052610363610823565b60805261036f306102d1565b60c052565b9061037f9291610381565b565b9061038c92916103e7565b565b90565b6103a56103a06103aa9261038e565b6102a6565b61029b565b90565b6103b690610391565b90565b6103c29061029b565b90565b6103ce906103b9565b9052565b91906103e5905f602085019401906103c5565b565b916103f191610443565b8061040c6104066104015f6103ad565b6103b9565b916103b9565b1461041c5761041a90610914565b565b61043f6104285f6103ad565b5f918291631e4fbdf760e01b8352600483016103d2565b0390fd5b9061044d916106a3565b565b5190565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610487575b602083101461048257565b610453565b91607f1691610477565b5f5260205f2090565b601f602091010490565b1b90565b919060086104c39102916104bd5f19846104a4565b926104a4565b9181191691161790565b90565b6104e46104df6104e9926104cd565b6102a6565b6104cd565b90565b90565b919061050561050061050d936104d0565b6104ec565b9083546104a8565b9055565b5f90565b61052791610521610511565b916104ef565b565b5b818110610535575050565b806105425f600193610515565b0161052a565b9190601f8111610558575b505050565b61056461058993610491565b9060206105708461049a565b83019310610591575b6105829061049a565b0190610529565b5f8080610553565b915061058281929050610579565b1c90565b906105b3905f199060080261059f565b191690565b816105c2916105a3565b906002021790565b906105d48161044f565b9060018060401b038211610692576105f6826105f08554610467565b85610548565b602090601f831160011461062a57918091610619935f9261061e575b50506105b8565b90555b565b90915001515f80610612565b601f1983169161063985610491565b925f5b81811061067a57509160029391856001969410610660575b5050500201905561061c565b610670910151601f8416906105a3565b90555f8080610654565b9193602060018192878701518155019501920161063c565b610083565b906106a1916105ca565b565b906106b26106b9926003610697565b6004610697565b565b5f90565b90565b6106d66106d16106db926106bf565b6102a6565b6104cd565b90565b90565b90565b5f1b90565b6106fd6106f8610702926106de565b6106e4565b6106e1565b90565b61070f60ff6106e9565b90565b61071b906106e1565b90565b906107276106bb565b506107396107348361028e565b610297565b61074c61074660206106c2565b916104cd565b105f14610760575061075d90610a65565b90565b5f61076e6107749392610975565b01610697565b61078461077f610705565b610712565b90565b5f90565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b6107b990516106e1565b90565b6107c5906106e1565b9052565b6107d2906104cd565b9052565b909594926108219461081061081a926108066080966107fc60a088019c5f8901906107bc565b60208701906107bc565b60408501906107bc565b60608301906107c9565b01906103c5565b565b61082b610787565b5061083461078b565b61087e61084160e06107af565b9161086f6108506101006107af565b4661085a306102d1565b9161086361006f565b968795602087016107d6565b60208201810382520382610097565b61089061088a82610297565b91610291565b2090565b5f1c90565b60018060a01b031690565b6108b06108b591610894565b610899565b90565b6108c290546108a4565b90565b906108d660018060a01b03916106e4565b9181191691161790565b6108e9906102c5565b90565b90565b906109046108ff61090b926108e0565b6108ec565b82546108c5565b9055565b5f0190565b61091e60056108b8565b6109298260056108ef565b9061095d6109577f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936108e0565b916108e0565b9161096661006f565b806109708161090f565b0390a3565b90565b90565b61098f61098a61099492610978565b6102a6565b6104cd565b90565b60209181520190565b90825f9392825e0152565b6109ca6109d36020936109d8936109c18161044f565b93848093610997565b958691016109a0565b610079565b0190565b6109f19160208201915f8184039101526109ab565b90565b610a0e610a09610a0383610297565b92610291565b6107af565b9060208110610a1c575b5090565b610a2e905f19906020036008026104a4565b165f610a18565b610a41610a4691610894565b6104d0565b90565b610a5d610a58610a62926104cd565b6106e4565b6106e1565b90565b610a6d6106bb565b50610a778161028e565b90610a8182610297565b610a94610a8e601f61097b565b916104cd565b11610ac95750610ac181610abb610ab5610ab0610ac6956109f4565b610a35565b91610297565b17610a49565b610712565b90565b610aeb90610ad561006f565b91829163305a27a960e01b8352600483016109dc565b0390fdfe60806040526004361015610013575b610deb565b61001d5f356101fc565b806306fdde03146101f7578063095ea7b3146101f257806318160ddd146101ed57806323b872dd146101e8578063313ce567146101e35780633644e515146101de5780633a46b1a8146101d957806340c10f19146101d457806342966c68146101cf5780634bf5d7e9146101ca578063587cde1e146101c55780635c19a95c146101c05780636fcfff45146101bb57806370a08231146101b6578063715018a6146101b157806379cc6790146101ac5780637ecebe00146101a757806384b0196e146101a25780638da5cb5b1461019d5780638e539e8c1461019857806391ddadf41461019357806395d89b411461018e5780639ab24eb0146101895780639dc29fac14610184578063a9059cbb1461017f578063c3cda5201461017a578063d505accf14610175578063dd62ed3e14610170578063f1127ed81461016b5763f2fde38b0361000e57610db8565b610d82565b610c9e565b610c37565b610b8d565b610aad565b610a79565b610a44565b610a0f565b6109da565b610978565b610943565b610907565b6107c0565b61078c565b610759565b610724565b6106ef565b610691565b61065c565b6105e7565b6105b4565b610562565b610527565b6104f2565b610498565b61043a565b6103cb565b610373565b61028a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261021a57565b61020c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61026061026960209361026e936102578161021f565b93848093610223565b9586910161022c565b610237565b0190565b6102879160208201915f818403910152610241565b90565b346102ba5761029a366004610210565b6102b66102a5610f48565b6102ad610202565b91829182610272565b0390f35b610208565b60018060a01b031690565b6102d3906102bf565b90565b6102df816102ca565b036102e657565b5f80fd5b905035906102f7826102d6565b565b90565b610305816102f9565b0361030c57565b5f80fd5b9050359061031d826102fc565b565b9190604083820312610347578061033b610344925f86016102ea565b93602001610310565b90565b61020c565b151590565b61035a9061034c565b9052565b9190610371905f60208501940190610351565b565b346103a4576103a061038f61038936600461031f565b90610f62565b610397610202565b9182918261035e565b0390f35b610208565b6103b2906102f9565b9052565b91906103c9905f602085019401906103a9565b565b346103fb576103db366004610210565b6103f76103e6610fb1565b6103ee610202565b918291826103b6565b0390f35b610208565b90916060828403126104355761043261041b845f85016102ea565b9361042981602086016102ea565b93604001610310565b90565b61020c565b3461046b57610467610456610450366004610400565b91610fc7565b61045e610202565b9182918261035e565b0390f35b610208565b60ff1690565b61047f90610470565b9052565b9190610496905f60208501940190610476565b565b346104c8576104a8366004610210565b6104c46104b361101c565b6104bb610202565b91829182610483565b0390f35b610208565b90565b6104d9906104cd565b9052565b91906104f0905f602085019401906104d0565b565b3461052257610502366004610210565b61051e61050d611036565b610515610202565b918291826104dd565b0390f35b610208565b346105585761055461054361053d36600461031f565b906110f2565b61054b610202565b918291826103b6565b0390f35b610208565b5f0190565b346105915761057b61057536600461031f565b9061118d565b610583610202565b8061058d8161055d565b0390f35b610208565b906020828203126105af576105ac915f01610310565b90565b61020c565b346105e2576105cc6105c7366004610596565b611199565b6105d4610202565b806105de8161055d565b0390f35b610208565b34610617576105f7366004610210565b610613610602611246565b61060a610202565b91829182610272565b0390f35b610208565b9060208282031261063557610632915f016102ea565b90565b61020c565b610643906102ca565b9052565b919061065a905f6020850194019061063a565b565b3461068c5761068861067761067236600461061c565b6112e2565b61067f610202565b91829182610647565b0390f35b610208565b346106bf576106a96106a436600461061c565b611301565b6106b1610202565b806106bb8161055d565b0390f35b610208565b63ffffffff1690565b6106d6906106c4565b9052565b91906106ed905f602085019401906106cd565b565b3461071f5761071b61070a61070536600461061c565b611318565b610712610202565b918291826106da565b0390f35b610208565b346107545761075061073f61073a36600461061c565b611343565b610747610202565b918291826103b6565b0390f35b610208565b3461078757610769366004610210565b6107716113b1565b610779610202565b806107838161055d565b0390f35b610208565b346107bb576107a561079f36600461031f565b906113bb565b6107ad610202565b806107b78161055d565b0390f35b610208565b346107f0576107ec6107db6107d636600461061c565b6113da565b6107e3610202565b918291826103b6565b0390f35b610208565b60ff60f81b1690565b610807906107f5565b9052565b5190565b60209181520190565b60200190565b610827906102f9565b9052565b906108388160209361081e565b0190565b60200190565b9061085f6108596108528461080b565b809361080f565b92610818565b905f5b81811061086f5750505090565b909192610888610882600192865161082b565b9461083c565b9101919091610862565b939591946108e36108d86108f7956108ca6108ed956109049c9a6108bd60e08c01925f8d01906107fe565b8a820360208c0152610241565b9088820360408a0152610241565b9760608701906103a9565b608085019061063a565b60a08301906104d0565b60c0818403910152610842565b90565b3461093e57610917366004610210565b61093a6109226114a9565b93610931979597939193610202565b97889788610892565b0390f35b610208565b3461097357610953366004610210565b61096f61095e611533565b610966610202565b91829182610647565b0390f35b610208565b346109a8576109a461099361098e366004610596565b611549565b61099b610202565b918291826103b6565b0390f35b610208565b65ffffffffffff1690565b6109c1906109ad565b9052565b91906109d8905f602085019401906109b8565b565b34610a0a576109ea366004610210565b610a066109f56115bf565b6109fd610202565b918291826109c5565b0390f35b610208565b34610a3f57610a1f366004610210565b610a3b610a2a6115d3565b610a32610202565b91829182610272565b0390f35b610208565b34610a7457610a70610a5f610a5a36600461061c565b6115e9565b610a67610202565b918291826103b6565b0390f35b610208565b34610aa857610a92610a8c36600461031f565b90611618565b610a9a610202565b80610aa48161055d565b0390f35b610208565b34610ade57610ada610ac9610ac336600461031f565b90611624565b610ad1610202565b9182918261035e565b0390f35b610208565b610aec81610470565b03610af357565b5f80fd5b90503590610b0482610ae3565b565b610b0f816104cd565b03610b1657565b5f80fd5b90503590610b2782610b06565b565b909160c082840312610b8857610b41835f84016102ea565b92610b4f8160208501610310565b92610b5d8260408301610310565b92610b85610b6e8460608501610af7565b93610b7c8160808601610b1a565b9360a001610b1a565b90565b61020c565b34610bc257610bac610ba0366004610b29565b949390939291926116b2565b610bb4610202565b80610bbe8161055d565b0390f35b610208565b60e081830312610c3257610bdd825f83016102ea565b92610beb83602084016102ea565b92610bf98160408501610310565b92610c078260608301610310565b92610c2f610c188460808501610af7565b93610c268160a08601610b1a565b9360c001610b1a565b90565b61020c565b34610c6c57610c56610c4a366004610bc7565b95949094939193611806565b610c5e610202565b80610c688161055d565b0390f35b610208565b9190604083820312610c995780610c8d610c96925f86016102ea565b936020016102ea565b90565b61020c565b34610ccf57610ccb610cba610cb4366004610c71565b90611910565b610cc2610202565b918291826103b6565b0390f35b610208565b610cdd816106c4565b03610ce457565b5f80fd5b90503590610cf582610cd4565b565b9190604083820312610d1f5780610d13610d1c925f86016102ea565b93602001610ce8565b90565b61020c565b610d2d906109ad565b9052565b60018060d01b031690565b610d4590610d31565b9052565b90602080610d6b93610d615f8201515f860190610d24565b0151910190610d3c565b565b9190610d80905f60408501940190610d49565b565b34610db357610daf610d9e610d98366004610cf7565b9061197e565b610da6610202565b91829182610d6d565b0390f35b610208565b34610de657610dd0610dcb36600461061c565b6119f9565b610dd8610202565b80610de28161055d565b0390f35b610208565b5f80fd5b606090565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610e28575b6020831014610e2357565b610df4565b91607f1691610e18565b60209181520190565b5f5260205f2090565b905f9291805490610e5e610e5783610e08565b8094610e32565b916001811690815f14610eb55750600114610e79575b505050565b610e869192939450610e3b565b915f925b818410610e9d57505001905f8080610e74565b60018160209295939554848601520191019290610e8a565b92949550505060ff19168252151560200201905f8080610e74565b90610eda91610e44565b90565b634e487b7160e01b5f52604160045260245ffd5b90610efb90610237565b810190811067ffffffffffffffff821117610f1557604052565b610edd565b90610f3a610f3392610f2a610202565b93848092610ed0565b0383610ef1565b565b610f4590610f1a565b90565b610f50610def565b50610f5b6003610f3c565b90565b5f90565b610f7f91610f6e610f5e565b50610f77611a04565b919091611a11565b600190565b5f90565b5f1c90565b90565b610f9c610fa191610f88565b610f8d565b90565b610fae9054610f90565b90565b610fb9610f84565b50610fc46002610fa4565b90565b91610ff192610fd4610f5e565b50610fe9610fe0611a04565b82908491611a61565b919091611aed565b600190565b5f90565b90565b90565b61101461100f61101992610ffa565b610ffd565b610470565b90565b611024610ff6565b5061102f6012611000565b90565b5f90565b61103e611032565b50611047611b8a565b90565b61105e611059611063926109ad565b610ffd565b6102f9565b90565b91602061108792949361108060408201965f8301906103a9565b01906109b8565b565b61109d6110986110a2926102bf565b610ffd565b6102bf565b90565b6110ae90611089565b90565b6110ba906110a5565b90565b906110c7906110b1565b5f5260205260405f2090565b90565b6110ea6110e56110ef92610d31565b610ffd565b6102f9565b90565b6110fa610f84565b506111036115bf565b826111166111108361104a565b916102f9565b101561114e575061114b9161114061113a61113561114694600a6110bd565b6110d3565b91611caf565b90611e23565b6110d6565b90565b826111695f928392637669fc0f60e11b845260048401611066565b0390fd5b9061117f9161117a611f4a565b611181565b565b9061118b91611f98565b565b906111979161116d565b565b6111aa906111a5611a04565b611ff6565b565b906111bf6111b8610202565b9283610ef1565b565b67ffffffffffffffff81116111df576111db602091610237565b0190565b610edd565b906111f66111f1836111c1565b6111ac565b918252565b5f7f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000910152565b61122c601d6111e4565b90611239602083016111fb565b565b611243611222565b90565b61124e610def565b506112576115bf565b61127061126a611265612055565b6109ad565b916109ad565b036112805761127d61123b565b90565b5f6301bfc1c560e61b8152806112986004820161055d565b0390fd5b5f90565b906112aa906110b1565b5f5260205260405f2090565b60018060a01b031690565b6112cd6112d291610f88565b6112b6565b90565b6112df90546112c1565b90565b6112f96112fe916112f161129c565b5060096112a0565b6112d5565b90565b6113129061130d611a04565b6120a8565b565b5f90565b61132a90611324611314565b50612133565b90565b90611337906110b1565b5f5260205260405f2090565b61135961135e91611352610f84565b505f61132d565b610fa4565b90565b611369611f4a565b61137161139e565b565b90565b61138a61138561138f92611373565b610ffd565b6102bf565b90565b61139b90611376565b90565b6113af6113aa5f611392565b612162565b565b6113b9611361565b565b906113d8916113d3816113cc611a04565b8491611a61565b611ff6565b565b6113ec906113e6610f84565b506121c3565b90565b5f90565b606090565b611401906110a5565b90565b5f1b90565b61141d61141861142292611373565b611404565b6104cd565b90565b61143961143461143e92611373565b610ffd565b6102f9565b90565b67ffffffffffffffff81116114595760208091020190565b610edd565b9061147061146b83611441565b6111ac565b918252565b369037565b9061149f6114878361145e565b926020806114958693611441565b9201910390611475565b565b600f60f81b90565b6114b16113ef565b506114ba610def565b506114c3610def565b506114cc610f84565b506114d561129c565b506114de611032565b506114e76113f3565b506114f06121db565b906114f961221b565b904690611505306113f8565b9061150f5f611409565b9061152161151c5f611425565b61147a565b9061152a6114a1565b96959493929190565b61153b61129c565b5061154660056112d5565b90565b611551610f84565b5061155a6115bf565b8161156d6115678361104a565b916102f9565b101561159c57506115946115999161158e611588600b6110d3565b91611caf565b90611e23565b6110d6565b90565b906115b75f928392637669fc0f60e11b845260048401611066565b0390fd5b5f90565b6115c76115bb565b506115d0612055565b90565b6115db610def565b506115e66004610f3c565b90565b61161061160b611606611615936115fe610f84565b50600a6110bd565b6110d3565b61225b565b6110d6565b90565b9061162291611ff6565b565b61164191611630610f5e565b50611639611a04565b919091611aed565b600190565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf90565b61169f6116a69461169560609498979561168b608086019a5f8701906104d0565b602085019061063a565b60408301906103a9565b01906103a9565b565b60200190565b5190565b93959490929195426116cc6116c6896102f9565b916102f9565b1161174557916117379161173e9361172e61174398996117166116ed611646565b6117078b938b6116fb610202565b9586946020860161166a565b60208201810382520382610ef1565b611728611722826116ae565b916116a8565b206122d0565b929091926122ed565b9182612337565b6120a8565b565b611760875f918291632341d78760e11b8352600483016103b6565b0390fd5b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c990565b91946117d06117da929897956117c660a0966117bc6117e19a6117b260c08a019e5f8b01906104d0565b602089019061063a565b604087019061063a565b60608501906103a9565b60808301906103a9565b01906103a9565b565b9160206118049294936117fd60408201965f83019061063a565b019061063a565b565b96959193929490944261182161181b836102f9565b916102f9565b116118db579061188a61189394939261187261183b611764565b6118638c80948c9161184d8d916123de565b9192611857610202565b97889660208801611788565b60208201810382520382610ef1565b61188461187e826116ae565b916116a8565b206122d0565b929091926122ed565b806118a66118a0876102ca565b916102ca565b036118bb57506118b99293919091611a11565b565b84906118d75f9283926325c0072360e11b8452600484016117e3565b0390fd5b6118f6905f91829163313c898160e11b8352600483016103b6565b0390fd5b90611904906110b1565b5f5260205260405f2090565b6119359161192b61193092611923610f84565b5060016118fa565b61132d565b610fa4565b90565b61194260406111ac565b90565b5f90565b5f90565b611955611938565b9060208083611962611945565b81520161196d611949565b81525050565b61197b61194d565b90565b906119919161198b611973565b50612411565b90565b6119a5906119a0611f4a565b6119a7565b565b806119c26119bc6119b75f611392565b6102ca565b916102ca565b146119d2576119d090612162565b565b6119f56119de5f611392565b5f918291631e4fbdf760e01b835260048301610647565b0390fd5b611a0290611994565b565b611a0c61129c565b503390565b91611a1f9291600192612439565b565b604090611a4a611a519496959396611a4060608401985f85019061063a565b60208301906103a9565b01906103a9565b565b90611a5e91036102f9565b90565b929192611a6f818390611910565b9081611a84611a7e5f196102f9565b916102f9565b03611a91575b5050509050565b81611aa4611a9e876102f9565b916102f9565b10611aca57611ac19394611ab9919392611a53565b905f92612439565b805f8080611a8a565b50611ae9849291925f938493637dc7a0d960e11b855260048501611a21565b0390fd5b9182611b09611b03611afe5f611392565b6102ca565b916102ca565b14611b635781611b29611b23611b1e5f611392565b6102ca565b916102ca565b14611b3c57611b3a92919091612548565b565b611b5f611b485f611392565b5f91829163ec442f0560e01b835260048301610647565b0390fd5b611b86611b6f5f611392565b5f918291634b637e8f60e11b835260048301610647565b0390fd5b611b92611032565b50611b9c306113f8565b611bce611bc87f00000000000000000000000000000000000000000000000000000000000000006102ca565b916102ca565b1480611c0a575b5f14611bff577f000000000000000000000000000000000000000000000000000000000000000090565b611c076125c8565b90565b5046611c3e611c387f00000000000000000000000000000000000000000000000000000000000000006102f9565b916102f9565b14611bd5565b90565b611c5b611c56611c6092611c44565b610ffd565b610470565b90565b611c6c90611c47565b9052565b916020611c91929493611c8a60408201965f830190611c63565b01906103a9565b565b611ca7611ca2611cac926102f9565b610ffd565b6109ad565b90565b611cb76115bb565b5080611cd1611ccb65ffffffffffff61104a565b916102f9565b11611ce257611cdf90611c93565b90565b6030611cfe5f9283926306dfcc6560e41b845260048401611c70565b0390fd5b5f90565b5490565b90565b611d21611d1c611d2692611d0a565b610ffd565b6102f9565b90565b634e487b7160e01b5f52601160045260245ffd5b611d4c611d52919392936102f9565b926102f9565b8203918211611d5d57565b611d29565b90565b65ffffffffffff1690565b611d7c611d8191610f88565b611d65565b90565b611d8e9054611d70565b90565b90565b611da8611da3611dad92611d91565b610ffd565b6102f9565b90565b611dbf611dc5919392936102f9565b926102f9565b8201809211611dd057565b611d29565b60301c90565b60018060d01b031690565b611df2611df791611dd5565b611ddb565b90565b611e049054611de6565b90565b611e1b611e16611e2092611373565b610ffd565b610d31565b90565b90611e7790611e30611d02565b50611e3c5f8401611d06565b611e455f611425565b908080611e5b611e556005611d0d565b916102f9565b11611ed8575b5090611e725f860193919293611d62565b6128a5565b80611e8a611e845f611425565b916102f9565b145f14611ea0575050611e9c5f611e07565b5b90565b611ecd5f91611ec8611ec284611ed3960192611ebc6001611d94565b90611d3d565b91611d62565b61289b565b01611dfa565b611e9d565b80611ee6611eec929161271c565b90611d3d565b9083611f1e611f18611f135f611f0d818c01611f088991611d62565b61289b565b01611d84565b6109ad565b916109ad565b105f14611f2f5750905b905f611e61565b9150611f4590611f3f6001611d94565b90611db0565b611f28565b611f52611533565b611f6b611f65611f60611a04565b6102ca565b916102ca565b03611f7257565b611f94611f7d611a04565b5f91829163118cdaa760e01b835260048301610647565b0390fd5b80611fb3611fad611fa85f611392565b6102ca565b916102ca565b14611fcf57611fcd91611fc55f611392565b919091612548565b565b611ff2611fdb5f611392565b5f91829163ec442f0560e01b835260048301610647565b0390fd5b908161201261200c6120075f611392565b6102ca565b916102ca565b1461202e5761202c91906120255f611392565b9091612548565b565b61205161203a5f611392565b5f918291634b637e8f60e11b835260048301610647565b0390fd5b61205d6115bb565b5061206743611caf565b90565b9061207b60018060a01b0391611404565b9181191691161790565b90565b9061209d6120986120a4926110b1565b612085565b825461206a565b9055565b906121319161212b6120b9826112e2565b6120ce846120c9600986906112a0565b612088565b8281859061210e6121086121027f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f956110b1565b926110b1565b926110b1565b92612117610202565b806121218161055d565b0390a49291612934565b9161296f565b565b61215a61215561215061215f93612148611314565b50600a6110bd565b6110d3565b612b1d565b612bbb565b90565b61216c60056112d5565b612177826005612088565b906121ab6121a57f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936110b1565b916110b1565b916121b4610202565b806121be8161055d565b0390a3565b6121d5906121cf610f84565b50612c0c565b90565b90565b6121e3610def565b506122187f000000000000000000000000000000000000000000000000000000000000000061221260066121d8565b90612d33565b90565b612223610def565b506122587f000000000000000000000000000000000000000000000000000000000000000061225260076121d8565b90612d33565b90565b612263611d02565b5061226f5f8201611d06565b8061228261227c5f611425565b916102f9565b145f146122985750506122945f611e07565b5b90565b6122c55f916122c06122ba846122cb9601926122b46001611d94565b90611d3d565b91611d62565b61289b565b01611dfa565b612295565b6122ea906122dc611032565b506122e5611b8a565b612d81565b90565b9261230892612311946122fe61129c565b5092909192612e47565b90929192612f72565b90565b91602061233592949361232e60408201965f83019061063a565b01906103a9565b565b612340816123de565b9161235361234d846102f9565b916102f9565b0361235c575050565b6123765f9283926301d4b62360e61b845260048401612314565b0390fd5b600161238691016102f9565b90565b906123955f1991611404565b9181191691161790565b6123b36123ae6123b8926102f9565b610ffd565b6102f9565b90565b90565b906123d36123ce6123da9261239f565b6123bb565b8254612389565b9055565b6123f2906123ea610f84565b50600861132d565b61240e6123fe82610fa4565b916124088361237a565b906123be565b90565b9061243161242c61243693612424611973565b50600a6110bd565b6110d3565b6130e8565b90565b90928161245661245061244b5f611392565b6102ca565b916102ca565b14612521578361247661247061246b5f611392565b6102ca565b916102ca565b146124fa5761249a8361249561248e600186906118fa565b879061132d565b6123be565b6124a4575b505050565b9190916124ef6124dd6124d77f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925936110b1565b936110b1565b936124e6610202565b918291826103b6565b0390a35f808061249f565b61251d6125065f611392565b5f918291634a1406b160e11b835260048301610647565b0390fd5b61254461252d5f611392565b5f91829163e602df0560e01b835260048301610647565b0390fd5b9161255592919091613109565b565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b909594926125c6946125b56125bf926125ab6080966125a160a088019c5f8901906104d0565b60208701906104d0565b60408501906104d0565b60608301906103a9565b019061063a565b565b6125d0611032565b506125d9612557565b6126507f0000000000000000000000000000000000000000000000000000000000000000916126417f00000000000000000000000000000000000000000000000000000000000000004661262c306113f8565b91612635610202565b9687956020870161257b565b60208201810382520382610ef1565b61266261265c826116ae565b916116a8565b2090565b61267a61267561267f92611d91565b610ffd565b610470565b90565b1c90565b6126a59061269f6126996126aa94610470565b916102f9565b90612682565b6102f9565b90565b1b90565b6126d0906126ca6126c46126d5946102f9565b916102f9565b906126ad565b6102f9565b90565b634e487b7160e01b5f52601260045260245ffd5b6126f86126fe916102f9565b916102f9565b908115612709570490565b6126d8565b9061271991016102f9565b90565b612724610f84565b50806127386127325f611425565b916102f9565b1461288e578061288561287e61286e61285e61284e61283e61282e61281e61280e6127fe6127ee61288b9c6127e86127e16127d16127c16127b16127a1600161279c6127966127868a613317565b6127906001612666565b90612686565b91611d94565b6126b1565b6127ab81886126ec565b9061270e565b6127bb6001612666565b90612686565b6127cb81866126ec565b9061270e565b6127db6001612666565b90612686565b80926126ec565b9061270e565b6127f86001612666565b90612686565b612808818c6126ec565b9061270e565b6128186001612666565b90612686565b612828818a6126ec565b9061270e565b6128386001612666565b90612686565b61284881886126ec565b9061270e565b6128586001612666565b90612686565b61286881866126ec565b9061270e565b6128786001612666565b90612686565b80926126ec565b906135e7565b90565b506128985f611425565b90565b5f5260205f200190565b939190926128b1610f84565b505b816128c66128c0836102f9565b916102f9565b101561292c576128d7828290613639565b906128ed5f6128e788859061289b565b01611d84565b6128ff6128f9876109ad565b916109ad565b115f1461290f5750915b916128b3565b929150612926906129206001611d94565b90611db0565b90612909565b925050915090565b61294690612940610f84565b50611343565b90565b90565b91602061296d92949361296660408201965f8301906103a9565b01906103a9565b565b9190918061298561297f856102ca565b916102ca565b141580612b03575b612997575b505050565b806129b26129ac6129a75f611392565b6102ca565b916102ca565b03612a73575b50816129d46129ce6129c95f611392565b6102ca565b916102ca565b036129e0575b80612992565b612a27612a1a612a21926129f6600a86906110bd565b90612a14612a0e612a08600193613711565b936110d3565b91612949565b90613764565b92906110d6565b916110d6565b919091612a547fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724926110b1565b92612a69612a60610202565b9283928361294c565b0390a25f806129da565b612ab2612ab8612aab612a88600a85906110bd565b6002612aa5612a9f612a9989613711565b936110d3565b91612949565b90613764565b92906110d6565b916110d6565b919091612ae57fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724926110b1565b92612afa612af1610202565b9283928361294c565b0390a25f6129b8565b5081612b17612b115f611425565b916102f9565b1161298d565b5f612b3191612b2a610f84565b5001611d06565b90565b612b48612b43612b4d926106c4565b610ffd565b6102f9565b90565b90565b612b67612b62612b6c92612b50565b610ffd565b610470565b90565b612b7890612b53565b9052565b916020612b9d929493612b9660408201965f830190612b6f565b01906103a9565b565b612bb3612bae612bb8926102f9565b610ffd565b6106c4565b90565b612bc3611314565b5080612bdb612bd563ffffffff612b34565b916102f9565b11612bec57612be990612b9f565b90565b6020612c085f9283926306dfcc6560e41b845260048401612b7c565b0390fd5b612c23612c2891612c1b610f84565b50600861132d565b610fa4565b90565b612c34906104cd565b90565b90565b612c4e612c49612c5392612c37565b611404565b6104cd565b90565b612c6060ff612c3a565b90565b5f5260205f2090565b905f9291805490612c86612c7f83610e08565b8094610e32565b916001811690815f14612cdd5750600114612ca1575b505050565b612cae9192939450612c63565b915f925b818410612cc557505001905f8080612c9c565b60018160209295939554848601520191019290612cb2565b92949550505060ff19168252151560200201905f8080612c9c565b90612d0291612c6c565b90565b90612d25612d1e92612d15610202565b93848092612cf8565b0383610ef1565b565b612d3090612d05565b90565b90612d3c610def565b50612d4682612c2b565b612d5f612d59612d54612c56565b6104cd565b916104cd565b14155f14612d745750612d7190613810565b90565b612d7e9150612d27565b90565b604291612d8c611032565b50604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b5f90565b612dd2612dd791610f88565b61239f565b90565b90565b612df1612dec612df692612dda565b610ffd565b6102f9565b90565b612e2e612e3594612e24606094989795612e1a608086019a5f8701906104d0565b6020850190610476565b60408301906104d0565b01906104d0565b565b612e3f610202565b3d5f823e3d90fd5b939293612e5261129c565b50612e5b612dc2565b50612e64611032565b50612e6e85612dc6565b612ea0612e9a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0612ddd565b916102f9565b11612f2d5790612ec3602094955f94939293612eba610202565b94859485612df9565b838052039060015afa15612f2857612edb5f51611404565b80612ef6612ef0612eeb5f611392565b6102ca565b916102ca565b14612f0c575f91612f065f611409565b91929190565b50612f165f611392565b600191612f225f611409565b91929190565b612e37565b505050612f395f611392565b9060039291929190565b634e487b7160e01b5f52602160045260245ffd5b60041115612f6157565b612f43565b90612f7082612f57565b565b80612f85612f7f5f612f66565b91612f66565b145f14612f90575050565b80612fa4612f9e6001612f66565b91612f66565b145f14612fc7575f63f645eedf60e01b815280612fc36004820161055d565b0390fd5b80612fdb612fd56002612f66565b91612f66565b145f1461300957613005612fee83612dc6565b5f91829163fce698f760e01b8352600483016103b6565b0390fd5b61301c6130166003612f66565b91612f66565b146130245750565b61303f905f9182916335e2f38360e21b8352600483016104dd565b0390fd5b634e487b7160e01b5f52603260045260245ffd5b5f5260205f2090565b61306981611d06565b8210156130835761307b600191613057565b910201905f90565b613043565b90613092906109ad565b9052565b906130a090610d31565b9052565b906130da6130d15f6130b4611938565b946130cb6130c3838301611d84565b838801613088565b01611dfa565b60208401613096565b565b6130e5906130a4565b90565b613106915f613100926130f9611973565b5001613060565b506130dc565b90565b929161311784838391613840565b8361313261312c6131275f611392565b6102ca565b916102ca565b14613147575b61314592939190916139ca565b565b61314f610fb1565b936131586139af565b948061316c613166886102f9565b916102f9565b1161317957509350613138565b85906131955f928392630e58ae9360e11b84526004840161294c565b0390fd5b90565b6131b06131ab6131b592613199565b610ffd565b610470565b90565b6131cc6131c76131d192613199565b610ffd565b6102f9565b90565b90565b6131eb6131e66131f0926131d4565b610ffd565b610470565b90565b61320761320261320c926131d4565b610ffd565b6102f9565b90565b61322361321e61322892612b50565b610ffd565b6102f9565b90565b90565b61324261323d6132479261322b565b610ffd565b610470565b90565b61325e6132596132639261322b565b610ffd565b6102f9565b90565b90565b61327d61327861328292613266565b610ffd565b610470565b90565b61329961329461329e92613266565b610ffd565b6102f9565b90565b90565b6132b86132b36132bd926132a1565b610ffd565b610470565b90565b6132d46132cf6132d9926132a1565b610ffd565b6102f9565b90565b90565b6132f36132ee6132f8926132dc565b610ffd565b610470565b90565b61330f61330a613314926132dc565b610ffd565b6102f9565b90565b61331f610f84565b5061347161332c5f611425565b916133418161333b608061319c565b90612686565b61335361334d5f611425565b916102f9565b116135b9575b61336d8161336760406131d7565b90612686565b61337f6133795f611425565b916102f9565b1161358b575b613399816133936020612b53565b90612686565b6133ab6133a55f611425565b916102f9565b1161355d575b6133c5816133bf601061322e565b90612686565b6133d76133d15f611425565b916102f9565b1161352f575b6133f1816133eb6008613269565b90612686565b6134036133fd5f611425565b916102f9565b11613501575b61341d8161341760046132a4565b90612686565b61342f6134295f611425565b916102f9565b116134d3575b6134498161344360026132df565b90612686565b61345b6134555f611425565b916102f9565b116134a5575b61346b6001612666565b90612686565b61348361347d5f611425565b916102f9565b1161348c575b90565b6134a09061349a6001611d94565b9061270e565b613489565b6134bc6134cd916134b660026132df565b90612686565b926134c760026132fb565b9061270e565b91613461565b6134ea6134fb916134e460046132a4565b90612686565b926134f560046132c0565b9061270e565b91613435565b613518613529916135126008613269565b90612686565b926135236008613285565b9061270e565b91613409565b61354661355791613540601061322e565b90612686565b92613551601061324a565b9061270e565b916133dd565b6135746135859161356e6020612b53565b90612686565b9261357f602061320f565b9061270e565b916133b1565b6135a26135b39161359c60406131d7565b90612686565b926135ad60406131f3565b9061270e565b91613385565b6135d06135e1916135ca608061319c565b90612686565b926135db60806131b8565b9061270e565b91613359565b906135f0610f84565b50816136046135fe836102f9565b916102f9565b105f1461361057505b90565b905061360d565b613623613629916102f9565b916102f9565b908115613634570490565b6126d8565b61365e61366492613648610f84565b50828116921861365860026132fb565b90613617565b90611db0565b90565b61367361367991610d31565b91610d31565b90039060018060d01b03821161368b57565b611d29565b906136a39161369d611d02565b50613667565b90565b90565b6136bd6136b86136c2926136a6565b610ffd565b610470565b90565b6136ce906136a9565b9052565b9160206136f39294936136ec60408201965f8301906136c5565b01906103a9565b565b61370961370461370e926102f9565b610ffd565b610d31565b90565b613719611d02565b508061373361372d60018060d01b036110d6565b916102f9565b1161374457613741906136f5565b90565b60d06137605f9283926306dfcc6560e41b8452600484016136d2565b0390fd5b9061379a6137a09392613775611d02565b5061377e611d02565b50809361379361378c6115bf565b949261225b565b9091613e7e565b91613a89565b91909190565b6137b26137b891610d31565b91610d31565b019060018060d01b0382116137c957565b611d29565b906137e1916137db611d02565b506137a6565b90565b369037565b9061380e6137f6836111e4565b9260208061380486936111c1565b92019103906137e4565b565b613818610def565b5061382281613af3565b90613835613830602061320f565b6137e9565b918252602082015290565b9190918061385e6138586138535f611392565b6102ca565b916102ca565b145f1461393f5761388261387b836138766002610fa4565b611db0565b60026123be565b5b8261389e6138986138935f611392565b6102ca565b916102ca565b145f14613913576138c26138bb836138b66002610fa4565b611a53565b60026123be565b5b91909161390e6138fc6138f67fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936110b1565b936110b1565b93613905610202565b918291826103b6565b0390a3565b61393a826139346139255f879061132d565b9161392f83610fa4565b61270e565b906123be565b6138c3565b61395261394d5f839061132d565b610fa4565b8061396561395f856102f9565b916102f9565b1061398d57613978613988918490611a53565b6139835f849061132d565b6123be565b613883565b906139ab9091925f93849363391434e360e21b855260048501611a21565b0390fd5b6139b7610f84565b506139c760018060d01b036110d6565b90565b91613a22613a1c613a2994806139f06139ea6139e55f611392565b6102ca565b916102ca565b14613a5a575b84613a11613a0b613a065f611392565b6102ca565b916102ca565b14613a2b575b6112e2565b926112e2565b909161296f565b565b613a53600b6002613a4d613a47613a4189613711565b936110d3565b91612949565b90613764565b5050613a17565b613a82600b6001613a7c613a76613a7089613711565b936110d3565b91612949565b90613764565b50506139f6565b91613aad5f613ab294613a9a611d02565b50613aa3611d02565b5001929192611d62565b613d03565b91909190565b613acc613ac7613ad192612c37565b610ffd565b6102f9565b90565b90565b613aeb613ae6613af092613ad4565b610ffd565b6102f9565b90565b613b08613b0d91613b02610f84565b50612c2b565b612dc6565b613b1760ff613ab8565b1680613b2c613b26601f613ad7565b916102f9565b11613b345790565b5f632cd44ac360e21b815280613b4c6004820161055d565b0390fd5b5490565b613b5e60406111ac565b90565b5f5260205f2090565b613b7381613b50565b821015613b8d57613b85600191613b61565b910201905f90565b613043565b634e487b7160e01b5f525f60045260245ffd5b613baf90516109ad565b90565b90613bc365ffffffffffff91611404565b9181191691161790565b613be1613bdc613be6926109ad565b610ffd565b6109ad565b90565b90565b90613c01613bfc613c0892613bcd565b613be9565b8254613bb2565b9055565b613c169051610d31565b90565b60301b90565b90613c3165ffffffffffff1991613c19565b9181191691161790565b613c4f613c4a613c5492610d31565b610ffd565b610d31565b90565b90565b90613c6f613c6a613c7692613c3b565b613c57565b8254613c1f565b9055565b90613ca460205f613caa94613c9c828201613c96848801613ba5565b90613bec565b019201613c0c565b90613c5a565b565b9190613cbd57613cbb91613c7a565b565b613b92565b9081549168010000000000000000831015613cf25782613cea916001613cf095018155613b6a565b90613cac565b565b610edd565b613d00906130a4565b90565b90929192613d0f611d02565b50613d18611d02565b50613d2282613b50565b80613d35613d2f5f611425565b916102f9565b115f14613e3257613d62613d5d84613d5784613d516001611d94565b90611d3d565b9061289b565b613cf7565b90613d6e5f8301613ba5565b613d80613d7a856109ad565b916109ad565b11613e1657613de293602093613d975f8501613ba5565b613da9613da3836109ad565b916109ad565b145f14613de657505f613dd5613ddb93613dcf8a9491613dc96001611d94565b90611d3d565b9061289b565b01613c5a565b5b01613c0c565b9190565b90613e119250613e0c88613e04613dfb613b54565b945f8601613088565b868401613096565b613cc2565b613ddc565b5f632520601d60e01b815280613e2e6004820161055d565b0390fd5b50613e5d91613e5885613e4f613e46613b54565b945f8601613088565b60208401613096565b613cc2565b613e665f611e07565b9190565b634e487b7160e01b5f52605160045260245ffd5b91909180600214613e9d57600103613e6a57613e99916137ce565b905b565b50613ea791613690565b90613e9b56fea2646970667358221220a43fdd2a441947641d267e60fe3b20aa2cae3d7669203954a64016d7a6f7b25264736f6c634300081a0033",
}

// CosmicTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use CosmicTokenMetaData.ABI instead.
var CosmicTokenABI = CosmicTokenMetaData.ABI

// CosmicTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CosmicTokenMetaData.Bin instead.
var CosmicTokenBin = CosmicTokenMetaData.Bin

// DeployCosmicToken deploys a new Ethereum contract, binding an instance of CosmicToken to it.
func DeployCosmicToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CosmicToken, error) {
	parsed, err := CosmicTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CosmicTokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CosmicToken{CosmicTokenCaller: CosmicTokenCaller{contract: contract}, CosmicTokenTransactor: CosmicTokenTransactor{contract: contract}, CosmicTokenFilterer: CosmicTokenFilterer{contract: contract}}, nil
}

// CosmicToken is an auto generated Go binding around an Ethereum contract.
type CosmicToken struct {
	CosmicTokenCaller     // Read-only binding to the contract
	CosmicTokenTransactor // Write-only binding to the contract
	CosmicTokenFilterer   // Log filterer for contract events
}

// CosmicTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type CosmicTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CosmicTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CosmicTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CosmicTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CosmicTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CosmicTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CosmicTokenSession struct {
	Contract     *CosmicToken      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CosmicTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CosmicTokenCallerSession struct {
	Contract *CosmicTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// CosmicTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CosmicTokenTransactorSession struct {
	Contract     *CosmicTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// CosmicTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type CosmicTokenRaw struct {
	Contract *CosmicToken // Generic contract binding to access the raw methods on
}

// CosmicTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CosmicTokenCallerRaw struct {
	Contract *CosmicTokenCaller // Generic read-only contract binding to access the raw methods on
}

// CosmicTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CosmicTokenTransactorRaw struct {
	Contract *CosmicTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCosmicToken creates a new instance of CosmicToken, bound to a specific deployed contract.
func NewCosmicToken(address common.Address, backend bind.ContractBackend) (*CosmicToken, error) {
	contract, err := bindCosmicToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CosmicToken{CosmicTokenCaller: CosmicTokenCaller{contract: contract}, CosmicTokenTransactor: CosmicTokenTransactor{contract: contract}, CosmicTokenFilterer: CosmicTokenFilterer{contract: contract}}, nil
}

// NewCosmicTokenCaller creates a new read-only instance of CosmicToken, bound to a specific deployed contract.
func NewCosmicTokenCaller(address common.Address, caller bind.ContractCaller) (*CosmicTokenCaller, error) {
	contract, err := bindCosmicToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CosmicTokenCaller{contract: contract}, nil
}

// NewCosmicTokenTransactor creates a new write-only instance of CosmicToken, bound to a specific deployed contract.
func NewCosmicTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*CosmicTokenTransactor, error) {
	contract, err := bindCosmicToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CosmicTokenTransactor{contract: contract}, nil
}

// NewCosmicTokenFilterer creates a new log filterer instance of CosmicToken, bound to a specific deployed contract.
func NewCosmicTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*CosmicTokenFilterer, error) {
	contract, err := bindCosmicToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CosmicTokenFilterer{contract: contract}, nil
}

// bindCosmicToken binds a generic wrapper to an already deployed contract.
func bindCosmicToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CosmicTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CosmicToken *CosmicTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CosmicToken.Contract.CosmicTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CosmicToken *CosmicTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CosmicToken.Contract.CosmicTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CosmicToken *CosmicTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CosmicToken.Contract.CosmicTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CosmicToken *CosmicTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CosmicToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CosmicToken *CosmicTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CosmicToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CosmicToken *CosmicTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CosmicToken.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_CosmicToken *CosmicTokenCaller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_CosmicToken *CosmicTokenSession) CLOCKMODE() (string, error) {
	return _CosmicToken.Contract.CLOCKMODE(&_CosmicToken.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_CosmicToken *CosmicTokenCallerSession) CLOCKMODE() (string, error) {
	return _CosmicToken.Contract.CLOCKMODE(&_CosmicToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_CosmicToken *CosmicTokenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_CosmicToken *CosmicTokenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _CosmicToken.Contract.DOMAINSEPARATOR(&_CosmicToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_CosmicToken *CosmicTokenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _CosmicToken.Contract.DOMAINSEPARATOR(&_CosmicToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_CosmicToken *CosmicTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_CosmicToken *CosmicTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _CosmicToken.Contract.Allowance(&_CosmicToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_CosmicToken *CosmicTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _CosmicToken.Contract.Allowance(&_CosmicToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_CosmicToken *CosmicTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_CosmicToken *CosmicTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _CosmicToken.Contract.BalanceOf(&_CosmicToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_CosmicToken *CosmicTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _CosmicToken.Contract.BalanceOf(&_CosmicToken.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_CosmicToken *CosmicTokenCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(CheckpointsCheckpoint208), err
	}

	out0 := *abi.ConvertType(out[0], new(CheckpointsCheckpoint208)).(*CheckpointsCheckpoint208)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_CosmicToken *CosmicTokenSession) Checkpoints(account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	return _CosmicToken.Contract.Checkpoints(&_CosmicToken.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint48,uint208))
func (_CosmicToken *CosmicTokenCallerSession) Checkpoints(account common.Address, pos uint32) (CheckpointsCheckpoint208, error) {
	return _CosmicToken.Contract.Checkpoints(&_CosmicToken.CallOpts, account, pos)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_CosmicToken *CosmicTokenCaller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_CosmicToken *CosmicTokenSession) Clock() (*big.Int, error) {
	return _CosmicToken.Contract.Clock(&_CosmicToken.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_CosmicToken *CosmicTokenCallerSession) Clock() (*big.Int, error) {
	return _CosmicToken.Contract.Clock(&_CosmicToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_CosmicToken *CosmicTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_CosmicToken *CosmicTokenSession) Decimals() (uint8, error) {
	return _CosmicToken.Contract.Decimals(&_CosmicToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_CosmicToken *CosmicTokenCallerSession) Decimals() (uint8, error) {
	return _CosmicToken.Contract.Decimals(&_CosmicToken.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_CosmicToken *CosmicTokenCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_CosmicToken *CosmicTokenSession) Delegates(account common.Address) (common.Address, error) {
	return _CosmicToken.Contract.Delegates(&_CosmicToken.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_CosmicToken *CosmicTokenCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _CosmicToken.Contract.Delegates(&_CosmicToken.CallOpts, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_CosmicToken *CosmicTokenCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_CosmicToken *CosmicTokenSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _CosmicToken.Contract.Eip712Domain(&_CosmicToken.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_CosmicToken *CosmicTokenCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _CosmicToken.Contract.Eip712Domain(&_CosmicToken.CallOpts)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_CosmicToken *CosmicTokenCaller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_CosmicToken *CosmicTokenSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _CosmicToken.Contract.GetPastTotalSupply(&_CosmicToken.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_CosmicToken *CosmicTokenCallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _CosmicToken.Contract.GetPastTotalSupply(&_CosmicToken.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_CosmicToken *CosmicTokenCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_CosmicToken *CosmicTokenSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _CosmicToken.Contract.GetPastVotes(&_CosmicToken.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_CosmicToken *CosmicTokenCallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _CosmicToken.Contract.GetPastVotes(&_CosmicToken.CallOpts, account, timepoint)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_CosmicToken *CosmicTokenCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_CosmicToken *CosmicTokenSession) GetVotes(account common.Address) (*big.Int, error) {
	return _CosmicToken.Contract.GetVotes(&_CosmicToken.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_CosmicToken *CosmicTokenCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _CosmicToken.Contract.GetVotes(&_CosmicToken.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CosmicToken *CosmicTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CosmicToken *CosmicTokenSession) Name() (string, error) {
	return _CosmicToken.Contract.Name(&_CosmicToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CosmicToken *CosmicTokenCallerSession) Name() (string, error) {
	return _CosmicToken.Contract.Name(&_CosmicToken.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_CosmicToken *CosmicTokenCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_CosmicToken *CosmicTokenSession) Nonces(owner common.Address) (*big.Int, error) {
	return _CosmicToken.Contract.Nonces(&_CosmicToken.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_CosmicToken *CosmicTokenCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _CosmicToken.Contract.Nonces(&_CosmicToken.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_CosmicToken *CosmicTokenCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_CosmicToken *CosmicTokenSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _CosmicToken.Contract.NumCheckpoints(&_CosmicToken.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_CosmicToken *CosmicTokenCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _CosmicToken.Contract.NumCheckpoints(&_CosmicToken.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CosmicToken *CosmicTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CosmicToken *CosmicTokenSession) Owner() (common.Address, error) {
	return _CosmicToken.Contract.Owner(&_CosmicToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CosmicToken *CosmicTokenCallerSession) Owner() (common.Address, error) {
	return _CosmicToken.Contract.Owner(&_CosmicToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CosmicToken *CosmicTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CosmicToken *CosmicTokenSession) Symbol() (string, error) {
	return _CosmicToken.Contract.Symbol(&_CosmicToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CosmicToken *CosmicTokenCallerSession) Symbol() (string, error) {
	return _CosmicToken.Contract.Symbol(&_CosmicToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_CosmicToken *CosmicTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CosmicToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_CosmicToken *CosmicTokenSession) TotalSupply() (*big.Int, error) {
	return _CosmicToken.Contract.TotalSupply(&_CosmicToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_CosmicToken *CosmicTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _CosmicToken.Contract.TotalSupply(&_CosmicToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_CosmicToken *CosmicTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_CosmicToken *CosmicTokenSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.Approve(&_CosmicToken.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_CosmicToken *CosmicTokenTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.Approve(&_CosmicToken.TransactOpts, spender, value)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 value) returns()
func (_CosmicToken *CosmicTokenTransactor) Burn(opts *bind.TransactOpts, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "burn", value)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 value) returns()
func (_CosmicToken *CosmicTokenSession) Burn(value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.Burn(&_CosmicToken.TransactOpts, value)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 value) returns()
func (_CosmicToken *CosmicTokenTransactorSession) Burn(value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.Burn(&_CosmicToken.TransactOpts, value)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns()
func (_CosmicToken *CosmicTokenTransactor) Burn0(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "burn0", account, amount)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns()
func (_CosmicToken *CosmicTokenSession) Burn0(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.Burn0(&_CosmicToken.TransactOpts, account, amount)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns()
func (_CosmicToken *CosmicTokenTransactorSession) Burn0(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.Burn0(&_CosmicToken.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_CosmicToken *CosmicTokenTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "burnFrom", account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_CosmicToken *CosmicTokenSession) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.BurnFrom(&_CosmicToken.TransactOpts, account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_CosmicToken *CosmicTokenTransactorSession) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.BurnFrom(&_CosmicToken.TransactOpts, account, value)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_CosmicToken *CosmicTokenTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_CosmicToken *CosmicTokenSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _CosmicToken.Contract.Delegate(&_CosmicToken.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_CosmicToken *CosmicTokenTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _CosmicToken.Contract.Delegate(&_CosmicToken.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_CosmicToken *CosmicTokenTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_CosmicToken *CosmicTokenSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _CosmicToken.Contract.DelegateBySig(&_CosmicToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_CosmicToken *CosmicTokenTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _CosmicToken.Contract.DelegateBySig(&_CosmicToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_CosmicToken *CosmicTokenTransactor) Mint(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "mint", to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_CosmicToken *CosmicTokenSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.Mint(&_CosmicToken.TransactOpts, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_CosmicToken *CosmicTokenTransactorSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.Mint(&_CosmicToken.TransactOpts, to, amount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_CosmicToken *CosmicTokenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_CosmicToken *CosmicTokenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _CosmicToken.Contract.Permit(&_CosmicToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_CosmicToken *CosmicTokenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _CosmicToken.Contract.Permit(&_CosmicToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CosmicToken *CosmicTokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CosmicToken *CosmicTokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _CosmicToken.Contract.RenounceOwnership(&_CosmicToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CosmicToken *CosmicTokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CosmicToken.Contract.RenounceOwnership(&_CosmicToken.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_CosmicToken *CosmicTokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_CosmicToken *CosmicTokenSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.Transfer(&_CosmicToken.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_CosmicToken *CosmicTokenTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.Transfer(&_CosmicToken.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_CosmicToken *CosmicTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_CosmicToken *CosmicTokenSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.TransferFrom(&_CosmicToken.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_CosmicToken *CosmicTokenTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _CosmicToken.Contract.TransferFrom(&_CosmicToken.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CosmicToken *CosmicTokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CosmicToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CosmicToken *CosmicTokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CosmicToken.Contract.TransferOwnership(&_CosmicToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CosmicToken *CosmicTokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CosmicToken.Contract.TransferOwnership(&_CosmicToken.TransactOpts, newOwner)
}

// CosmicTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the CosmicToken contract.
type CosmicTokenApprovalIterator struct {
	Event *CosmicTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CosmicTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CosmicTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CosmicTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CosmicTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CosmicTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CosmicTokenApproval represents a Approval event raised by the CosmicToken contract.
type CosmicTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_CosmicToken *CosmicTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*CosmicTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _CosmicToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &CosmicTokenApprovalIterator{contract: _CosmicToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_CosmicToken *CosmicTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CosmicTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _CosmicToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CosmicTokenApproval)
				if err := _CosmicToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_CosmicToken *CosmicTokenFilterer) ParseApproval(log types.Log) (*CosmicTokenApproval, error) {
	event := new(CosmicTokenApproval)
	if err := _CosmicToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CosmicTokenDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the CosmicToken contract.
type CosmicTokenDelegateChangedIterator struct {
	Event *CosmicTokenDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CosmicTokenDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CosmicTokenDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CosmicTokenDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CosmicTokenDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CosmicTokenDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CosmicTokenDelegateChanged represents a DelegateChanged event raised by the CosmicToken contract.
type CosmicTokenDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_CosmicToken *CosmicTokenFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*CosmicTokenDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _CosmicToken.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &CosmicTokenDelegateChangedIterator{contract: _CosmicToken.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_CosmicToken *CosmicTokenFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *CosmicTokenDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _CosmicToken.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CosmicTokenDelegateChanged)
				if err := _CosmicToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_CosmicToken *CosmicTokenFilterer) ParseDelegateChanged(log types.Log) (*CosmicTokenDelegateChanged, error) {
	event := new(CosmicTokenDelegateChanged)
	if err := _CosmicToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CosmicTokenDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the CosmicToken contract.
type CosmicTokenDelegateVotesChangedIterator struct {
	Event *CosmicTokenDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CosmicTokenDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CosmicTokenDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CosmicTokenDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CosmicTokenDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CosmicTokenDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CosmicTokenDelegateVotesChanged represents a DelegateVotesChanged event raised by the CosmicToken contract.
type CosmicTokenDelegateVotesChanged struct {
	Delegate      common.Address
	PreviousVotes *big.Int
	NewVotes      *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_CosmicToken *CosmicTokenFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*CosmicTokenDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _CosmicToken.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &CosmicTokenDelegateVotesChangedIterator{contract: _CosmicToken.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_CosmicToken *CosmicTokenFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *CosmicTokenDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _CosmicToken.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CosmicTokenDelegateVotesChanged)
				if err := _CosmicToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_CosmicToken *CosmicTokenFilterer) ParseDelegateVotesChanged(log types.Log) (*CosmicTokenDelegateVotesChanged, error) {
	event := new(CosmicTokenDelegateVotesChanged)
	if err := _CosmicToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CosmicTokenEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the CosmicToken contract.
type CosmicTokenEIP712DomainChangedIterator struct {
	Event *CosmicTokenEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CosmicTokenEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CosmicTokenEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CosmicTokenEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CosmicTokenEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CosmicTokenEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CosmicTokenEIP712DomainChanged represents a EIP712DomainChanged event raised by the CosmicToken contract.
type CosmicTokenEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_CosmicToken *CosmicTokenFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*CosmicTokenEIP712DomainChangedIterator, error) {

	logs, sub, err := _CosmicToken.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &CosmicTokenEIP712DomainChangedIterator{contract: _CosmicToken.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_CosmicToken *CosmicTokenFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *CosmicTokenEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _CosmicToken.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CosmicTokenEIP712DomainChanged)
				if err := _CosmicToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_CosmicToken *CosmicTokenFilterer) ParseEIP712DomainChanged(log types.Log) (*CosmicTokenEIP712DomainChanged, error) {
	event := new(CosmicTokenEIP712DomainChanged)
	if err := _CosmicToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CosmicTokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CosmicToken contract.
type CosmicTokenOwnershipTransferredIterator struct {
	Event *CosmicTokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CosmicTokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CosmicTokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CosmicTokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CosmicTokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CosmicTokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CosmicTokenOwnershipTransferred represents a OwnershipTransferred event raised by the CosmicToken contract.
type CosmicTokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CosmicToken *CosmicTokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CosmicTokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CosmicToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CosmicTokenOwnershipTransferredIterator{contract: _CosmicToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CosmicToken *CosmicTokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CosmicTokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CosmicToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CosmicTokenOwnershipTransferred)
				if err := _CosmicToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CosmicToken *CosmicTokenFilterer) ParseOwnershipTransferred(log types.Log) (*CosmicTokenOwnershipTransferred, error) {
	event := new(CosmicTokenOwnershipTransferred)
	if err := _CosmicToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CosmicTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the CosmicToken contract.
type CosmicTokenTransferIterator struct {
	Event *CosmicTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CosmicTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CosmicTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CosmicTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CosmicTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CosmicTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CosmicTokenTransfer represents a Transfer event raised by the CosmicToken contract.
type CosmicTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_CosmicToken *CosmicTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CosmicTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CosmicToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CosmicTokenTransferIterator{contract: _CosmicToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_CosmicToken *CosmicTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CosmicTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CosmicToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CosmicTokenTransfer)
				if err := _CosmicToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_CosmicToken *CosmicTokenFilterer) ParseTransfer(log types.Log) (*CosmicTokenTransfer, error) {
	event := new(CosmicTokenTransfer)
	if err := _CosmicToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICosmicTokenMetaData contains all meta data concerning the ICosmicToken contract.
var ICosmicTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ICosmicTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use ICosmicTokenMetaData.ABI instead.
var ICosmicTokenABI = ICosmicTokenMetaData.ABI

// ICosmicToken is an auto generated Go binding around an Ethereum contract.
type ICosmicToken struct {
	ICosmicTokenCaller     // Read-only binding to the contract
	ICosmicTokenTransactor // Write-only binding to the contract
	ICosmicTokenFilterer   // Log filterer for contract events
}

// ICosmicTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type ICosmicTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICosmicTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ICosmicTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICosmicTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ICosmicTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICosmicTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ICosmicTokenSession struct {
	Contract     *ICosmicToken     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ICosmicTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ICosmicTokenCallerSession struct {
	Contract *ICosmicTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ICosmicTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ICosmicTokenTransactorSession struct {
	Contract     *ICosmicTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ICosmicTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type ICosmicTokenRaw struct {
	Contract *ICosmicToken // Generic contract binding to access the raw methods on
}

// ICosmicTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ICosmicTokenCallerRaw struct {
	Contract *ICosmicTokenCaller // Generic read-only contract binding to access the raw methods on
}

// ICosmicTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ICosmicTokenTransactorRaw struct {
	Contract *ICosmicTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewICosmicToken creates a new instance of ICosmicToken, bound to a specific deployed contract.
func NewICosmicToken(address common.Address, backend bind.ContractBackend) (*ICosmicToken, error) {
	contract, err := bindICosmicToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICosmicToken{ICosmicTokenCaller: ICosmicTokenCaller{contract: contract}, ICosmicTokenTransactor: ICosmicTokenTransactor{contract: contract}, ICosmicTokenFilterer: ICosmicTokenFilterer{contract: contract}}, nil
}

// NewICosmicTokenCaller creates a new read-only instance of ICosmicToken, bound to a specific deployed contract.
func NewICosmicTokenCaller(address common.Address, caller bind.ContractCaller) (*ICosmicTokenCaller, error) {
	contract, err := bindICosmicToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICosmicTokenCaller{contract: contract}, nil
}

// NewICosmicTokenTransactor creates a new write-only instance of ICosmicToken, bound to a specific deployed contract.
func NewICosmicTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*ICosmicTokenTransactor, error) {
	contract, err := bindICosmicToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICosmicTokenTransactor{contract: contract}, nil
}

// NewICosmicTokenFilterer creates a new log filterer instance of ICosmicToken, bound to a specific deployed contract.
func NewICosmicTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*ICosmicTokenFilterer, error) {
	contract, err := bindICosmicToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICosmicTokenFilterer{contract: contract}, nil
}

// bindICosmicToken binds a generic wrapper to an already deployed contract.
func bindICosmicToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ICosmicTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICosmicToken *ICosmicTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICosmicToken.Contract.ICosmicTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICosmicToken *ICosmicTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICosmicToken.Contract.ICosmicTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICosmicToken *ICosmicTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICosmicToken.Contract.ICosmicTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICosmicToken *ICosmicTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICosmicToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICosmicToken *ICosmicTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICosmicToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICosmicToken *ICosmicTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICosmicToken.Contract.contract.Transact(opts, method, params...)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns()
func (_ICosmicToken *ICosmicTokenTransactor) Burn(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ICosmicToken.contract.Transact(opts, "burn", account, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns()
func (_ICosmicToken *ICosmicTokenSession) Burn(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ICosmicToken.Contract.Burn(&_ICosmicToken.TransactOpts, account, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns()
func (_ICosmicToken *ICosmicTokenTransactorSession) Burn(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ICosmicToken.Contract.Burn(&_ICosmicToken.TransactOpts, account, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_ICosmicToken *ICosmicTokenTransactor) Mint(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ICosmicToken.contract.Transact(opts, "mint", to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_ICosmicToken *ICosmicTokenSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ICosmicToken.Contract.Mint(&_ICosmicToken.TransactOpts, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_ICosmicToken *ICosmicTokenTransactorSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ICosmicToken.Contract.Mint(&_ICosmicToken.TransactOpts, to, amount)
}

// IERC1155ErrorsMetaData contains all meta data concerning the IERC1155Errors contract.
var IERC1155ErrorsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}]",
}

// IERC1155ErrorsABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC1155ErrorsMetaData.ABI instead.
var IERC1155ErrorsABI = IERC1155ErrorsMetaData.ABI

// IERC1155Errors is an auto generated Go binding around an Ethereum contract.
type IERC1155Errors struct {
	IERC1155ErrorsCaller     // Read-only binding to the contract
	IERC1155ErrorsTransactor // Write-only binding to the contract
	IERC1155ErrorsFilterer   // Log filterer for contract events
}

// IERC1155ErrorsCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC1155ErrorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1155ErrorsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC1155ErrorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1155ErrorsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC1155ErrorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1155ErrorsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC1155ErrorsSession struct {
	Contract     *IERC1155Errors   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC1155ErrorsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC1155ErrorsCallerSession struct {
	Contract *IERC1155ErrorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IERC1155ErrorsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC1155ErrorsTransactorSession struct {
	Contract     *IERC1155ErrorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IERC1155ErrorsRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC1155ErrorsRaw struct {
	Contract *IERC1155Errors // Generic contract binding to access the raw methods on
}

// IERC1155ErrorsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC1155ErrorsCallerRaw struct {
	Contract *IERC1155ErrorsCaller // Generic read-only contract binding to access the raw methods on
}

// IERC1155ErrorsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC1155ErrorsTransactorRaw struct {
	Contract *IERC1155ErrorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC1155Errors creates a new instance of IERC1155Errors, bound to a specific deployed contract.
func NewIERC1155Errors(address common.Address, backend bind.ContractBackend) (*IERC1155Errors, error) {
	contract, err := bindIERC1155Errors(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC1155Errors{IERC1155ErrorsCaller: IERC1155ErrorsCaller{contract: contract}, IERC1155ErrorsTransactor: IERC1155ErrorsTransactor{contract: contract}, IERC1155ErrorsFilterer: IERC1155ErrorsFilterer{contract: contract}}, nil
}

// NewIERC1155ErrorsCaller creates a new read-only instance of IERC1155Errors, bound to a specific deployed contract.
func NewIERC1155ErrorsCaller(address common.Address, caller bind.ContractCaller) (*IERC1155ErrorsCaller, error) {
	contract, err := bindIERC1155Errors(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC1155ErrorsCaller{contract: contract}, nil
}

// NewIERC1155ErrorsTransactor creates a new write-only instance of IERC1155Errors, bound to a specific deployed contract.
func NewIERC1155ErrorsTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC1155ErrorsTransactor, error) {
	contract, err := bindIERC1155Errors(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC1155ErrorsTransactor{contract: contract}, nil
}

// NewIERC1155ErrorsFilterer creates a new log filterer instance of IERC1155Errors, bound to a specific deployed contract.
func NewIERC1155ErrorsFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC1155ErrorsFilterer, error) {
	contract, err := bindIERC1155Errors(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC1155ErrorsFilterer{contract: contract}, nil
}

// bindIERC1155Errors binds a generic wrapper to an already deployed contract.
func bindIERC1155Errors(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC1155ErrorsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC1155Errors *IERC1155ErrorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC1155Errors.Contract.IERC1155ErrorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC1155Errors *IERC1155ErrorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC1155Errors.Contract.IERC1155ErrorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC1155Errors *IERC1155ErrorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC1155Errors.Contract.IERC1155ErrorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC1155Errors *IERC1155ErrorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC1155Errors.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC1155Errors *IERC1155ErrorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC1155Errors.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC1155Errors *IERC1155ErrorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC1155Errors.Contract.contract.Transact(opts, method, params...)
}

// IERC20ErrorsMetaData contains all meta data concerning the IERC20Errors contract.
var IERC20ErrorsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}]",
}

// IERC20ErrorsABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20ErrorsMetaData.ABI instead.
var IERC20ErrorsABI = IERC20ErrorsMetaData.ABI

// IERC20Errors is an auto generated Go binding around an Ethereum contract.
type IERC20Errors struct {
	IERC20ErrorsCaller     // Read-only binding to the contract
	IERC20ErrorsTransactor // Write-only binding to the contract
	IERC20ErrorsFilterer   // Log filterer for contract events
}

// IERC20ErrorsCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20ErrorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20ErrorsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20ErrorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20ErrorsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20ErrorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20ErrorsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20ErrorsSession struct {
	Contract     *IERC20Errors     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20ErrorsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20ErrorsCallerSession struct {
	Contract *IERC20ErrorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IERC20ErrorsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20ErrorsTransactorSession struct {
	Contract     *IERC20ErrorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IERC20ErrorsRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20ErrorsRaw struct {
	Contract *IERC20Errors // Generic contract binding to access the raw methods on
}

// IERC20ErrorsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20ErrorsCallerRaw struct {
	Contract *IERC20ErrorsCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20ErrorsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20ErrorsTransactorRaw struct {
	Contract *IERC20ErrorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Errors creates a new instance of IERC20Errors, bound to a specific deployed contract.
func NewIERC20Errors(address common.Address, backend bind.ContractBackend) (*IERC20Errors, error) {
	contract, err := bindIERC20Errors(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Errors{IERC20ErrorsCaller: IERC20ErrorsCaller{contract: contract}, IERC20ErrorsTransactor: IERC20ErrorsTransactor{contract: contract}, IERC20ErrorsFilterer: IERC20ErrorsFilterer{contract: contract}}, nil
}

// NewIERC20ErrorsCaller creates a new read-only instance of IERC20Errors, bound to a specific deployed contract.
func NewIERC20ErrorsCaller(address common.Address, caller bind.ContractCaller) (*IERC20ErrorsCaller, error) {
	contract, err := bindIERC20Errors(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20ErrorsCaller{contract: contract}, nil
}

// NewIERC20ErrorsTransactor creates a new write-only instance of IERC20Errors, bound to a specific deployed contract.
func NewIERC20ErrorsTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20ErrorsTransactor, error) {
	contract, err := bindIERC20Errors(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20ErrorsTransactor{contract: contract}, nil
}

// NewIERC20ErrorsFilterer creates a new log filterer instance of IERC20Errors, bound to a specific deployed contract.
func NewIERC20ErrorsFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20ErrorsFilterer, error) {
	contract, err := bindIERC20Errors(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20ErrorsFilterer{contract: contract}, nil
}

// bindIERC20Errors binds a generic wrapper to an already deployed contract.
func bindIERC20Errors(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20ErrorsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Errors *IERC20ErrorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Errors.Contract.IERC20ErrorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Errors *IERC20ErrorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Errors.Contract.IERC20ErrorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Errors *IERC20ErrorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Errors.Contract.IERC20ErrorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Errors *IERC20ErrorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Errors.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Errors *IERC20ErrorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Errors.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Errors *IERC20ErrorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Errors.Contract.contract.Transact(opts, method, params...)
}

// IERC721ErrorsMetaData contains all meta data concerning the IERC721Errors contract.
var IERC721ErrorsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}]",
}

// IERC721ErrorsABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721ErrorsMetaData.ABI instead.
var IERC721ErrorsABI = IERC721ErrorsMetaData.ABI

// IERC721Errors is an auto generated Go binding around an Ethereum contract.
type IERC721Errors struct {
	IERC721ErrorsCaller     // Read-only binding to the contract
	IERC721ErrorsTransactor // Write-only binding to the contract
	IERC721ErrorsFilterer   // Log filterer for contract events
}

// IERC721ErrorsCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721ErrorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ErrorsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721ErrorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ErrorsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721ErrorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ErrorsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721ErrorsSession struct {
	Contract     *IERC721Errors    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721ErrorsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721ErrorsCallerSession struct {
	Contract *IERC721ErrorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IERC721ErrorsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721ErrorsTransactorSession struct {
	Contract     *IERC721ErrorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IERC721ErrorsRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721ErrorsRaw struct {
	Contract *IERC721Errors // Generic contract binding to access the raw methods on
}

// IERC721ErrorsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721ErrorsCallerRaw struct {
	Contract *IERC721ErrorsCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721ErrorsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721ErrorsTransactorRaw struct {
	Contract *IERC721ErrorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Errors creates a new instance of IERC721Errors, bound to a specific deployed contract.
func NewIERC721Errors(address common.Address, backend bind.ContractBackend) (*IERC721Errors, error) {
	contract, err := bindIERC721Errors(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Errors{IERC721ErrorsCaller: IERC721ErrorsCaller{contract: contract}, IERC721ErrorsTransactor: IERC721ErrorsTransactor{contract: contract}, IERC721ErrorsFilterer: IERC721ErrorsFilterer{contract: contract}}, nil
}

// NewIERC721ErrorsCaller creates a new read-only instance of IERC721Errors, bound to a specific deployed contract.
func NewIERC721ErrorsCaller(address common.Address, caller bind.ContractCaller) (*IERC721ErrorsCaller, error) {
	contract, err := bindIERC721Errors(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ErrorsCaller{contract: contract}, nil
}

// NewIERC721ErrorsTransactor creates a new write-only instance of IERC721Errors, bound to a specific deployed contract.
func NewIERC721ErrorsTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721ErrorsTransactor, error) {
	contract, err := bindIERC721Errors(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ErrorsTransactor{contract: contract}, nil
}

// NewIERC721ErrorsFilterer creates a new log filterer instance of IERC721Errors, bound to a specific deployed contract.
func NewIERC721ErrorsFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721ErrorsFilterer, error) {
	contract, err := bindIERC721Errors(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721ErrorsFilterer{contract: contract}, nil
}

// bindIERC721Errors binds a generic wrapper to an already deployed contract.
func bindIERC721Errors(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC721ErrorsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Errors *IERC721ErrorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Errors.Contract.IERC721ErrorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Errors *IERC721ErrorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Errors.Contract.IERC721ErrorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Errors *IERC721ErrorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Errors.Contract.IERC721ErrorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Errors *IERC721ErrorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Errors.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Errors *IERC721ErrorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Errors.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Errors *IERC721ErrorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Errors.Contract.contract.Transact(opts, method, params...)
}

// VotesMetaData contains all meta data concerning the Votes contract.
var VotesMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// VotesABI is the input ABI used to generate the binding from.
// Deprecated: Use VotesMetaData.ABI instead.
var VotesABI = VotesMetaData.ABI

// Votes is an auto generated Go binding around an Ethereum contract.
type Votes struct {
	VotesCaller     // Read-only binding to the contract
	VotesTransactor // Write-only binding to the contract
	VotesFilterer   // Log filterer for contract events
}

// VotesCaller is an auto generated read-only Go binding around an Ethereum contract.
type VotesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VotesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VotesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VotesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VotesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VotesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VotesSession struct {
	Contract     *Votes            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VotesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VotesCallerSession struct {
	Contract *VotesCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// VotesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VotesTransactorSession struct {
	Contract     *VotesTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VotesRaw is an auto generated low-level Go binding around an Ethereum contract.
type VotesRaw struct {
	Contract *Votes // Generic contract binding to access the raw methods on
}

// VotesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VotesCallerRaw struct {
	Contract *VotesCaller // Generic read-only contract binding to access the raw methods on
}

// VotesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VotesTransactorRaw struct {
	Contract *VotesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVotes creates a new instance of Votes, bound to a specific deployed contract.
func NewVotes(address common.Address, backend bind.ContractBackend) (*Votes, error) {
	contract, err := bindVotes(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Votes{VotesCaller: VotesCaller{contract: contract}, VotesTransactor: VotesTransactor{contract: contract}, VotesFilterer: VotesFilterer{contract: contract}}, nil
}

// NewVotesCaller creates a new read-only instance of Votes, bound to a specific deployed contract.
func NewVotesCaller(address common.Address, caller bind.ContractCaller) (*VotesCaller, error) {
	contract, err := bindVotes(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VotesCaller{contract: contract}, nil
}

// NewVotesTransactor creates a new write-only instance of Votes, bound to a specific deployed contract.
func NewVotesTransactor(address common.Address, transactor bind.ContractTransactor) (*VotesTransactor, error) {
	contract, err := bindVotes(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VotesTransactor{contract: contract}, nil
}

// NewVotesFilterer creates a new log filterer instance of Votes, bound to a specific deployed contract.
func NewVotesFilterer(address common.Address, filterer bind.ContractFilterer) (*VotesFilterer, error) {
	contract, err := bindVotes(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VotesFilterer{contract: contract}, nil
}

// bindVotes binds a generic wrapper to an already deployed contract.
func bindVotes(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VotesMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Votes *VotesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Votes.Contract.VotesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Votes *VotesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Votes.Contract.VotesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Votes *VotesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Votes.Contract.VotesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Votes *VotesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Votes.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Votes *VotesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Votes.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Votes *VotesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Votes.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_Votes *VotesCaller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Votes.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_Votes *VotesSession) CLOCKMODE() (string, error) {
	return _Votes.Contract.CLOCKMODE(&_Votes.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_Votes *VotesCallerSession) CLOCKMODE() (string, error) {
	return _Votes.Contract.CLOCKMODE(&_Votes.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_Votes *VotesCaller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Votes.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_Votes *VotesSession) Clock() (*big.Int, error) {
	return _Votes.Contract.Clock(&_Votes.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_Votes *VotesCallerSession) Clock() (*big.Int, error) {
	return _Votes.Contract.Clock(&_Votes.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Votes *VotesCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _Votes.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Votes *VotesSession) Delegates(account common.Address) (common.Address, error) {
	return _Votes.Contract.Delegates(&_Votes.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Votes *VotesCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _Votes.Contract.Delegates(&_Votes.CallOpts, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Votes *VotesCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _Votes.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Votes *VotesSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _Votes.Contract.Eip712Domain(&_Votes.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Votes *VotesCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _Votes.Contract.Eip712Domain(&_Votes.CallOpts)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_Votes *VotesCaller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Votes.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_Votes *VotesSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _Votes.Contract.GetPastTotalSupply(&_Votes.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_Votes *VotesCallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _Votes.Contract.GetPastTotalSupply(&_Votes.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_Votes *VotesCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Votes.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_Votes *VotesSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _Votes.Contract.GetPastVotes(&_Votes.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_Votes *VotesCallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _Votes.Contract.GetPastVotes(&_Votes.CallOpts, account, timepoint)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Votes *VotesCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Votes.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Votes *VotesSession) GetVotes(account common.Address) (*big.Int, error) {
	return _Votes.Contract.GetVotes(&_Votes.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Votes *VotesCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _Votes.Contract.GetVotes(&_Votes.CallOpts, account)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Votes *VotesCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Votes.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Votes *VotesSession) Nonces(owner common.Address) (*big.Int, error) {
	return _Votes.Contract.Nonces(&_Votes.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Votes *VotesCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _Votes.Contract.Nonces(&_Votes.CallOpts, owner)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Votes *VotesTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _Votes.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Votes *VotesSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _Votes.Contract.Delegate(&_Votes.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Votes *VotesTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _Votes.Contract.Delegate(&_Votes.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Votes *VotesTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Votes.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Votes *VotesSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Votes.Contract.DelegateBySig(&_Votes.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Votes *VotesTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Votes.Contract.DelegateBySig(&_Votes.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// VotesDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the Votes contract.
type VotesDelegateChangedIterator struct {
	Event *VotesDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotesDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotesDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotesDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotesDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotesDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotesDelegateChanged represents a DelegateChanged event raised by the Votes contract.
type VotesDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Votes *VotesFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*VotesDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _Votes.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &VotesDelegateChangedIterator{contract: _Votes.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Votes *VotesFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *VotesDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _Votes.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotesDelegateChanged)
				if err := _Votes.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Votes *VotesFilterer) ParseDelegateChanged(log types.Log) (*VotesDelegateChanged, error) {
	event := new(VotesDelegateChanged)
	if err := _Votes.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VotesDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the Votes contract.
type VotesDelegateVotesChangedIterator struct {
	Event *VotesDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotesDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotesDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotesDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotesDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotesDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotesDelegateVotesChanged represents a DelegateVotesChanged event raised by the Votes contract.
type VotesDelegateVotesChanged struct {
	Delegate      common.Address
	PreviousVotes *big.Int
	NewVotes      *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_Votes *VotesFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*VotesDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _Votes.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &VotesDelegateVotesChangedIterator{contract: _Votes.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_Votes *VotesFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *VotesDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _Votes.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotesDelegateVotesChanged)
				if err := _Votes.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_Votes *VotesFilterer) ParseDelegateVotesChanged(log types.Log) (*VotesDelegateVotesChanged, error) {
	event := new(VotesDelegateVotesChanged)
	if err := _Votes.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VotesEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the Votes contract.
type VotesEIP712DomainChangedIterator struct {
	Event *VotesEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotesEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotesEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotesEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotesEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotesEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotesEIP712DomainChanged represents a EIP712DomainChanged event raised by the Votes contract.
type VotesEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Votes *VotesFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*VotesEIP712DomainChangedIterator, error) {

	logs, sub, err := _Votes.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &VotesEIP712DomainChangedIterator{contract: _Votes.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Votes *VotesFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *VotesEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _Votes.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotesEIP712DomainChanged)
				if err := _Votes.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Votes *VotesFilterer) ParseEIP712DomainChanged(log types.Log) (*VotesEIP712DomainChanged, error) {
	event := new(VotesEIP712DomainChanged)
	if err := _Votes.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
