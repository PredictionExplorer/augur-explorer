// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StakingWalletCSTMetaData contains all meta data concerning the StakingWalletCST contract.
var StakingWalletCSTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractCosmicSignature\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"contractCosmicGame\",\"name\":\"game_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charity_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"AccessError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"DepositAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DepositFromUnauthorizedSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositDate\",\"type\":\"uint256\"}],\"name\":\"DepositOutsideStakingWindow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"FundTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"actionsLen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositsLen\",\"type\":\"uint256\"}],\"name\":\"IncorrectArrayArguments\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"InvalidActionId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"InvalidDepositId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"}],\"name\":\"ModuloIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OneTimeStaking\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenAlreadyDeleted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"TokenAlreadyInserted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"TokenAlreadyUnstaked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"TokenNotUnstaked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errStr\",\"type\":\"string\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"charityAddress\",\"type\":\"address\"}],\"name\":\"CharityDepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCharityAddress\",\"type\":\"address\"}],\"name\":\"CharityUpdatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"ClaimRewardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numStakedNFTs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"modulo\",\"type\":\"uint256\"}],\"name\":\"EthDepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ModuloSentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalNFTs\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"StakeActionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalNFTs\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"UnstakeActionEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ETHDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deposits\",\"type\":\"uint256[]\"}],\"name\":\"claimManyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeActionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHDepositId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"contractCosmicGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lastActionIdByTokenId\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastActionIds\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modulo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduloToCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contractCosmicSignature\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numETHDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStakeActions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStakedNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCharityAddress\",\"type\":\"address\"}],\"name\":\"setCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeActions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"stakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakerByTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeActionId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"wasTokenUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080604052346100305761001a61001461017b565b916104d5565b610022610035565b6133f761063882396133f790f35b61003b565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100679061003f565b810190811060018060401b0382111761007f57604052565b610049565b90610097610090610035565b928361005d565b565b5f80fd5b60018060a01b031690565b6100b19061009d565b90565b6100bd906100a8565b90565b6100c9816100b4565b036100d057565b5f80fd5b905051906100e1826100c0565b565b6100ec9061009d565b90565b6100f8906100e3565b90565b610104816100ef565b0361010b57565b5f80fd5b9050519061011c826100fb565b565b610127816100a8565b0361012e57565b5f80fd5b9050519061013f8261011e565b565b90916060828403126101765761017361015c845f85016100d4565b9361016a816020860161010f565b93604001610132565b90565b610099565b610199613a2f8038038061018e81610084565b928339810190610141565b909192565b90565b6101b56101b06101ba9261009d565b61019e565b61009d565b90565b6101c6906101a1565b90565b6101d2906101bd565b90565b90565b6101ec6101e76101f1926101d5565b61019e565b61009d565b90565b6101fd906101d8565b90565b60209181520190565b60207f66742e0000000000000000000000000000000000000000000000000000000000917f5a65726f2d616464726573732077617320676976656e20666f7220746865206e5f8201520152565b6102636023604092610200565b61026c81610209565b0190565b6102859060208101905f818303910152610256565b90565b1561028f57565b610297610035565b63eac0d38960e01b8152806102ae60048201610270565b0390fd5b6102bb906101bd565b90565b60207f616d652e00000000000000000000000000000000000000000000000000000000917f5a65726f2d616464726573732077617320676976656e20666f722074686520675f8201520152565b6103186024604092610200565b610321816102be565b0190565b61033a9060208101905f81830391015261030b565b90565b1561034457565b61034c610035565b63eac0d38960e01b81528061036360048201610325565b0390fd5b60207f74792e0000000000000000000000000000000000000000000000000000000000917f5a65726f2d616464726573732077617320676976656e20666f722063686172695f8201520152565b6103c16023604092610200565b6103ca81610367565b0190565b6103e39060208101905f8183039101526103b4565b90565b156103ed57565b6103f5610035565b63eac0d38960e01b81528061040c600482016103ce565b0390fd5b5f1b90565b9061042660018060a01b0391610410565b9181191691161790565b610439906101a1565b90565b61044590610430565b90565b90565b9061046061045b6104679261043c565b610448565b8254610415565b9055565b610474906101a1565b90565b6104809061046b565b90565b90565b9061049b6104966104a292610477565b610483565b8254610415565b9055565b6104af906101bd565b90565b90565b906104ca6104c56104d1926104a6565b6104b2565b8254610415565b9055565b61057d929161056f610576926104e961057f565b6105166104f5826101c9565b61050f6105096105045f6101f4565b6100a8565b916100a8565b1415610288565b610543610522846102b2565b61053c6105366105315f6101f4565b6100a8565b916100a8565b141561033d565b6105688561056161055b6105565f6101f4565b6100a8565b916100a8565b14156103e6565b600c61044b565b600d610486565b600a6104b5565b565b61058f61058a610595565b6105d8565b565b5f90565b61059d610591565b503390565b5f1c90565b60018060a01b031690565b6105be6105c3916105a2565b6105a7565b90565b6105d090546105b2565b90565b5f0190565b6105e15f6105c6565b6105eb825f6104b5565b9061061f6106197f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936104a6565b916104a6565b91610628610035565b80610632816105d3565b0390a356fe60806040526004361015610013575b610ff6565b61001d5f3561020c565b80630d50c189146102075780630f7ee8791461020257806317db6213146101fd57806329745262146101f85780632a3247aa146101f35780632e17de78146101ee57806344d110b9146101e9578063451f1adf146101e457806347ccca02146101df5780634f6ccce7146101da57806355279fdb146101d55780635fda0acc146101d05780636034eb5b146101cb5780636427d9a9146101c6578063715018a6146101c157806386bb8f37146101bc578063889d1e1a146101b75780638da5cb5b146101b2578063934aa023146101ad578063a2b136fb146101a8578063a531aa86146101a3578063a694fc3a1461019e578063c065894e14610199578063c078855514610194578063c3fe3e281461018f578063d0e30db01461018a578063db63689814610185578063f0a5242414610180578063f2fde38b1461017b578063fb6f71a3146101765763fe939afc0361000e57610fc3565b610f90565b610f5d565b610ee7565b610eb4565b610e8b565b610e56565b610da7565b610cfd565b610cca565b610c95565b610c4d565b610b63565b610aee565b610a8b565b610a57565b6109f7565b6109c2565b610911565b61087f565b61084a565b610806565b6107d1565b6106f8565b610623565b6105c1565b61058c565b610557565b610513565b610475565b61037f565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061025090610228565b810190811067ffffffffffffffff82111761026a57604052565b610232565b9061028261027b610212565b9283610246565b565b67ffffffffffffffff811161029c5760208091020190565b610232565b5f80fd5b90565b6102b1816102a5565b036102b857565b5f80fd5b905035906102c9826102a8565b565b909291926102e06102db82610284565b61026f565b938185526020808601920283019281841161031d57915b8383106103045750505050565b6020809161031284866102bc565b8152019201916102f7565b6102a1565b9080601f830112156103405781602061033d933591016102cb565b90565b610224565b90602082820312610375575f82013567ffffffffffffffff81116103705761036d9201610322565b90565b610220565b61021c565b5f0190565b346103ad57610397610392366004610345565b611059565b61039f610212565b806103a98161037a565b0390f35b610218565b906020828203126103cb576103c8915f016102bc565b90565b61021c565b90565b6103e76103e26103ec926102a5565b6103d0565b6102a5565b90565b906103f9906103d3565b5f5260205260405f2090565b1c90565b60ff1690565b61041f9060086104249302610405565b610409565b90565b90610432915461040f565b90565b61044b906104466003915f926103ef565b610427565b90565b151590565b61045c9061044e565b9052565b9190610473905f60208501940190610453565b565b346104a5576104a161049061048b3660046103b2565b610435565b610498610212565b91829182610460565b0390f35b610218565b5f9103126104b457565b61021c565b90565b6104cc9060086104d19302610405565b6104b9565b90565b906104df91546104bc565b90565b6104ee60095f906104d4565b90565b6104fa906102a5565b9052565b9190610511905f602085019401906104f1565b565b34610543576105233660046104aa565b61053f61052e6104e2565b610536610212565b918291826104fe565b0390f35b610218565b610554600b5f906104d4565b90565b34610587576105673660046104aa565b610583610572610548565b61057a610212565b918291826104fe565b0390f35b610218565b346105bc576105b86105a76105a23660046103b2565b6110d8565b6105af610212565b91829182610460565b0390f35b610218565b346105ef576105d96105d43660046103b2565b611373565b6105e1610212565b806105eb8161037a565b0390f35b610218565b906105fe906103d3565b5f5260205260405f2090565b6106209061061b6005915f926105f4565b6104d4565b90565b346106535761064f61063e6106393660046103b2565b61060a565b610646610212565b918291826104fe565b0390f35b610218565b90610662906103d3565b5f5260205260405f2090565b5f1c90565b61067f6106849161066e565b6104b9565b90565b6106919054610673565b90565b61069f906007610658565b6106aa5f8201610687565b916106c360026106bc60018501610687565b9301610687565b90565b6040906106ef6106f694969593966106e560608401985f8501906104f1565b60208301906104f1565b01906104f1565b565b3461072b5761072761071361070e3660046103b2565b610694565b61071e939193610212565b938493846106c6565b0390f35b610218565b60018060a01b031690565b61074b9060086107509302610405565b610730565b90565b9061075e915461073b565b90565b61076d600c5f90610753565b90565b60018060a01b031690565b61078f61078a61079492610770565b6103d0565b610770565b90565b6107a09061077b565b90565b6107ac90610797565b90565b6107b8906107a3565b9052565b91906107cf905f602085019401906107af565b565b34610801576107e13660046104aa565b6107fd6107ec610761565b6107f4610212565b918291826107bc565b0390f35b610218565b346108365761083261082161081c3660046103b2565b61154f565b610829610212565b918291826104fe565b0390f35b610218565b61084760085f906104d4565b90565b3461087a5761085a3660046104aa565b61087661086561083b565b61086d610212565b918291826104fe565b0390f35b610218565b346108af5761088f3660046104aa565b6108ab61089a61156f565b6108a2610212565b918291826104fe565b0390f35b610218565b91909160408184031261090c575f81013567ffffffffffffffff811161090757836108e0918301610322565b92602082013567ffffffffffffffff8111610902576108ff9201610322565b90565b610220565b610220565b61021c565b346109405761092a6109243660046108b4565b9061164d565b610932610212565b8061093c8161037a565b0390f35b610218565b9061094f906103d3565b5f5260205260405f2090565b90565b61096e9060086109739302610405565b61095b565b90565b90610981915461095e565b90565b61099a906109956006915f92610945565b610976565b90565b90565b6109a99061099d565b9052565b91906109c0905f602085019401906109a0565b565b346109f2576109ee6109dd6109d83660046103b2565b610984565b6109e5610212565b918291826109ad565b0390f35b610218565b34610a2557610a073660046104aa565b610a0f6117ed565b610a17610212565b80610a218161037a565b0390f35b610218565b9190604083820312610a525780610a46610a4f925f86016102bc565b936020016102bc565b90565b61021c565b34610a8657610a70610a6a366004610a2a565b90611e71565b610a78610212565b80610a828161037a565b0390f35b610218565b34610abb57610ab7610aa6610aa13660046103b2565b6121b9565b610aae610212565b918291826109ad565b0390f35b610218565b610ac990610770565b90565b610ad590610ac0565b9052565b9190610aec905f60208501940190610acc565b565b34610b1e57610afe3660046104aa565b610b1a610b09612216565b610b11610212565b91829182610ad9565b0390f35b610218565b60018060a01b031690565b610b3e906008610b439302610405565b610b23565b90565b90610b519154610b2e565b90565b610b60600a5f90610b46565b90565b34610b9357610b733660046104aa565b610b8f610b7e610b54565b610b86610212565b91829182610ad9565b0390f35b610218565b90610ba2906103d3565b5f5260205260405f2090565b610bba610bbf9161066e565b610b23565b90565b610bcc9054610bae565b90565b610bda906001610b98565b90610be65f8301610687565b91610bf360018201610bc2565b91610c0c6003610c0560028501610687565b9301610687565b90565b610c44610c4b94610c3a606094989795610c30608086019a5f8701906104f1565b6020850190610acc565b60408301906104f1565b01906104f1565b565b34610c8157610c7d610c68610c633660046103b2565b610bcf565b90610c74949294610212565b94859485610c0f565b0390f35b610218565b610c9260025f906104d4565b90565b34610cc557610ca53660046104aa565b610cc1610cb0610c86565b610cb8610212565b918291826104fe565b0390f35b610218565b34610cf857610ce2610cdd3660046103b2565b612348565b610cea610212565b80610cf48161037a565b0390f35b610218565b34610d2d57610d29610d18610d133660046103b2565b6125a3565b610d20610212565b91829182610ad9565b0390f35b610218565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b610d5c81610d46565b821015610d7657610d6e600191610d4a565b910201905f90565b610d32565b6004610d8681610d46565b821015610da357610da091610d9a91610d53565b906104d4565b90565b5f80fd5b34610dd757610dd3610dc2610dbd3660046103b2565b610d7b565b610dca610212565b918291826104fe565b0390f35b610218565b60018060a01b031690565b610df7906008610dfc9302610405565b610ddc565b90565b90610e0a9154610de7565b90565b610e19600d5f90610dff565b90565b610e259061077b565b90565b610e3190610e1c565b90565b610e3d90610e28565b9052565b9190610e54905f60208501940190610e34565b565b34610e8657610e663660046104aa565b610e82610e71610e0d565b610e79610212565b91829182610e41565b0390f35b610218565b610e963660046104aa565b610e9e612837565b610ea6610212565b80610eb08161037a565b0390f35b34610ee257610ec43660046104aa565b610ecc612c5f565b610ed4610212565b80610ede8161037a565b0390f35b610218565b34610f1757610f13610f02610efd3660046103b2565b612c69565b610f0a610212565b91829182610460565b0390f35b610218565b610f2581610ac0565b03610f2c57565b5f80fd5b90503590610f3d82610f1c565b565b90602082820312610f5857610f55915f01610f30565b90565b61021c565b34610f8b57610f75610f70366004610f3f565b612da9565b610f7d610212565b80610f878161037a565b0390f35b610218565b34610fbe57610fa8610fa3366004610f3f565b612ee8565b610fb0610212565b80610fba8161037a565b0390f35b610218565b34610ff157610fdb610fd6366004610345565b612ef3565b610fe3610212565b80610fed8161037a565b0390f35b610218565b5f80fd5b90565b61101161100c61101692610ffa565b6103d0565b6102a5565b90565b600161102591016102a5565b90565b5190565b9061103682611028565b811015611047576020809102010190565b610d32565b61105690516102a5565b90565b906110635f610ffd565b5b8061107f61107961107486611028565b6102a5565b916102a5565b10156110ae576110a9906110a461109f61109a86849061102c565b61104c565b611373565b611019565b611064565b509050565b5f90565b6110c36110c89161066e565b610409565b90565b6110d590546110b7565b90565b6110ef6110f4916110e76110b3565b5060036103ef565b6110cb565b611107611101600161044e565b9161044e565b1490565b60209181520190565b5f7f546f6b656e2068617320616c7265616479206265656e20756e7374616b65642e910152565b6111476020809261110b565b61115081611114565b0190565b919061117790602061116f604086018681035f88015261113b565b9401906104f1565b565b156111815750565b6111a39061118d610212565b91829163aed59e4f60e01b835260048301611154565b0390fd5b5f7f4f6e6c7920746865206f776e65722063616e20756e7374616b652e0000000000910152565b6111db601b60209261110b565b6111e4816111a7565b0190565b916040611219929493611212611207606083018381035f8501526111ce565b9660208301906104f1565b0190610acc565b565b15611224575050565b61124561122f610212565b9283926345c2e43b60e01b8452600484016111e8565b0390fd5b61125561125a9161066e565b610730565b90565b6112679054611249565b90565b61127390610797565b90565b5f80fd5b60e01b90565b5f91031261128a57565b61021c565b6040906112b86112bf94969593966112ae60608401985f850190610acc565b6020830190610acc565b01906104f1565b565b6112c9610212565b3d5f823e3d90fd5b5f1b90565b906112e25f19916112d1565b9181191691161790565b90565b906113046112ff61130b926103d3565b6112ec565b82546112d6565b9055565b90565b61132661132161132b9261130f565b6103d0565b6102a5565b90565b634e487b7160e01b5f52601160045260245ffd5b611351611357919392936102a5565b926102a5565b820391821161136257565b61132e565b61137090610797565b90565b6113a761138d600361138760018590610b98565b01610687565b61139f6113995f610ffd565b916102a5565b148290611179565b6113db6113c060016113ba818590610b98565b01610bc2565b6113d26113cc33610ac0565b91610ac0565b1482339161121b565b6113f15f6113eb60018490610b98565b01610687565b906113fb82613119565b61140d611408600c61125d565b6107a3565b6323b872dd61141b3061126a565b33926114335f61142d60018890610b98565b01610687565b92813b15611546575f61145991611464829661144d610212565b9889978896879561127a565b85526004850161128f565b03925af1801561154157611515575b5061148c42600361148660018590610b98565b016112ef565b6114b26114ab61149c6001611312565b6114a66009610687565b611342565b60096112ef565b6114bc6009610687565b9133916115106114fe6114f86114f27f33940a9fc3ee3c9150b29b34ef29ca397b5e1e340425a4f0da0346b5b90766c8946103d3565b946103d3565b94611367565b94611507610212565b918291826104fe565b0390a4565b611534905f3d811161153a575b61152c8183610246565b810190611280565b5f611473565b503d611522565b6112c1565b611276565b5f90565b61156661156c9161155e61154b565b506004610d53565b906104d4565b90565b61157761154b565b506115826004610d46565b90565b60207f616d65206c656e6774682e000000000000000000000000000000000000000000917f417272617920617267756d656e7473206d757374206265206f662074686520735f8201520152565b6115df602b60409261110b565b6115e881611585565b0190565b91604061161d92949361161661160b606083018381035f8501526115d2565b9660208301906104f1565b01906104f1565b565b15611628575050565b611649611633610212565b92839263672c0fa160e11b8452600484016115ec565b0390fd5b91909161168f61165c82611028565b61167661167061166b87611028565b6102a5565b916102a5565b1461168083611028565b61168986611028565b9161161f565b6116985f610ffd565b5b806116b46116ae6116a985611028565b6102a5565b916102a5565b10156116f7576116f2906116ed6116d46116cf85849061102c565b61104c565b6116e76116e288859061102c565b61104c565b90611e71565b611019565b611699565b50509050565b5f7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b6117306020809261110b565b611739816116fd565b0190565b6117529060208101905f818303910152611724565b90565b1561175c57565b611764610212565b62461bcd60e51b81528061177a6004820161173d565b0390fd5b6117a8611789612216565b6117a261179c6117976131f5565b610ac0565b91610ac0565b14611755565b6117b06117da565b565b6117c66117c16117cb92610ffa565b6103d0565b610770565b90565b6117d7906117b2565b90565b6117eb6117e65f6117ce565b613202565b565b6117f561177e565b565b5f7f496e76616c6964207374616b65416374696f6e49642e00000000000000000000910152565b61182b601660209261110b565b611834816117f7565b0190565b919061185b906020611853604086018681035f88015261181e565b9401906104f1565b565b156118655750565b61188790611871610212565b9182916313b7e41160e01b835260048301611838565b0390fd5b5f7f496e76616c6964204554484465706f73697449642e0000000000000000000000910152565b6118bf601560209261110b565b6118c88161188b565b0190565b91906118ef9060206118e7604086018681035f8801526118b2565b9401906104f1565b565b156118f95750565b61191b90611905610212565b91829163500e431160e11b8352600483016118cc565b0390fd5b5f7f546f6b656e20686173206e6f74206265656e20756e7374616b65642e00000000910152565b611953601c60209261110b565b61195c8161191f565b0190565b919061198390602061197b604086018681035f880152611946565b9401906104f1565b565b1561198d5750565b6119af90611999610212565b91829163495097bd60e01b835260048301611960565b0390fd5b60207f2e00000000000000000000000000000000000000000000000000000000000000917f54686973206465706f7369742077617320636c61696d656420616c72656164795f8201520152565b611a0d602160409261110b565b611a16816119b3565b0190565b916040611a4b929493611a44611a39606083018381035f850152611a00565b9660208301906104f1565b01906104f1565b565b15611a56575050565b611a77611a61610212565b928392636aaada4b60e01b845260048401611a1a565b0390fd5b5f7f4f6e6c7920746865206f776e65722063616e20636c61696d207265776172642e910152565b611aae6020809261110b565b611ab781611a7b565b0190565b916040611aec929493611ae5611ada606083018381035f850152611aa2565b9660208301906104f1565b0190610acc565b565b15611af7575050565b611b18611b02610212565b9283926345c2e43b60e01b845260048401611abb565b0390fd5b5f7f596f752077657265206e6f74207374616b6564207965742e0000000000000000910152565b611b50601860209261110b565b611b5981611b1c565b0190565b90959492611bb894611ba7611bb192611b9d60a096611b93611b8860c089018981035f8b0152611b43565b9c60208901906104f1565b60408701906104f1565b60608501906104f1565b60808301906104f1565b01906104f1565b565b94929093919415611bcc575050505050565b90611bf09291611bda610212565b95869563618d37eb60e01b875260048701611b5d565b0390fd5b5f7f596f75207765726520616c726561647920756e7374616b65642e000000000000910152565b611c28601a60209261110b565b611c3181611bf4565b0190565b90959492611c9094611c7f611c8992611c7560a096611c6b611c6060c089018981035f8b0152611c1b565b9c60208901906104f1565b60408701906104f1565b60608501906104f1565b60808301906104f1565b01906104f1565b565b94929093919415611ca4575050505050565b90611cc89291611cb2610212565b95869563618d37eb60e01b875260048701611c35565b0390fd5b90611cd860ff916112d1565b9181191691161790565b611ceb9061044e565b90565b90565b90611d06611d01611d0d92611ce2565b611cee565b8254611ccc565b9055565b634e487b7160e01b5f52601260045260245ffd5b611d31611d37916102a5565b916102a5565b908115611d42570490565b611d11565b905090565b611d575f8092611d47565b0190565b611d6490611d4c565b90565b67ffffffffffffffff8111611d8557611d81602091610228565b0190565b610232565b90611d9c611d9783611d67565b61026f565b918252565b606090565b3d5f14611dc157611db63d611d8a565b903d5f602084013e5b565b611dc9611da1565b90611dbf565b5f7f526577617264207472616e73666572206661696c65642e000000000000000000910152565b611e03601760209261110b565b611e0c81611dcf565b0190565b916040611e41929493611e3a611e2f606083018381035f850152611df6565b9660208301906104f1565b0190610acc565b565b15611e4c575050565b611e6d611e57610212565b92839263310a0fbb60e21b845260048401611e10565b0390fd5b90611e9982611e91611e8b611e866002610687565b6102a5565b916102a5565b10839061185d565b611ec081611eb8611eb2611ead6008610687565b6102a5565b916102a5565b1082906118f1565b611ef4611eda6003611ed460018690610b98565b01610687565b611eec611ee65f610ffd565b916102a5565b118390611985565b611f29611f21611f1b611f166004611f0e60018890610b98565b0185906103ef565b6110cb565b1561044e565b838391611a4d565b611f5d611f426001611f3c818690610b98565b01610bc2565b611f54611f4e33610ac0565b91610ac0565b14833391611aee565b611fed611f776002611f7160018690610b98565b01610687565b611f9e611f98611f935f611f8d60078890610658565b01610687565b6102a5565b916102a5565b108383611fb86003611fb260018990610b98565b01610687565b90611fd06002611fca60018a90610b98565b01610687565b92611fe75f611fe160078a90610658565b01610687565b94611bba565b61207d612007600361200160018690610b98565b01610687565b61202e6120286120235f61201d60078890610658565b01610687565b6102a5565b916102a5565b118383612048600361204260018990610b98565b01610687565b90612060600261205a60018a90610b98565b01610687565b926120775f61207160078a90610658565b01610687565b94611c92565b6120a0600161209b600461209360018790610b98565b0184906103ef565b611cf1565b6120d76120ba60016120b460078590610658565b01610687565b6120d160026120cb60078690610658565b01610687565b90611d25565b9161211c5f806120f360016120ed818790610b98565b01610bc2565b866120fc610212565b908161210781611d5b565b03925af1612113611da6565b50843391611e43565b90339161217061215e6121586121527fdde81df5caa033e783e2a39d93e3a8718a7dc27ba95a4757f5433a01f794ec36946103d3565b946103d3565b94611367565b94612167610212565b918291826104fe565b0390a4565b5f90565b90565b61219061218b61219592612179565b6103d0565b61099d565b90565b6121a46121a99161066e565b61095b565b90565b6121b69054612198565b90565b6121c1612175565b506121d66121d1600583906105f4565b610687565b6121e86121e25f610ffd565b916102a5565b14612203576121fb612200916006610945565b6121ac565b90565b5061220f60011961217c565b90565b5f90565b61221e612212565b506122285f610bc2565b90565b60207f6564206f6e6c79206f6e63650000000000000000000000000000000000000000917f5374616b696e672f756e7374616b696e6720746f6b656e20697320616c6c6f775f8201520152565b612285602c60409261110b565b61228e8161222b565b0190565b91906122b59060206122ad604086018681035f880152612278565b9401906104f1565b565b156122bf5750565b6122e1906122cb610212565b918291632290948760e21b835260048301612292565b0390fd5b906122f660018060a01b03916112d1565b9181191691161790565b90565b9061231861231361231f92611367565b612300565b82546122e5565b9055565b612332612338919392936102a5565b926102a5565b820180921161234357565b61132e565b61237b61235f61235a600384906103ef565b6110cb565b61237261236c600161044e565b9161044e565b141582906122b7565b612391600161238c600384906103ef565b611cf1565b6123a361239e600c61125d565b6107a3565b6323b872dd336123b23061126a565b928492813b15612566575f6123da916123e582966123ce610212565b9889978896879561127a565b85526004850161128f565b03925af1801561256157612535575b50612409816124036002610687565b90613354565b612429815f612423600161241d6002610687565b90610b98565b016112ef565b6124493360016124438161243d6002610687565b90610b98565b01612303565b612469426002612463600161245d83610687565b90610b98565b016112ef565b61248f6124886124796001611312565b6124836002610687565b612323565b60026112ef565b6124b56124ae61249f6001611312565b6124a96009610687565b612323565b60096112ef565b6124d26124c26002610687565b6124cc6001611312565b90611342565b6124dc6009610687565b91339161253061251e6125186125127fde0c27ec227b5d0c0a194ea6f25d7031639f9c10d8bf6e2f9414ff8088a6e20d946103d3565b946103d3565b94611367565b94612527610212565b918291826104fe565b0390a4565b612554905f3d811161255a575b61254c8183610246565b810190611280565b5f6123f4565b503d612542565b6112c1565b611276565b61257f61257a61258492610ffa565b6103d0565b61099d565b90565b61259b6125966125a09261099d565b6103d0565b6102a5565b90565b6125be906125af612212565b506125b8612175565b506121b9565b806125d16125cb5f61256b565b9161099d565b126125f85760016125ef6125f5926125e98391612587565b90610b98565b01610bc2565b90565b506126025f6117ce565b90565b6126116126169161066e565b610ddc565b90565b6126239054612605565b90565b61262f90610797565b90565b60207f206465706f7369742e0000000000000000000000000000000000000000000000917f4f6e6c792074686520436f736d696347616d6520636f6e74726163742063616e5f8201520152565b61268c602960409261110b565b61269581612632565b0190565b91906126bc9060206126b4604086018681035f88015261267f565b940190610acc565b565b156126c65750565b6126e8906126d2610212565b918291637ed5977760e11b835260048301612699565b0390fd5b60207f6c65642e00000000000000000000000000000000000000000000000000000000917f5472616e7366657220746f206368617269747920636f6e7472616374206661695f8201520152565b612746602460409261110b565b61274f816126ec565b0190565b91604061278492949361277d612772606083018381035f850152612739565b9660208301906104f1565b0190610acc565b565b1561278f575050565b6127b061279a610212565b92839263310a0fbb60e21b845260048401612753565b0390fd5b9160206127d59294936127ce60408201965f8301906104f1565b0190610acc565b565b6127e36127e9916102a5565b916102a5565b9081156127f4570690565b611d11565b61282e6128359461282460609498979561281a608086019a5f8701906104f1565b60208501906104f1565b60408301906104f1565b01906104f1565b565b6128663361285e61285861285361284e600d612619565b612626565b610ac0565b91610ac0565b1433906126be565b6128706009610687565b61288261287c5f610ffd565b916102a5565b146129c1576128a7425f6128a1600761289b6008610687565b90610658565b016112ef565b6128c83460016128c260076128bc6008610687565b90610658565b016112ef565b6128f26128d56009610687565b60026128ec60076128e66008610687565b90610658565b016112ef565b6129186129116129026001611312565b61290c6008610687565b612323565b60086112ef565b6129486129416129323461292c6009610687565b906127d7565b61293c600b610687565b612323565b600b6112ef565b426129666129566008610687565b6129606001611312565b90611342565b906129716009610687565b34926129bc612980600b610687565b6129aa7fdc0eacba8b1f88284dca5eec8be23173aefa7206298fe22de43e064b6ccd8418956103d3565b956129b3610212565b948594856127f9565b0390a2565b612a025f806129d0600a610bc2565b346129d9610212565b90816129e481611d5b565b03925af16129f0611da6565b50346129fc600a610bc2565b91612786565b34612a0d600a610bc2565b7f70edffe0d8a2915bb852155db6f5f63024fb796983bbc1f5bab6ff8911fc125291612a43612a3a610212565b928392836127b4565b0390a1565b612a72612a53612216565b612a6c612a66612a616131f5565b610ac0565b91610ac0565b14611755565b612a7a612ba1565b565b5f7f4d6f64756c6f206973207a65726f2e0000000000000000000000000000000000910152565b612ab0600f60209261110b565b612ab981612a7c565b0190565b612ad29060208101905f818303910152612aa3565b90565b15612adc57565b612ae4610212565b638d4cfd6960e01b815280612afb60048201612abd565b0390fd5b5f7f5472616e7366657220746f2063686172697479206661696c65642e0000000000910152565b612b33601b60209261110b565b612b3c81612aff565b0190565b916040612b71929493612b6a612b5f606083018381035f850152612b26565b9660208301906104f1565b0190610acc565b565b15612b7c575050565b612b9d612b87610212565b92839263310a0fbb60e21b845260048401612b40565b0390fd5b612ba961154b565b50612bb4600b610687565b612bd081612bca612bc45f610ffd565b916102a5565b11612ad5565b612be3612bdc5f610ffd565b600b6112ef565b612c245f80612bf2600a610bc2565b84612bfb610212565b9081612c0681611d5b565b03925af1612c12611da6565b5082612c1e600a610bc2565b91612b73565b612c5a7f6905286e1ecb9b47a50224e76e31cf1383f75212bc0b06c8684317782566a0a791612c51610212565b918291826104fe565b0390a1565b612c67612a48565b565b612c80612c8591612c786110b3565b5060056105f4565b610687565b612c97612c915f610ffd565b916102a5565b141590565b612ccf90612cca612cab612216565b612cc4612cbe612cb96131f5565b610ac0565b91610ac0565b14611755565b612d79565b565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201520152565b612d2b602660409261110b565b612d3481612cd1565b0190565b612d4d9060208101905f818303910152612d1e565b90565b15612d5757565b612d5f610212565b62461bcd60e51b815280612d7560048201612d38565b0390fd5b612da790612da281612d9b612d95612d905f6117ce565b610ac0565b91610ac0565b1415612d50565b613202565b565b612db290612c9c565b565b612de790612de2612dc3612216565b612ddc612dd6612dd16131f5565b610ac0565b91610ac0565b14611755565b612e6c565b565b5f7f5a65726f2d616464726573732077617320676976656e2e000000000000000000910152565b612e1d601760209261110b565b612e2681612de9565b0190565b612e3f9060208101905f818303910152612e10565b90565b15612e4957565b612e51610212565b63eac0d38960e01b815280612e6860048201612e2a565b0390fd5b612e9c90612e9581612e8e612e88612e835f6117ce565b610ac0565b91610ac0565b1415612e42565b600a612303565b612ea6600a610bc2565b612ed07fa0bd6b2fdbf082ae2356710c23fc8d76d56d418cecb4514d119c77a8617b4ffe91611367565b90612ed9610212565b80612ee38161037a565b0390a2565b612ef190612db4565b565b90612efd5f610ffd565b5b80612f19612f13612f0e86611028565b6102a5565b916102a5565b1015612f4857612f4390612f3e612f39612f3486849061102c565b61104c565b612348565b611019565b612efe565b509050565b5f7f546f6b656e206973206e6f7420696e20746865206c6973742e00000000000000910152565b612f81601960209261110b565b612f8a81612f4d565b0190565b9190612fb1906020612fa9604086018681035f880152612f74565b9401906104f1565b565b15612fbb5750565b612fdd90612fc7610212565b918291639aa6fa6560e01b835260048301612f8e565b0390fd5b1b90565b91906008613000910291612ffa5f1984612fe1565b92612fe1565b9181191691161790565b919061302061301b613028936103d3565b6112ec565b908354612fe5565b9055565b61303e9161303861154b565b9161300a565b565b90565b634e487b7160e01b5f52603160045260245ffd5b5490565b5f5260205f2090565b61306d81613057565b8210156130875761307f60019161305b565b910201905f90565b610d32565b61309581613057565b80156130b65760019003906130b36130ad8383613064565b9061302c565b55565b613043565b90565b6130d26130cd6130d7926130bb565b6103d0565b61099d565b90565b6130ee6130e96130f39261099d565b6103d0565b61099d565b90565b90565b9061310e613109613115926130da565b6130f6565b82546112d6565b9055565b6131f39061313061312982612c69565b8290612fb3565b6131b2613147613142600584906105f4565b610687565b6131ad61317b613175600461316f61315f6004610d46565b6131696001611312565b90611342565b90610d53565b906104d4565b916131a58361319f6004613199856131936001611312565b90611342565b90610d53565b9061300a565b9160056105f4565b6112ef565b6131c75f6131c2600584906105f4565b61302c565b6131d96131d46004613040565b61308c565b6131ee6131e65f196130be565b916006610945565b6130f9565b565b6131fd612212565b503390565b61320b5f610bc2565b613215825f612303565b906132496132437f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611367565b91611367565b91613252610212565b8061325c8161037a565b0390a3565b5f7f546f6b656e20616c726561647920696e20746865206c6973742e000000000000910152565b613295601a60209261110b565b61329e81613261565b0190565b9160406132d39294936132cc6132c1606083018381035f850152613288565b9660208301906104f1565b01906104f1565b565b156132de575050565b6132ff6132e9610212565b92839263597558c560e11b8452600484016132a2565b0390fd5b9081549168010000000000000000831015613333578261332b91600161333195018155613064565b9061300a565b565b610232565b61334c613347613351926102a5565b6103d0565b61099d565b90565b6133ba6133b26133bf9361337b61337361336d86612c69565b1561044e565b8583916132d5565b61338f6133886004613040565b8590613303565b6133ad61339c6004610d46565b6133a8600587906105f4565b6112ef565b613338565b916006610945565b6130f9565b56fea26469706673582212209e7f162c0ca2db14f14b5ce64cc6ef7ebc64d9a425db4d4c4cd37dbc37b4820864736f6c634300081a0033",
}

// StakingWalletCSTABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingWalletCSTMetaData.ABI instead.
var StakingWalletCSTABI = StakingWalletCSTMetaData.ABI

// StakingWalletCSTBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingWalletCSTMetaData.Bin instead.
var StakingWalletCSTBin = StakingWalletCSTMetaData.Bin

// DeployStakingWalletCST deploys a new Ethereum contract, binding an instance of StakingWalletCST to it.
func DeployStakingWalletCST(auth *bind.TransactOpts, backend bind.ContractBackend, nft_ common.Address, game_ common.Address, charity_ common.Address) (common.Address, *types.Transaction, *StakingWalletCST, error) {
	parsed, err := StakingWalletCSTMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingWalletCSTBin), backend, nft_, game_, charity_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingWalletCST{StakingWalletCSTCaller: StakingWalletCSTCaller{contract: contract}, StakingWalletCSTTransactor: StakingWalletCSTTransactor{contract: contract}, StakingWalletCSTFilterer: StakingWalletCSTFilterer{contract: contract}}, nil
}

// StakingWalletCST is an auto generated Go binding around an Ethereum contract.
type StakingWalletCST struct {
	StakingWalletCSTCaller     // Read-only binding to the contract
	StakingWalletCSTTransactor // Write-only binding to the contract
	StakingWalletCSTFilterer   // Log filterer for contract events
}

// StakingWalletCSTCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingWalletCSTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingWalletCSTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingWalletCSTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingWalletCSTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingWalletCSTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingWalletCSTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingWalletCSTSession struct {
	Contract     *StakingWalletCST // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingWalletCSTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingWalletCSTCallerSession struct {
	Contract *StakingWalletCSTCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// StakingWalletCSTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingWalletCSTTransactorSession struct {
	Contract     *StakingWalletCSTTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// StakingWalletCSTRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingWalletCSTRaw struct {
	Contract *StakingWalletCST // Generic contract binding to access the raw methods on
}

// StakingWalletCSTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingWalletCSTCallerRaw struct {
	Contract *StakingWalletCSTCaller // Generic read-only contract binding to access the raw methods on
}

// StakingWalletCSTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingWalletCSTTransactorRaw struct {
	Contract *StakingWalletCSTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingWalletCST creates a new instance of StakingWalletCST, bound to a specific deployed contract.
func NewStakingWalletCST(address common.Address, backend bind.ContractBackend) (*StakingWalletCST, error) {
	contract, err := bindStakingWalletCST(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCST{StakingWalletCSTCaller: StakingWalletCSTCaller{contract: contract}, StakingWalletCSTTransactor: StakingWalletCSTTransactor{contract: contract}, StakingWalletCSTFilterer: StakingWalletCSTFilterer{contract: contract}}, nil
}

// NewStakingWalletCSTCaller creates a new read-only instance of StakingWalletCST, bound to a specific deployed contract.
func NewStakingWalletCSTCaller(address common.Address, caller bind.ContractCaller) (*StakingWalletCSTCaller, error) {
	contract, err := bindStakingWalletCST(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTCaller{contract: contract}, nil
}

// NewStakingWalletCSTTransactor creates a new write-only instance of StakingWalletCST, bound to a specific deployed contract.
func NewStakingWalletCSTTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingWalletCSTTransactor, error) {
	contract, err := bindStakingWalletCST(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTTransactor{contract: contract}, nil
}

// NewStakingWalletCSTFilterer creates a new log filterer instance of StakingWalletCST, bound to a specific deployed contract.
func NewStakingWalletCSTFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingWalletCSTFilterer, error) {
	contract, err := bindStakingWalletCST(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTFilterer{contract: contract}, nil
}

// bindStakingWalletCST binds a generic wrapper to an already deployed contract.
func bindStakingWalletCST(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StakingWalletCSTMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingWalletCST *StakingWalletCSTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingWalletCST.Contract.StakingWalletCSTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingWalletCST *StakingWalletCSTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.StakingWalletCSTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingWalletCST *StakingWalletCSTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.StakingWalletCSTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingWalletCST *StakingWalletCSTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingWalletCST.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingWalletCST *StakingWalletCSTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingWalletCST *StakingWalletCSTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.contract.Transact(opts, method, params...)
}

// ETHDeposits is a free data retrieval call binding the contract method 0x451f1adf.
//
// Solidity: function ETHDeposits(uint256 ) view returns(uint256 depositTime, uint256 depositAmount, uint256 numStaked)
func (_StakingWalletCST *StakingWalletCSTCaller) ETHDeposits(opts *bind.CallOpts, arg0 *big.Int) (struct {
	DepositTime   *big.Int
	DepositAmount *big.Int
	NumStaked     *big.Int
}, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "ETHDeposits", arg0)

	outstruct := new(struct {
		DepositTime   *big.Int
		DepositAmount *big.Int
		NumStaked     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.DepositTime = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.DepositAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.NumStaked = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ETHDeposits is a free data retrieval call binding the contract method 0x451f1adf.
//
// Solidity: function ETHDeposits(uint256 ) view returns(uint256 depositTime, uint256 depositAmount, uint256 numStaked)
func (_StakingWalletCST *StakingWalletCSTSession) ETHDeposits(arg0 *big.Int) (struct {
	DepositTime   *big.Int
	DepositAmount *big.Int
	NumStaked     *big.Int
}, error) {
	return _StakingWalletCST.Contract.ETHDeposits(&_StakingWalletCST.CallOpts, arg0)
}

// ETHDeposits is a free data retrieval call binding the contract method 0x451f1adf.
//
// Solidity: function ETHDeposits(uint256 ) view returns(uint256 depositTime, uint256 depositAmount, uint256 numStaked)
func (_StakingWalletCST *StakingWalletCSTCallerSession) ETHDeposits(arg0 *big.Int) (struct {
	DepositTime   *big.Int
	DepositAmount *big.Int
	NumStaked     *big.Int
}, error) {
	return _StakingWalletCST.Contract.ETHDeposits(&_StakingWalletCST.CallOpts, arg0)
}

// Charity is a free data retrieval call binding the contract method 0x934aa023.
//
// Solidity: function charity() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCaller) Charity(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "charity")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Charity is a free data retrieval call binding the contract method 0x934aa023.
//
// Solidity: function charity() view returns(address)
func (_StakingWalletCST *StakingWalletCSTSession) Charity() (common.Address, error) {
	return _StakingWalletCST.Contract.Charity(&_StakingWalletCST.CallOpts)
}

// Charity is a free data retrieval call binding the contract method 0x934aa023.
//
// Solidity: function charity() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCallerSession) Charity() (common.Address, error) {
	return _StakingWalletCST.Contract.Charity(&_StakingWalletCST.CallOpts)
}

// Game is a free data retrieval call binding the contract method 0xc3fe3e28.
//
// Solidity: function game() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCaller) Game(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "game")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Game is a free data retrieval call binding the contract method 0xc3fe3e28.
//
// Solidity: function game() view returns(address)
func (_StakingWalletCST *StakingWalletCSTSession) Game() (common.Address, error) {
	return _StakingWalletCST.Contract.Game(&_StakingWalletCST.CallOpts)
}

// Game is a free data retrieval call binding the contract method 0xc3fe3e28.
//
// Solidity: function game() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCallerSession) Game() (common.Address, error) {
	return _StakingWalletCST.Contract.Game(&_StakingWalletCST.CallOpts)
}

// IsTokenStaked is a free data retrieval call binding the contract method 0xf0a52424.
//
// Solidity: function isTokenStaked(uint256 tokenId) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTCaller) IsTokenStaked(opts *bind.CallOpts, tokenId *big.Int) (bool, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "isTokenStaked", tokenId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTokenStaked is a free data retrieval call binding the contract method 0xf0a52424.
//
// Solidity: function isTokenStaked(uint256 tokenId) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTSession) IsTokenStaked(tokenId *big.Int) (bool, error) {
	return _StakingWalletCST.Contract.IsTokenStaked(&_StakingWalletCST.CallOpts, tokenId)
}

// IsTokenStaked is a free data retrieval call binding the contract method 0xf0a52424.
//
// Solidity: function isTokenStaked(uint256 tokenId) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTCallerSession) IsTokenStaked(tokenId *big.Int) (bool, error) {
	return _StakingWalletCST.Contract.IsTokenStaked(&_StakingWalletCST.CallOpts, tokenId)
}

// LastActionIdByTokenId is a free data retrieval call binding the contract method 0x889d1e1a.
//
// Solidity: function lastActionIdByTokenId(uint256 tokenId) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTCaller) LastActionIdByTokenId(opts *bind.CallOpts, tokenId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "lastActionIdByTokenId", tokenId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastActionIdByTokenId is a free data retrieval call binding the contract method 0x889d1e1a.
//
// Solidity: function lastActionIdByTokenId(uint256 tokenId) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTSession) LastActionIdByTokenId(tokenId *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.LastActionIdByTokenId(&_StakingWalletCST.CallOpts, tokenId)
}

// LastActionIdByTokenId is a free data retrieval call binding the contract method 0x889d1e1a.
//
// Solidity: function lastActionIdByTokenId(uint256 tokenId) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) LastActionIdByTokenId(tokenId *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.LastActionIdByTokenId(&_StakingWalletCST.CallOpts, tokenId)
}

// LastActionIds is a free data retrieval call binding the contract method 0x6427d9a9.
//
// Solidity: function lastActionIds(uint256 ) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTCaller) LastActionIds(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "lastActionIds", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastActionIds is a free data retrieval call binding the contract method 0x6427d9a9.
//
// Solidity: function lastActionIds(uint256 ) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTSession) LastActionIds(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.LastActionIds(&_StakingWalletCST.CallOpts, arg0)
}

// LastActionIds is a free data retrieval call binding the contract method 0x6427d9a9.
//
// Solidity: function lastActionIds(uint256 ) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) LastActionIds(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.LastActionIds(&_StakingWalletCST.CallOpts, arg0)
}

// Modulo is a free data retrieval call binding the contract method 0x29745262.
//
// Solidity: function modulo() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) Modulo(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "modulo")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Modulo is a free data retrieval call binding the contract method 0x29745262.
//
// Solidity: function modulo() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) Modulo() (*big.Int, error) {
	return _StakingWalletCST.Contract.Modulo(&_StakingWalletCST.CallOpts)
}

// Modulo is a free data retrieval call binding the contract method 0x29745262.
//
// Solidity: function modulo() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) Modulo() (*big.Int, error) {
	return _StakingWalletCST.Contract.Modulo(&_StakingWalletCST.CallOpts)
}

// Nft is a free data retrieval call binding the contract method 0x47ccca02.
//
// Solidity: function nft() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCaller) Nft(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "nft")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Nft is a free data retrieval call binding the contract method 0x47ccca02.
//
// Solidity: function nft() view returns(address)
func (_StakingWalletCST *StakingWalletCSTSession) Nft() (common.Address, error) {
	return _StakingWalletCST.Contract.Nft(&_StakingWalletCST.CallOpts)
}

// Nft is a free data retrieval call binding the contract method 0x47ccca02.
//
// Solidity: function nft() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCallerSession) Nft() (common.Address, error) {
	return _StakingWalletCST.Contract.Nft(&_StakingWalletCST.CallOpts)
}

// NumETHDeposits is a free data retrieval call binding the contract method 0x55279fdb.
//
// Solidity: function numETHDeposits() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) NumETHDeposits(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "numETHDeposits")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumETHDeposits is a free data retrieval call binding the contract method 0x55279fdb.
//
// Solidity: function numETHDeposits() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) NumETHDeposits() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumETHDeposits(&_StakingWalletCST.CallOpts)
}

// NumETHDeposits is a free data retrieval call binding the contract method 0x55279fdb.
//
// Solidity: function numETHDeposits() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) NumETHDeposits() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumETHDeposits(&_StakingWalletCST.CallOpts)
}

// NumStakeActions is a free data retrieval call binding the contract method 0xa531aa86.
//
// Solidity: function numStakeActions() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) NumStakeActions(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "numStakeActions")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStakeActions is a free data retrieval call binding the contract method 0xa531aa86.
//
// Solidity: function numStakeActions() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) NumStakeActions() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumStakeActions(&_StakingWalletCST.CallOpts)
}

// NumStakeActions is a free data retrieval call binding the contract method 0xa531aa86.
//
// Solidity: function numStakeActions() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) NumStakeActions() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumStakeActions(&_StakingWalletCST.CallOpts)
}

// NumStakedNFTs is a free data retrieval call binding the contract method 0x17db6213.
//
// Solidity: function numStakedNFTs() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) NumStakedNFTs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "numStakedNFTs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStakedNFTs is a free data retrieval call binding the contract method 0x17db6213.
//
// Solidity: function numStakedNFTs() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) NumStakedNFTs() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumStakedNFTs(&_StakingWalletCST.CallOpts)
}

// NumStakedNFTs is a free data retrieval call binding the contract method 0x17db6213.
//
// Solidity: function numStakedNFTs() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) NumStakedNFTs() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumStakedNFTs(&_StakingWalletCST.CallOpts)
}

// NumTokensStaked is a free data retrieval call binding the contract method 0x5fda0acc.
//
// Solidity: function numTokensStaked() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) NumTokensStaked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "numTokensStaked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumTokensStaked is a free data retrieval call binding the contract method 0x5fda0acc.
//
// Solidity: function numTokensStaked() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) NumTokensStaked() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumTokensStaked(&_StakingWalletCST.CallOpts)
}

// NumTokensStaked is a free data retrieval call binding the contract method 0x5fda0acc.
//
// Solidity: function numTokensStaked() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) NumTokensStaked() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumTokensStaked(&_StakingWalletCST.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakingWalletCST *StakingWalletCSTSession) Owner() (common.Address, error) {
	return _StakingWalletCST.Contract.Owner(&_StakingWalletCST.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCallerSession) Owner() (common.Address, error) {
	return _StakingWalletCST.Contract.Owner(&_StakingWalletCST.CallOpts)
}

// StakeActions is a free data retrieval call binding the contract method 0xa2b136fb.
//
// Solidity: function stakeActions(uint256 ) view returns(uint256 tokenId, address owner, uint256 stakeTime, uint256 unstakeTime)
func (_StakingWalletCST *StakingWalletCSTCaller) StakeActions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	TokenId     *big.Int
	Owner       common.Address
	StakeTime   *big.Int
	UnstakeTime *big.Int
}, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "stakeActions", arg0)

	outstruct := new(struct {
		TokenId     *big.Int
		Owner       common.Address
		StakeTime   *big.Int
		UnstakeTime *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TokenId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.StakeTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.UnstakeTime = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// StakeActions is a free data retrieval call binding the contract method 0xa2b136fb.
//
// Solidity: function stakeActions(uint256 ) view returns(uint256 tokenId, address owner, uint256 stakeTime, uint256 unstakeTime)
func (_StakingWalletCST *StakingWalletCSTSession) StakeActions(arg0 *big.Int) (struct {
	TokenId     *big.Int
	Owner       common.Address
	StakeTime   *big.Int
	UnstakeTime *big.Int
}, error) {
	return _StakingWalletCST.Contract.StakeActions(&_StakingWalletCST.CallOpts, arg0)
}

// StakeActions is a free data retrieval call binding the contract method 0xa2b136fb.
//
// Solidity: function stakeActions(uint256 ) view returns(uint256 tokenId, address owner, uint256 stakeTime, uint256 unstakeTime)
func (_StakingWalletCST *StakingWalletCSTCallerSession) StakeActions(arg0 *big.Int) (struct {
	TokenId     *big.Int
	Owner       common.Address
	StakeTime   *big.Int
	UnstakeTime *big.Int
}, error) {
	return _StakingWalletCST.Contract.StakeActions(&_StakingWalletCST.CallOpts, arg0)
}

// StakedTokens is a free data retrieval call binding the contract method 0xc0788555.
//
// Solidity: function stakedTokens(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) StakedTokens(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "stakedTokens", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakedTokens is a free data retrieval call binding the contract method 0xc0788555.
//
// Solidity: function stakedTokens(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) StakedTokens(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.StakedTokens(&_StakingWalletCST.CallOpts, arg0)
}

// StakedTokens is a free data retrieval call binding the contract method 0xc0788555.
//
// Solidity: function stakedTokens(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) StakedTokens(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.StakedTokens(&_StakingWalletCST.CallOpts, arg0)
}

// StakerByTokenId is a free data retrieval call binding the contract method 0xc065894e.
//
// Solidity: function stakerByTokenId(uint256 tokenId) view returns(address)
func (_StakingWalletCST *StakingWalletCSTCaller) StakerByTokenId(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "stakerByTokenId", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakerByTokenId is a free data retrieval call binding the contract method 0xc065894e.
//
// Solidity: function stakerByTokenId(uint256 tokenId) view returns(address)
func (_StakingWalletCST *StakingWalletCSTSession) StakerByTokenId(tokenId *big.Int) (common.Address, error) {
	return _StakingWalletCST.Contract.StakerByTokenId(&_StakingWalletCST.CallOpts, tokenId)
}

// StakerByTokenId is a free data retrieval call binding the contract method 0xc065894e.
//
// Solidity: function stakerByTokenId(uint256 tokenId) view returns(address)
func (_StakingWalletCST *StakingWalletCSTCallerSession) StakerByTokenId(tokenId *big.Int) (common.Address, error) {
	return _StakingWalletCST.Contract.StakerByTokenId(&_StakingWalletCST.CallOpts, tokenId)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 tokenIndex) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) TokenByIndex(opts *bind.CallOpts, tokenIndex *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "tokenByIndex", tokenIndex)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 tokenIndex) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) TokenByIndex(tokenIndex *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.TokenByIndex(&_StakingWalletCST.CallOpts, tokenIndex)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 tokenIndex) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) TokenByIndex(tokenIndex *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.TokenByIndex(&_StakingWalletCST.CallOpts, tokenIndex)
}

// TokenIndices is a free data retrieval call binding the contract method 0x44d110b9.
//
// Solidity: function tokenIndices(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) TokenIndices(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "tokenIndices", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenIndices is a free data retrieval call binding the contract method 0x44d110b9.
//
// Solidity: function tokenIndices(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) TokenIndices(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.TokenIndices(&_StakingWalletCST.CallOpts, arg0)
}

// TokenIndices is a free data retrieval call binding the contract method 0x44d110b9.
//
// Solidity: function tokenIndices(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) TokenIndices(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.TokenIndices(&_StakingWalletCST.CallOpts, arg0)
}

// UsedTokens is a free data retrieval call binding the contract method 0x0f7ee879.
//
// Solidity: function usedTokens(uint256 ) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTCaller) UsedTokens(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "usedTokens", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// UsedTokens is a free data retrieval call binding the contract method 0x0f7ee879.
//
// Solidity: function usedTokens(uint256 ) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTSession) UsedTokens(arg0 *big.Int) (bool, error) {
	return _StakingWalletCST.Contract.UsedTokens(&_StakingWalletCST.CallOpts, arg0)
}

// UsedTokens is a free data retrieval call binding the contract method 0x0f7ee879.
//
// Solidity: function usedTokens(uint256 ) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTCallerSession) UsedTokens(arg0 *big.Int) (bool, error) {
	return _StakingWalletCST.Contract.UsedTokens(&_StakingWalletCST.CallOpts, arg0)
}

// WasTokenUsed is a free data retrieval call binding the contract method 0x2a3247aa.
//
// Solidity: function wasTokenUsed(uint256 _tokenId) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTCaller) WasTokenUsed(opts *bind.CallOpts, _tokenId *big.Int) (bool, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "wasTokenUsed", _tokenId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WasTokenUsed is a free data retrieval call binding the contract method 0x2a3247aa.
//
// Solidity: function wasTokenUsed(uint256 _tokenId) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTSession) WasTokenUsed(_tokenId *big.Int) (bool, error) {
	return _StakingWalletCST.Contract.WasTokenUsed(&_StakingWalletCST.CallOpts, _tokenId)
}

// WasTokenUsed is a free data retrieval call binding the contract method 0x2a3247aa.
//
// Solidity: function wasTokenUsed(uint256 _tokenId) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTCallerSession) WasTokenUsed(_tokenId *big.Int) (bool, error) {
	return _StakingWalletCST.Contract.WasTokenUsed(&_StakingWalletCST.CallOpts, _tokenId)
}

// ClaimManyRewards is a paid mutator transaction binding the contract method 0x6034eb5b.
//
// Solidity: function claimManyRewards(uint256[] actions, uint256[] deposits) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) ClaimManyRewards(opts *bind.TransactOpts, actions []*big.Int, deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "claimManyRewards", actions, deposits)
}

// ClaimManyRewards is a paid mutator transaction binding the contract method 0x6034eb5b.
//
// Solidity: function claimManyRewards(uint256[] actions, uint256[] deposits) returns()
func (_StakingWalletCST *StakingWalletCSTSession) ClaimManyRewards(actions []*big.Int, deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ClaimManyRewards(&_StakingWalletCST.TransactOpts, actions, deposits)
}

// ClaimManyRewards is a paid mutator transaction binding the contract method 0x6034eb5b.
//
// Solidity: function claimManyRewards(uint256[] actions, uint256[] deposits) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) ClaimManyRewards(actions []*big.Int, deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ClaimManyRewards(&_StakingWalletCST.TransactOpts, actions, deposits)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) ClaimReward(opts *bind.TransactOpts, stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "claimReward", stakeActionId, ETHDepositId)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWalletCST *StakingWalletCSTSession) ClaimReward(stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ClaimReward(&_StakingWalletCST.TransactOpts, stakeActionId, ETHDepositId)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) ClaimReward(stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ClaimReward(&_StakingWalletCST.TransactOpts, stakeActionId, ETHDepositId)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakingWalletCST *StakingWalletCSTSession) Deposit() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Deposit(&_StakingWalletCST.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) Deposit() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Deposit(&_StakingWalletCST.TransactOpts)
}

// ModuloToCharity is a paid mutator transaction binding the contract method 0xdb636898.
//
// Solidity: function moduloToCharity() returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) ModuloToCharity(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "moduloToCharity")
}

// ModuloToCharity is a paid mutator transaction binding the contract method 0xdb636898.
//
// Solidity: function moduloToCharity() returns()
func (_StakingWalletCST *StakingWalletCSTSession) ModuloToCharity() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ModuloToCharity(&_StakingWalletCST.TransactOpts)
}

// ModuloToCharity is a paid mutator transaction binding the contract method 0xdb636898.
//
// Solidity: function moduloToCharity() returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) ModuloToCharity() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ModuloToCharity(&_StakingWalletCST.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingWalletCST *StakingWalletCSTSession) RenounceOwnership() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.RenounceOwnership(&_StakingWalletCST.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.RenounceOwnership(&_StakingWalletCST.TransactOpts)
}

// SetCharity is a paid mutator transaction binding the contract method 0xfb6f71a3.
//
// Solidity: function setCharity(address newCharityAddress) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) SetCharity(opts *bind.TransactOpts, newCharityAddress common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "setCharity", newCharityAddress)
}

// SetCharity is a paid mutator transaction binding the contract method 0xfb6f71a3.
//
// Solidity: function setCharity(address newCharityAddress) returns()
func (_StakingWalletCST *StakingWalletCSTSession) SetCharity(newCharityAddress common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.SetCharity(&_StakingWalletCST.TransactOpts, newCharityAddress)
}

// SetCharity is a paid mutator transaction binding the contract method 0xfb6f71a3.
//
// Solidity: function setCharity(address newCharityAddress) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) SetCharity(newCharityAddress common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.SetCharity(&_StakingWalletCST.TransactOpts, newCharityAddress)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _tokenId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) Stake(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "stake", _tokenId)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _tokenId) returns()
func (_StakingWalletCST *StakingWalletCSTSession) Stake(_tokenId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Stake(&_StakingWalletCST.TransactOpts, _tokenId)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _tokenId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) Stake(_tokenId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Stake(&_StakingWalletCST.TransactOpts, _tokenId)
}

// StakeMany is a paid mutator transaction binding the contract method 0xfe939afc.
//
// Solidity: function stakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) StakeMany(opts *bind.TransactOpts, ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "stakeMany", ids)
}

// StakeMany is a paid mutator transaction binding the contract method 0xfe939afc.
//
// Solidity: function stakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTSession) StakeMany(ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.StakeMany(&_StakingWalletCST.TransactOpts, ids)
}

// StakeMany is a paid mutator transaction binding the contract method 0xfe939afc.
//
// Solidity: function stakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) StakeMany(ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.StakeMany(&_StakingWalletCST.TransactOpts, ids)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingWalletCST *StakingWalletCSTSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.TransferOwnership(&_StakingWalletCST.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.TransferOwnership(&_StakingWalletCST.TransactOpts, newOwner)
}

// Unstake is a paid mutator transaction binding the contract method 0x2e17de78.
//
// Solidity: function unstake(uint256 stakeActionId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) Unstake(opts *bind.TransactOpts, stakeActionId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "unstake", stakeActionId)
}

// Unstake is a paid mutator transaction binding the contract method 0x2e17de78.
//
// Solidity: function unstake(uint256 stakeActionId) returns()
func (_StakingWalletCST *StakingWalletCSTSession) Unstake(stakeActionId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Unstake(&_StakingWalletCST.TransactOpts, stakeActionId)
}

// Unstake is a paid mutator transaction binding the contract method 0x2e17de78.
//
// Solidity: function unstake(uint256 stakeActionId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) Unstake(stakeActionId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Unstake(&_StakingWalletCST.TransactOpts, stakeActionId)
}

// UnstakeMany is a paid mutator transaction binding the contract method 0x0d50c189.
//
// Solidity: function unstakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) UnstakeMany(opts *bind.TransactOpts, ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "unstakeMany", ids)
}

// UnstakeMany is a paid mutator transaction binding the contract method 0x0d50c189.
//
// Solidity: function unstakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTSession) UnstakeMany(ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.UnstakeMany(&_StakingWalletCST.TransactOpts, ids)
}

// UnstakeMany is a paid mutator transaction binding the contract method 0x0d50c189.
//
// Solidity: function unstakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) UnstakeMany(ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.UnstakeMany(&_StakingWalletCST.TransactOpts, ids)
}

// StakingWalletCSTCharityDepositEventIterator is returned from FilterCharityDepositEvent and is used to iterate over the raw logs and unpacked data for CharityDepositEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTCharityDepositEventIterator struct {
	Event *StakingWalletCSTCharityDepositEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTCharityDepositEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTCharityDepositEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTCharityDepositEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTCharityDepositEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTCharityDepositEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTCharityDepositEvent represents a CharityDepositEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTCharityDepositEvent struct {
	Amount         *big.Int
	CharityAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCharityDepositEvent is a free log retrieval operation binding the contract event 0x70edffe0d8a2915bb852155db6f5f63024fb796983bbc1f5bab6ff8911fc1252.
//
// Solidity: event CharityDepositEvent(uint256 amount, address charityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterCharityDepositEvent(opts *bind.FilterOpts) (*StakingWalletCSTCharityDepositEventIterator, error) {

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "CharityDepositEvent")
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTCharityDepositEventIterator{contract: _StakingWalletCST.contract, event: "CharityDepositEvent", logs: logs, sub: sub}, nil
}

// WatchCharityDepositEvent is a free log subscription operation binding the contract event 0x70edffe0d8a2915bb852155db6f5f63024fb796983bbc1f5bab6ff8911fc1252.
//
// Solidity: event CharityDepositEvent(uint256 amount, address charityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchCharityDepositEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTCharityDepositEvent) (event.Subscription, error) {

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "CharityDepositEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTCharityDepositEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "CharityDepositEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCharityDepositEvent is a log parse operation binding the contract event 0x70edffe0d8a2915bb852155db6f5f63024fb796983bbc1f5bab6ff8911fc1252.
//
// Solidity: event CharityDepositEvent(uint256 amount, address charityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseCharityDepositEvent(log types.Log) (*StakingWalletCSTCharityDepositEvent, error) {
	event := new(StakingWalletCSTCharityDepositEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "CharityDepositEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTCharityUpdatedEventIterator is returned from FilterCharityUpdatedEvent and is used to iterate over the raw logs and unpacked data for CharityUpdatedEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTCharityUpdatedEventIterator struct {
	Event *StakingWalletCSTCharityUpdatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTCharityUpdatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTCharityUpdatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTCharityUpdatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTCharityUpdatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTCharityUpdatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTCharityUpdatedEvent represents a CharityUpdatedEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTCharityUpdatedEvent struct {
	NewCharityAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterCharityUpdatedEvent is a free log retrieval operation binding the contract event 0xa0bd6b2fdbf082ae2356710c23fc8d76d56d418cecb4514d119c77a8617b4ffe.
//
// Solidity: event CharityUpdatedEvent(address indexed newCharityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterCharityUpdatedEvent(opts *bind.FilterOpts, newCharityAddress []common.Address) (*StakingWalletCSTCharityUpdatedEventIterator, error) {

	var newCharityAddressRule []interface{}
	for _, newCharityAddressItem := range newCharityAddress {
		newCharityAddressRule = append(newCharityAddressRule, newCharityAddressItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "CharityUpdatedEvent", newCharityAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTCharityUpdatedEventIterator{contract: _StakingWalletCST.contract, event: "CharityUpdatedEvent", logs: logs, sub: sub}, nil
}

// WatchCharityUpdatedEvent is a free log subscription operation binding the contract event 0xa0bd6b2fdbf082ae2356710c23fc8d76d56d418cecb4514d119c77a8617b4ffe.
//
// Solidity: event CharityUpdatedEvent(address indexed newCharityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchCharityUpdatedEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTCharityUpdatedEvent, newCharityAddress []common.Address) (event.Subscription, error) {

	var newCharityAddressRule []interface{}
	for _, newCharityAddressItem := range newCharityAddress {
		newCharityAddressRule = append(newCharityAddressRule, newCharityAddressItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "CharityUpdatedEvent", newCharityAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTCharityUpdatedEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "CharityUpdatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCharityUpdatedEvent is a log parse operation binding the contract event 0xa0bd6b2fdbf082ae2356710c23fc8d76d56d418cecb4514d119c77a8617b4ffe.
//
// Solidity: event CharityUpdatedEvent(address indexed newCharityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseCharityUpdatedEvent(log types.Log) (*StakingWalletCSTCharityUpdatedEvent, error) {
	event := new(StakingWalletCSTCharityUpdatedEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "CharityUpdatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTClaimRewardEventIterator is returned from FilterClaimRewardEvent and is used to iterate over the raw logs and unpacked data for ClaimRewardEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTClaimRewardEventIterator struct {
	Event *StakingWalletCSTClaimRewardEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTClaimRewardEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTClaimRewardEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTClaimRewardEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTClaimRewardEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTClaimRewardEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTClaimRewardEvent represents a ClaimRewardEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTClaimRewardEvent struct {
	ActionId  *big.Int
	DepositId *big.Int
	Reward    *big.Int
	Staker    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaimRewardEvent is a free log retrieval operation binding the contract event 0xdde81df5caa033e783e2a39d93e3a8718a7dc27ba95a4757f5433a01f794ec36.
//
// Solidity: event ClaimRewardEvent(uint256 indexed actionId, uint256 indexed depositId, uint256 reward, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterClaimRewardEvent(opts *bind.FilterOpts, actionId []*big.Int, depositId []*big.Int, staker []common.Address) (*StakingWalletCSTClaimRewardEventIterator, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "ClaimRewardEvent", actionIdRule, depositIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTClaimRewardEventIterator{contract: _StakingWalletCST.contract, event: "ClaimRewardEvent", logs: logs, sub: sub}, nil
}

// WatchClaimRewardEvent is a free log subscription operation binding the contract event 0xdde81df5caa033e783e2a39d93e3a8718a7dc27ba95a4757f5433a01f794ec36.
//
// Solidity: event ClaimRewardEvent(uint256 indexed actionId, uint256 indexed depositId, uint256 reward, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchClaimRewardEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTClaimRewardEvent, actionId []*big.Int, depositId []*big.Int, staker []common.Address) (event.Subscription, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "ClaimRewardEvent", actionIdRule, depositIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTClaimRewardEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "ClaimRewardEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimRewardEvent is a log parse operation binding the contract event 0xdde81df5caa033e783e2a39d93e3a8718a7dc27ba95a4757f5433a01f794ec36.
//
// Solidity: event ClaimRewardEvent(uint256 indexed actionId, uint256 indexed depositId, uint256 reward, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseClaimRewardEvent(log types.Log) (*StakingWalletCSTClaimRewardEvent, error) {
	event := new(StakingWalletCSTClaimRewardEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "ClaimRewardEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTEthDepositEventIterator is returned from FilterEthDepositEvent and is used to iterate over the raw logs and unpacked data for EthDepositEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTEthDepositEventIterator struct {
	Event *StakingWalletCSTEthDepositEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTEthDepositEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTEthDepositEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTEthDepositEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTEthDepositEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTEthDepositEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTEthDepositEvent represents a EthDepositEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTEthDepositEvent struct {
	DepositTime   *big.Int
	DepositNum    *big.Int
	NumStakedNFTs *big.Int
	Amount        *big.Int
	Modulo        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterEthDepositEvent is a free log retrieval operation binding the contract event 0xdc0eacba8b1f88284dca5eec8be23173aefa7206298fe22de43e064b6ccd8418.
//
// Solidity: event EthDepositEvent(uint256 indexed depositTime, uint256 depositNum, uint256 numStakedNFTs, uint256 amount, uint256 modulo)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterEthDepositEvent(opts *bind.FilterOpts, depositTime []*big.Int) (*StakingWalletCSTEthDepositEventIterator, error) {

	var depositTimeRule []interface{}
	for _, depositTimeItem := range depositTime {
		depositTimeRule = append(depositTimeRule, depositTimeItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "EthDepositEvent", depositTimeRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTEthDepositEventIterator{contract: _StakingWalletCST.contract, event: "EthDepositEvent", logs: logs, sub: sub}, nil
}

// WatchEthDepositEvent is a free log subscription operation binding the contract event 0xdc0eacba8b1f88284dca5eec8be23173aefa7206298fe22de43e064b6ccd8418.
//
// Solidity: event EthDepositEvent(uint256 indexed depositTime, uint256 depositNum, uint256 numStakedNFTs, uint256 amount, uint256 modulo)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchEthDepositEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTEthDepositEvent, depositTime []*big.Int) (event.Subscription, error) {

	var depositTimeRule []interface{}
	for _, depositTimeItem := range depositTime {
		depositTimeRule = append(depositTimeRule, depositTimeItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "EthDepositEvent", depositTimeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTEthDepositEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "EthDepositEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEthDepositEvent is a log parse operation binding the contract event 0xdc0eacba8b1f88284dca5eec8be23173aefa7206298fe22de43e064b6ccd8418.
//
// Solidity: event EthDepositEvent(uint256 indexed depositTime, uint256 depositNum, uint256 numStakedNFTs, uint256 amount, uint256 modulo)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseEthDepositEvent(log types.Log) (*StakingWalletCSTEthDepositEvent, error) {
	event := new(StakingWalletCSTEthDepositEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "EthDepositEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTModuloSentEventIterator is returned from FilterModuloSentEvent and is used to iterate over the raw logs and unpacked data for ModuloSentEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTModuloSentEventIterator struct {
	Event *StakingWalletCSTModuloSentEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTModuloSentEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTModuloSentEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTModuloSentEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTModuloSentEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTModuloSentEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTModuloSentEvent represents a ModuloSentEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTModuloSentEvent struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterModuloSentEvent is a free log retrieval operation binding the contract event 0x6905286e1ecb9b47a50224e76e31cf1383f75212bc0b06c8684317782566a0a7.
//
// Solidity: event ModuloSentEvent(uint256 amount)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterModuloSentEvent(opts *bind.FilterOpts) (*StakingWalletCSTModuloSentEventIterator, error) {

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "ModuloSentEvent")
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTModuloSentEventIterator{contract: _StakingWalletCST.contract, event: "ModuloSentEvent", logs: logs, sub: sub}, nil
}

// WatchModuloSentEvent is a free log subscription operation binding the contract event 0x6905286e1ecb9b47a50224e76e31cf1383f75212bc0b06c8684317782566a0a7.
//
// Solidity: event ModuloSentEvent(uint256 amount)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchModuloSentEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTModuloSentEvent) (event.Subscription, error) {

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "ModuloSentEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTModuloSentEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "ModuloSentEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseModuloSentEvent is a log parse operation binding the contract event 0x6905286e1ecb9b47a50224e76e31cf1383f75212bc0b06c8684317782566a0a7.
//
// Solidity: event ModuloSentEvent(uint256 amount)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseModuloSentEvent(log types.Log) (*StakingWalletCSTModuloSentEvent, error) {
	event := new(StakingWalletCSTModuloSentEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "ModuloSentEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the StakingWalletCST contract.
type StakingWalletCSTOwnershipTransferredIterator struct {
	Event *StakingWalletCSTOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTOwnershipTransferred represents a OwnershipTransferred event raised by the StakingWalletCST contract.
type StakingWalletCSTOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StakingWalletCSTOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTOwnershipTransferredIterator{contract: _StakingWalletCST.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTOwnershipTransferred)
				if err := _StakingWalletCST.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseOwnershipTransferred(log types.Log) (*StakingWalletCSTOwnershipTransferred, error) {
	event := new(StakingWalletCSTOwnershipTransferred)
	if err := _StakingWalletCST.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTStakeActionEventIterator is returned from FilterStakeActionEvent and is used to iterate over the raw logs and unpacked data for StakeActionEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTStakeActionEventIterator struct {
	Event *StakingWalletCSTStakeActionEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTStakeActionEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTStakeActionEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTStakeActionEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTStakeActionEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTStakeActionEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTStakeActionEvent represents a StakeActionEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTStakeActionEvent struct {
	ActionId  *big.Int
	TokenId   *big.Int
	TotalNFTs *big.Int
	Staker    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStakeActionEvent is a free log retrieval operation binding the contract event 0xde0c27ec227b5d0c0a194ea6f25d7031639f9c10d8bf6e2f9414ff8088a6e20d.
//
// Solidity: event StakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterStakeActionEvent(opts *bind.FilterOpts, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (*StakingWalletCSTStakeActionEventIterator, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "StakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTStakeActionEventIterator{contract: _StakingWalletCST.contract, event: "StakeActionEvent", logs: logs, sub: sub}, nil
}

// WatchStakeActionEvent is a free log subscription operation binding the contract event 0xde0c27ec227b5d0c0a194ea6f25d7031639f9c10d8bf6e2f9414ff8088a6e20d.
//
// Solidity: event StakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchStakeActionEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTStakeActionEvent, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (event.Subscription, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "StakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTStakeActionEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "StakeActionEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeActionEvent is a log parse operation binding the contract event 0xde0c27ec227b5d0c0a194ea6f25d7031639f9c10d8bf6e2f9414ff8088a6e20d.
//
// Solidity: event StakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseStakeActionEvent(log types.Log) (*StakingWalletCSTStakeActionEvent, error) {
	event := new(StakingWalletCSTStakeActionEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "StakeActionEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTUnstakeActionEventIterator is returned from FilterUnstakeActionEvent and is used to iterate over the raw logs and unpacked data for UnstakeActionEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTUnstakeActionEventIterator struct {
	Event *StakingWalletCSTUnstakeActionEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTUnstakeActionEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTUnstakeActionEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTUnstakeActionEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTUnstakeActionEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTUnstakeActionEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTUnstakeActionEvent represents a UnstakeActionEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTUnstakeActionEvent struct {
	ActionId  *big.Int
	TokenId   *big.Int
	TotalNFTs *big.Int
	Staker    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUnstakeActionEvent is a free log retrieval operation binding the contract event 0x33940a9fc3ee3c9150b29b34ef29ca397b5e1e340425a4f0da0346b5b90766c8.
//
// Solidity: event UnstakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterUnstakeActionEvent(opts *bind.FilterOpts, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (*StakingWalletCSTUnstakeActionEventIterator, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "UnstakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTUnstakeActionEventIterator{contract: _StakingWalletCST.contract, event: "UnstakeActionEvent", logs: logs, sub: sub}, nil
}

// WatchUnstakeActionEvent is a free log subscription operation binding the contract event 0x33940a9fc3ee3c9150b29b34ef29ca397b5e1e340425a4f0da0346b5b90766c8.
//
// Solidity: event UnstakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchUnstakeActionEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTUnstakeActionEvent, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (event.Subscription, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "UnstakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTUnstakeActionEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "UnstakeActionEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstakeActionEvent is a log parse operation binding the contract event 0x33940a9fc3ee3c9150b29b34ef29ca397b5e1e340425a4f0da0346b5b90766c8.
//
// Solidity: event UnstakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseUnstakeActionEvent(log types.Log) (*StakingWalletCSTUnstakeActionEvent, error) {
	event := new(StakingWalletCSTUnstakeActionEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "UnstakeActionEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
