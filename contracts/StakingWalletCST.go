// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StakingWalletCSTMetaData contains all meta data concerning the StakingWalletCST contract.
var StakingWalletCSTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractCosmicSignature\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"contractCosmicGame\",\"name\":\"game_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charity_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"charityAddress\",\"type\":\"address\"}],\"name\":\"CharityDepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCharityAddress\",\"type\":\"address\"}],\"name\":\"CharityUpdatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"ClaimRewardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"depositTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numStakedNFTs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"modulo\",\"type\":\"uint256\"}],\"name\":\"EthDepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"MinStakePeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ModuloSentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalNFTs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"StakeActionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalNFTs\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"UnstakeActionEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ETHDeposits\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"depositTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deposits\",\"type\":\"uint256[]\"}],\"name\":\"claimManyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeActionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHDepositId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"contractCosmicGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lastActionIdByTokenId\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastActionIds\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakePeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modulo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduloToCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contractCosmicSignature\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numETHDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStakeActions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStakedNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"entropy\",\"type\":\"bytes32\"}],\"name\":\"pickRandomStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCharityAddress\",\"type\":\"address\"}],\"name\":\"setCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newStakePeriod\",\"type\":\"uint32\"}],\"name\":\"setMinStakePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeActions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakeTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unstakeTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unstakeEligibleTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"stakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakerByTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeActionId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeActionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHDepositId\",\"type\":\"uint256\"}],\"name\":\"unstakeClaimRestake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unstake_actions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stake_actions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claim_actions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claim_deposits\",\"type\":\"uint256[]\"}],\"name\":\"unstakeClaimRestakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// StakingWalletCSTABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingWalletCSTMetaData.ABI instead.
var StakingWalletCSTABI = StakingWalletCSTMetaData.ABI

// StakingWalletCSTBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingWalletCSTMetaData.Bin instead.
var StakingWalletCSTBin = StakingWalletCSTMetaData.Bin

// DeployStakingWalletCST deploys a new Ethereum contract, binding an instance of StakingWalletCST to it.
func DeployStakingWalletCST(auth *bind.TransactOpts, backend bind.ContractBackend, nft_ common.Address, game_ common.Address, charity_ common.Address) (common.Address, *types.Transaction, *StakingWalletCST, error) {
	parsed, err := StakingWalletCSTMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingWalletCSTBin), backend, nft_, game_, charity_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingWalletCST{StakingWalletCSTCaller: StakingWalletCSTCaller{contract: contract}, StakingWalletCSTTransactor: StakingWalletCSTTransactor{contract: contract}, StakingWalletCSTFilterer: StakingWalletCSTFilterer{contract: contract}}, nil
}

// StakingWalletCST is an auto generated Go binding around an Ethereum contract.
type StakingWalletCST struct {
	StakingWalletCSTCaller     // Read-only binding to the contract
	StakingWalletCSTTransactor // Write-only binding to the contract
	StakingWalletCSTFilterer   // Log filterer for contract events
}

// StakingWalletCSTCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingWalletCSTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingWalletCSTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingWalletCSTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingWalletCSTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingWalletCSTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingWalletCSTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingWalletCSTSession struct {
	Contract     *StakingWalletCST // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingWalletCSTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingWalletCSTCallerSession struct {
	Contract *StakingWalletCSTCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// StakingWalletCSTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingWalletCSTTransactorSession struct {
	Contract     *StakingWalletCSTTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// StakingWalletCSTRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingWalletCSTRaw struct {
	Contract *StakingWalletCST // Generic contract binding to access the raw methods on
}

// StakingWalletCSTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingWalletCSTCallerRaw struct {
	Contract *StakingWalletCSTCaller // Generic read-only contract binding to access the raw methods on
}

// StakingWalletCSTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingWalletCSTTransactorRaw struct {
	Contract *StakingWalletCSTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingWalletCST creates a new instance of StakingWalletCST, bound to a specific deployed contract.
func NewStakingWalletCST(address common.Address, backend bind.ContractBackend) (*StakingWalletCST, error) {
	contract, err := bindStakingWalletCST(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCST{StakingWalletCSTCaller: StakingWalletCSTCaller{contract: contract}, StakingWalletCSTTransactor: StakingWalletCSTTransactor{contract: contract}, StakingWalletCSTFilterer: StakingWalletCSTFilterer{contract: contract}}, nil
}

// NewStakingWalletCSTCaller creates a new read-only instance of StakingWalletCST, bound to a specific deployed contract.
func NewStakingWalletCSTCaller(address common.Address, caller bind.ContractCaller) (*StakingWalletCSTCaller, error) {
	contract, err := bindStakingWalletCST(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTCaller{contract: contract}, nil
}

// NewStakingWalletCSTTransactor creates a new write-only instance of StakingWalletCST, bound to a specific deployed contract.
func NewStakingWalletCSTTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingWalletCSTTransactor, error) {
	contract, err := bindStakingWalletCST(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTTransactor{contract: contract}, nil
}

// NewStakingWalletCSTFilterer creates a new log filterer instance of StakingWalletCST, bound to a specific deployed contract.
func NewStakingWalletCSTFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingWalletCSTFilterer, error) {
	contract, err := bindStakingWalletCST(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTFilterer{contract: contract}, nil
}

// bindStakingWalletCST binds a generic wrapper to an already deployed contract.
func bindStakingWalletCST(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StakingWalletCSTMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingWalletCST *StakingWalletCSTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingWalletCST.Contract.StakingWalletCSTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingWalletCST *StakingWalletCSTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.StakingWalletCSTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingWalletCST *StakingWalletCSTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.StakingWalletCSTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingWalletCST *StakingWalletCSTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingWalletCST.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingWalletCST *StakingWalletCSTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingWalletCST *StakingWalletCSTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.contract.Transact(opts, method, params...)
}

// ETHDeposits is a free data retrieval call binding the contract method 0x451f1adf.
//
// Solidity: function ETHDeposits(uint256 ) view returns(uint32 depositTime, uint256 depositAmount, uint256 numStaked)
func (_StakingWalletCST *StakingWalletCSTCaller) ETHDeposits(opts *bind.CallOpts, arg0 *big.Int) (struct {
	DepositTime   uint32
	DepositAmount *big.Int
	NumStaked     *big.Int
}, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "ETHDeposits", arg0)

	outstruct := new(struct {
		DepositTime   uint32
		DepositAmount *big.Int
		NumStaked     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.DepositTime = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.DepositAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.NumStaked = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ETHDeposits is a free data retrieval call binding the contract method 0x451f1adf.
//
// Solidity: function ETHDeposits(uint256 ) view returns(uint32 depositTime, uint256 depositAmount, uint256 numStaked)
func (_StakingWalletCST *StakingWalletCSTSession) ETHDeposits(arg0 *big.Int) (struct {
	DepositTime   uint32
	DepositAmount *big.Int
	NumStaked     *big.Int
}, error) {
	return _StakingWalletCST.Contract.ETHDeposits(&_StakingWalletCST.CallOpts, arg0)
}

// ETHDeposits is a free data retrieval call binding the contract method 0x451f1adf.
//
// Solidity: function ETHDeposits(uint256 ) view returns(uint32 depositTime, uint256 depositAmount, uint256 numStaked)
func (_StakingWalletCST *StakingWalletCSTCallerSession) ETHDeposits(arg0 *big.Int) (struct {
	DepositTime   uint32
	DepositAmount *big.Int
	NumStaked     *big.Int
}, error) {
	return _StakingWalletCST.Contract.ETHDeposits(&_StakingWalletCST.CallOpts, arg0)
}

// Charity is a free data retrieval call binding the contract method 0x934aa023.
//
// Solidity: function charity() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCaller) Charity(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "charity")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Charity is a free data retrieval call binding the contract method 0x934aa023.
//
// Solidity: function charity() view returns(address)
func (_StakingWalletCST *StakingWalletCSTSession) Charity() (common.Address, error) {
	return _StakingWalletCST.Contract.Charity(&_StakingWalletCST.CallOpts)
}

// Charity is a free data retrieval call binding the contract method 0x934aa023.
//
// Solidity: function charity() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCallerSession) Charity() (common.Address, error) {
	return _StakingWalletCST.Contract.Charity(&_StakingWalletCST.CallOpts)
}

// Game is a free data retrieval call binding the contract method 0xc3fe3e28.
//
// Solidity: function game() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCaller) Game(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "game")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Game is a free data retrieval call binding the contract method 0xc3fe3e28.
//
// Solidity: function game() view returns(address)
func (_StakingWalletCST *StakingWalletCSTSession) Game() (common.Address, error) {
	return _StakingWalletCST.Contract.Game(&_StakingWalletCST.CallOpts)
}

// Game is a free data retrieval call binding the contract method 0xc3fe3e28.
//
// Solidity: function game() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCallerSession) Game() (common.Address, error) {
	return _StakingWalletCST.Contract.Game(&_StakingWalletCST.CallOpts)
}

// IsTokenStaked is a free data retrieval call binding the contract method 0xf0a52424.
//
// Solidity: function isTokenStaked(uint256 tokenId) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTCaller) IsTokenStaked(opts *bind.CallOpts, tokenId *big.Int) (bool, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "isTokenStaked", tokenId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTokenStaked is a free data retrieval call binding the contract method 0xf0a52424.
//
// Solidity: function isTokenStaked(uint256 tokenId) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTSession) IsTokenStaked(tokenId *big.Int) (bool, error) {
	return _StakingWalletCST.Contract.IsTokenStaked(&_StakingWalletCST.CallOpts, tokenId)
}

// IsTokenStaked is a free data retrieval call binding the contract method 0xf0a52424.
//
// Solidity: function isTokenStaked(uint256 tokenId) view returns(bool)
func (_StakingWalletCST *StakingWalletCSTCallerSession) IsTokenStaked(tokenId *big.Int) (bool, error) {
	return _StakingWalletCST.Contract.IsTokenStaked(&_StakingWalletCST.CallOpts, tokenId)
}

// LastActionIdByTokenId is a free data retrieval call binding the contract method 0x889d1e1a.
//
// Solidity: function lastActionIdByTokenId(uint256 tokenId) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTCaller) LastActionIdByTokenId(opts *bind.CallOpts, tokenId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "lastActionIdByTokenId", tokenId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastActionIdByTokenId is a free data retrieval call binding the contract method 0x889d1e1a.
//
// Solidity: function lastActionIdByTokenId(uint256 tokenId) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTSession) LastActionIdByTokenId(tokenId *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.LastActionIdByTokenId(&_StakingWalletCST.CallOpts, tokenId)
}

// LastActionIdByTokenId is a free data retrieval call binding the contract method 0x889d1e1a.
//
// Solidity: function lastActionIdByTokenId(uint256 tokenId) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) LastActionIdByTokenId(tokenId *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.LastActionIdByTokenId(&_StakingWalletCST.CallOpts, tokenId)
}

// LastActionIds is a free data retrieval call binding the contract method 0x6427d9a9.
//
// Solidity: function lastActionIds(uint256 ) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTCaller) LastActionIds(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "lastActionIds", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastActionIds is a free data retrieval call binding the contract method 0x6427d9a9.
//
// Solidity: function lastActionIds(uint256 ) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTSession) LastActionIds(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.LastActionIds(&_StakingWalletCST.CallOpts, arg0)
}

// LastActionIds is a free data retrieval call binding the contract method 0x6427d9a9.
//
// Solidity: function lastActionIds(uint256 ) view returns(int256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) LastActionIds(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.LastActionIds(&_StakingWalletCST.CallOpts, arg0)
}

// MinStakePeriod is a free data retrieval call binding the contract method 0xd84f2bc6.
//
// Solidity: function minStakePeriod() view returns(uint32)
func (_StakingWalletCST *StakingWalletCSTCaller) MinStakePeriod(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "minStakePeriod")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MinStakePeriod is a free data retrieval call binding the contract method 0xd84f2bc6.
//
// Solidity: function minStakePeriod() view returns(uint32)
func (_StakingWalletCST *StakingWalletCSTSession) MinStakePeriod() (uint32, error) {
	return _StakingWalletCST.Contract.MinStakePeriod(&_StakingWalletCST.CallOpts)
}

// MinStakePeriod is a free data retrieval call binding the contract method 0xd84f2bc6.
//
// Solidity: function minStakePeriod() view returns(uint32)
func (_StakingWalletCST *StakingWalletCSTCallerSession) MinStakePeriod() (uint32, error) {
	return _StakingWalletCST.Contract.MinStakePeriod(&_StakingWalletCST.CallOpts)
}

// Modulo is a free data retrieval call binding the contract method 0x29745262.
//
// Solidity: function modulo() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) Modulo(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "modulo")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Modulo is a free data retrieval call binding the contract method 0x29745262.
//
// Solidity: function modulo() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) Modulo() (*big.Int, error) {
	return _StakingWalletCST.Contract.Modulo(&_StakingWalletCST.CallOpts)
}

// Modulo is a free data retrieval call binding the contract method 0x29745262.
//
// Solidity: function modulo() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) Modulo() (*big.Int, error) {
	return _StakingWalletCST.Contract.Modulo(&_StakingWalletCST.CallOpts)
}

// Nft is a free data retrieval call binding the contract method 0x47ccca02.
//
// Solidity: function nft() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCaller) Nft(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "nft")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Nft is a free data retrieval call binding the contract method 0x47ccca02.
//
// Solidity: function nft() view returns(address)
func (_StakingWalletCST *StakingWalletCSTSession) Nft() (common.Address, error) {
	return _StakingWalletCST.Contract.Nft(&_StakingWalletCST.CallOpts)
}

// Nft is a free data retrieval call binding the contract method 0x47ccca02.
//
// Solidity: function nft() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCallerSession) Nft() (common.Address, error) {
	return _StakingWalletCST.Contract.Nft(&_StakingWalletCST.CallOpts)
}

// NumETHDeposits is a free data retrieval call binding the contract method 0x55279fdb.
//
// Solidity: function numETHDeposits() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) NumETHDeposits(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "numETHDeposits")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumETHDeposits is a free data retrieval call binding the contract method 0x55279fdb.
//
// Solidity: function numETHDeposits() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) NumETHDeposits() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumETHDeposits(&_StakingWalletCST.CallOpts)
}

// NumETHDeposits is a free data retrieval call binding the contract method 0x55279fdb.
//
// Solidity: function numETHDeposits() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) NumETHDeposits() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumETHDeposits(&_StakingWalletCST.CallOpts)
}

// NumStakeActions is a free data retrieval call binding the contract method 0xa531aa86.
//
// Solidity: function numStakeActions() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) NumStakeActions(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "numStakeActions")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStakeActions is a free data retrieval call binding the contract method 0xa531aa86.
//
// Solidity: function numStakeActions() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) NumStakeActions() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumStakeActions(&_StakingWalletCST.CallOpts)
}

// NumStakeActions is a free data retrieval call binding the contract method 0xa531aa86.
//
// Solidity: function numStakeActions() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) NumStakeActions() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumStakeActions(&_StakingWalletCST.CallOpts)
}

// NumStakedNFTs is a free data retrieval call binding the contract method 0x17db6213.
//
// Solidity: function numStakedNFTs() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) NumStakedNFTs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "numStakedNFTs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStakedNFTs is a free data retrieval call binding the contract method 0x17db6213.
//
// Solidity: function numStakedNFTs() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) NumStakedNFTs() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumStakedNFTs(&_StakingWalletCST.CallOpts)
}

// NumStakedNFTs is a free data retrieval call binding the contract method 0x17db6213.
//
// Solidity: function numStakedNFTs() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) NumStakedNFTs() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumStakedNFTs(&_StakingWalletCST.CallOpts)
}

// NumTokensStaked is a free data retrieval call binding the contract method 0x5fda0acc.
//
// Solidity: function numTokensStaked() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) NumTokensStaked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "numTokensStaked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumTokensStaked is a free data retrieval call binding the contract method 0x5fda0acc.
//
// Solidity: function numTokensStaked() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) NumTokensStaked() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumTokensStaked(&_StakingWalletCST.CallOpts)
}

// NumTokensStaked is a free data retrieval call binding the contract method 0x5fda0acc.
//
// Solidity: function numTokensStaked() view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) NumTokensStaked() (*big.Int, error) {
	return _StakingWalletCST.Contract.NumTokensStaked(&_StakingWalletCST.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakingWalletCST *StakingWalletCSTSession) Owner() (common.Address, error) {
	return _StakingWalletCST.Contract.Owner(&_StakingWalletCST.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakingWalletCST *StakingWalletCSTCallerSession) Owner() (common.Address, error) {
	return _StakingWalletCST.Contract.Owner(&_StakingWalletCST.CallOpts)
}

// PickRandomStaker is a free data retrieval call binding the contract method 0x41810425.
//
// Solidity: function pickRandomStaker(bytes32 entropy) view returns(address)
func (_StakingWalletCST *StakingWalletCSTCaller) PickRandomStaker(opts *bind.CallOpts, entropy [32]byte) (common.Address, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "pickRandomStaker", entropy)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PickRandomStaker is a free data retrieval call binding the contract method 0x41810425.
//
// Solidity: function pickRandomStaker(bytes32 entropy) view returns(address)
func (_StakingWalletCST *StakingWalletCSTSession) PickRandomStaker(entropy [32]byte) (common.Address, error) {
	return _StakingWalletCST.Contract.PickRandomStaker(&_StakingWalletCST.CallOpts, entropy)
}

// PickRandomStaker is a free data retrieval call binding the contract method 0x41810425.
//
// Solidity: function pickRandomStaker(bytes32 entropy) view returns(address)
func (_StakingWalletCST *StakingWalletCSTCallerSession) PickRandomStaker(entropy [32]byte) (common.Address, error) {
	return _StakingWalletCST.Contract.PickRandomStaker(&_StakingWalletCST.CallOpts, entropy)
}

// StakeActions is a free data retrieval call binding the contract method 0xa2b136fb.
//
// Solidity: function stakeActions(uint256 ) view returns(uint256 tokenId, address owner, uint32 stakeTime, uint32 unstakeTime, uint32 unstakeEligibleTime)
func (_StakingWalletCST *StakingWalletCSTCaller) StakeActions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	TokenId             *big.Int
	Owner               common.Address
	StakeTime           uint32
	UnstakeTime         uint32
	UnstakeEligibleTime uint32
}, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "stakeActions", arg0)

	outstruct := new(struct {
		TokenId             *big.Int
		Owner               common.Address
		StakeTime           uint32
		UnstakeTime         uint32
		UnstakeEligibleTime uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TokenId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.StakeTime = *abi.ConvertType(out[2], new(uint32)).(*uint32)
	outstruct.UnstakeTime = *abi.ConvertType(out[3], new(uint32)).(*uint32)
	outstruct.UnstakeEligibleTime = *abi.ConvertType(out[4], new(uint32)).(*uint32)

	return *outstruct, err

}

// StakeActions is a free data retrieval call binding the contract method 0xa2b136fb.
//
// Solidity: function stakeActions(uint256 ) view returns(uint256 tokenId, address owner, uint32 stakeTime, uint32 unstakeTime, uint32 unstakeEligibleTime)
func (_StakingWalletCST *StakingWalletCSTSession) StakeActions(arg0 *big.Int) (struct {
	TokenId             *big.Int
	Owner               common.Address
	StakeTime           uint32
	UnstakeTime         uint32
	UnstakeEligibleTime uint32
}, error) {
	return _StakingWalletCST.Contract.StakeActions(&_StakingWalletCST.CallOpts, arg0)
}

// StakeActions is a free data retrieval call binding the contract method 0xa2b136fb.
//
// Solidity: function stakeActions(uint256 ) view returns(uint256 tokenId, address owner, uint32 stakeTime, uint32 unstakeTime, uint32 unstakeEligibleTime)
func (_StakingWalletCST *StakingWalletCSTCallerSession) StakeActions(arg0 *big.Int) (struct {
	TokenId             *big.Int
	Owner               common.Address
	StakeTime           uint32
	UnstakeTime         uint32
	UnstakeEligibleTime uint32
}, error) {
	return _StakingWalletCST.Contract.StakeActions(&_StakingWalletCST.CallOpts, arg0)
}

// StakedTokens is a free data retrieval call binding the contract method 0xc0788555.
//
// Solidity: function stakedTokens(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) StakedTokens(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "stakedTokens", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakedTokens is a free data retrieval call binding the contract method 0xc0788555.
//
// Solidity: function stakedTokens(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) StakedTokens(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.StakedTokens(&_StakingWalletCST.CallOpts, arg0)
}

// StakedTokens is a free data retrieval call binding the contract method 0xc0788555.
//
// Solidity: function stakedTokens(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) StakedTokens(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.StakedTokens(&_StakingWalletCST.CallOpts, arg0)
}

// StakerByTokenId is a free data retrieval call binding the contract method 0xc065894e.
//
// Solidity: function stakerByTokenId(uint256 tokenId) view returns(address)
func (_StakingWalletCST *StakingWalletCSTCaller) StakerByTokenId(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "stakerByTokenId", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakerByTokenId is a free data retrieval call binding the contract method 0xc065894e.
//
// Solidity: function stakerByTokenId(uint256 tokenId) view returns(address)
func (_StakingWalletCST *StakingWalletCSTSession) StakerByTokenId(tokenId *big.Int) (common.Address, error) {
	return _StakingWalletCST.Contract.StakerByTokenId(&_StakingWalletCST.CallOpts, tokenId)
}

// StakerByTokenId is a free data retrieval call binding the contract method 0xc065894e.
//
// Solidity: function stakerByTokenId(uint256 tokenId) view returns(address)
func (_StakingWalletCST *StakingWalletCSTCallerSession) StakerByTokenId(tokenId *big.Int) (common.Address, error) {
	return _StakingWalletCST.Contract.StakerByTokenId(&_StakingWalletCST.CallOpts, tokenId)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 tokenIndex) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) TokenByIndex(opts *bind.CallOpts, tokenIndex *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "tokenByIndex", tokenIndex)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 tokenIndex) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) TokenByIndex(tokenIndex *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.TokenByIndex(&_StakingWalletCST.CallOpts, tokenIndex)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 tokenIndex) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) TokenByIndex(tokenIndex *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.TokenByIndex(&_StakingWalletCST.CallOpts, tokenIndex)
}

// TokenIndices is a free data retrieval call binding the contract method 0x44d110b9.
//
// Solidity: function tokenIndices(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCaller) TokenIndices(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakingWalletCST.contract.Call(opts, &out, "tokenIndices", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenIndices is a free data retrieval call binding the contract method 0x44d110b9.
//
// Solidity: function tokenIndices(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTSession) TokenIndices(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.TokenIndices(&_StakingWalletCST.CallOpts, arg0)
}

// TokenIndices is a free data retrieval call binding the contract method 0x44d110b9.
//
// Solidity: function tokenIndices(uint256 ) view returns(uint256)
func (_StakingWalletCST *StakingWalletCSTCallerSession) TokenIndices(arg0 *big.Int) (*big.Int, error) {
	return _StakingWalletCST.Contract.TokenIndices(&_StakingWalletCST.CallOpts, arg0)
}

// ClaimManyRewards is a paid mutator transaction binding the contract method 0x6034eb5b.
//
// Solidity: function claimManyRewards(uint256[] actions, uint256[] deposits) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) ClaimManyRewards(opts *bind.TransactOpts, actions []*big.Int, deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "claimManyRewards", actions, deposits)
}

// ClaimManyRewards is a paid mutator transaction binding the contract method 0x6034eb5b.
//
// Solidity: function claimManyRewards(uint256[] actions, uint256[] deposits) returns()
func (_StakingWalletCST *StakingWalletCSTSession) ClaimManyRewards(actions []*big.Int, deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ClaimManyRewards(&_StakingWalletCST.TransactOpts, actions, deposits)
}

// ClaimManyRewards is a paid mutator transaction binding the contract method 0x6034eb5b.
//
// Solidity: function claimManyRewards(uint256[] actions, uint256[] deposits) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) ClaimManyRewards(actions []*big.Int, deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ClaimManyRewards(&_StakingWalletCST.TransactOpts, actions, deposits)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) ClaimReward(opts *bind.TransactOpts, stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "claimReward", stakeActionId, ETHDepositId)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWalletCST *StakingWalletCSTSession) ClaimReward(stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ClaimReward(&_StakingWalletCST.TransactOpts, stakeActionId, ETHDepositId)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) ClaimReward(stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ClaimReward(&_StakingWalletCST.TransactOpts, stakeActionId, ETHDepositId)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakingWalletCST *StakingWalletCSTSession) Deposit() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Deposit(&_StakingWalletCST.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) Deposit() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Deposit(&_StakingWalletCST.TransactOpts)
}

// ModuloToCharity is a paid mutator transaction binding the contract method 0xdb636898.
//
// Solidity: function moduloToCharity() returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) ModuloToCharity(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "moduloToCharity")
}

// ModuloToCharity is a paid mutator transaction binding the contract method 0xdb636898.
//
// Solidity: function moduloToCharity() returns()
func (_StakingWalletCST *StakingWalletCSTSession) ModuloToCharity() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ModuloToCharity(&_StakingWalletCST.TransactOpts)
}

// ModuloToCharity is a paid mutator transaction binding the contract method 0xdb636898.
//
// Solidity: function moduloToCharity() returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) ModuloToCharity() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.ModuloToCharity(&_StakingWalletCST.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingWalletCST *StakingWalletCSTSession) RenounceOwnership() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.RenounceOwnership(&_StakingWalletCST.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _StakingWalletCST.Contract.RenounceOwnership(&_StakingWalletCST.TransactOpts)
}

// SetCharity is a paid mutator transaction binding the contract method 0xfb6f71a3.
//
// Solidity: function setCharity(address newCharityAddress) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) SetCharity(opts *bind.TransactOpts, newCharityAddress common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "setCharity", newCharityAddress)
}

// SetCharity is a paid mutator transaction binding the contract method 0xfb6f71a3.
//
// Solidity: function setCharity(address newCharityAddress) returns()
func (_StakingWalletCST *StakingWalletCSTSession) SetCharity(newCharityAddress common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.SetCharity(&_StakingWalletCST.TransactOpts, newCharityAddress)
}

// SetCharity is a paid mutator transaction binding the contract method 0xfb6f71a3.
//
// Solidity: function setCharity(address newCharityAddress) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) SetCharity(newCharityAddress common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.SetCharity(&_StakingWalletCST.TransactOpts, newCharityAddress)
}

// SetMinStakePeriod is a paid mutator transaction binding the contract method 0x25646e1f.
//
// Solidity: function setMinStakePeriod(uint32 newStakePeriod) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) SetMinStakePeriod(opts *bind.TransactOpts, newStakePeriod uint32) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "setMinStakePeriod", newStakePeriod)
}

// SetMinStakePeriod is a paid mutator transaction binding the contract method 0x25646e1f.
//
// Solidity: function setMinStakePeriod(uint32 newStakePeriod) returns()
func (_StakingWalletCST *StakingWalletCSTSession) SetMinStakePeriod(newStakePeriod uint32) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.SetMinStakePeriod(&_StakingWalletCST.TransactOpts, newStakePeriod)
}

// SetMinStakePeriod is a paid mutator transaction binding the contract method 0x25646e1f.
//
// Solidity: function setMinStakePeriod(uint32 newStakePeriod) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) SetMinStakePeriod(newStakePeriod uint32) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.SetMinStakePeriod(&_StakingWalletCST.TransactOpts, newStakePeriod)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _tokenId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) Stake(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "stake", _tokenId)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _tokenId) returns()
func (_StakingWalletCST *StakingWalletCSTSession) Stake(_tokenId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Stake(&_StakingWalletCST.TransactOpts, _tokenId)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _tokenId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) Stake(_tokenId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Stake(&_StakingWalletCST.TransactOpts, _tokenId)
}

// StakeMany is a paid mutator transaction binding the contract method 0xfe939afc.
//
// Solidity: function stakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) StakeMany(opts *bind.TransactOpts, ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "stakeMany", ids)
}

// StakeMany is a paid mutator transaction binding the contract method 0xfe939afc.
//
// Solidity: function stakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTSession) StakeMany(ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.StakeMany(&_StakingWalletCST.TransactOpts, ids)
}

// StakeMany is a paid mutator transaction binding the contract method 0xfe939afc.
//
// Solidity: function stakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) StakeMany(ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.StakeMany(&_StakingWalletCST.TransactOpts, ids)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingWalletCST *StakingWalletCSTSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.TransferOwnership(&_StakingWalletCST.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.TransferOwnership(&_StakingWalletCST.TransactOpts, newOwner)
}

// Unstake is a paid mutator transaction binding the contract method 0x2e17de78.
//
// Solidity: function unstake(uint256 stakeActionId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) Unstake(opts *bind.TransactOpts, stakeActionId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "unstake", stakeActionId)
}

// Unstake is a paid mutator transaction binding the contract method 0x2e17de78.
//
// Solidity: function unstake(uint256 stakeActionId) returns()
func (_StakingWalletCST *StakingWalletCSTSession) Unstake(stakeActionId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Unstake(&_StakingWalletCST.TransactOpts, stakeActionId)
}

// Unstake is a paid mutator transaction binding the contract method 0x2e17de78.
//
// Solidity: function unstake(uint256 stakeActionId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) Unstake(stakeActionId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.Unstake(&_StakingWalletCST.TransactOpts, stakeActionId)
}

// UnstakeClaimRestake is a paid mutator transaction binding the contract method 0xab2d14c7.
//
// Solidity: function unstakeClaimRestake(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) UnstakeClaimRestake(opts *bind.TransactOpts, stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "unstakeClaimRestake", stakeActionId, ETHDepositId)
}

// UnstakeClaimRestake is a paid mutator transaction binding the contract method 0xab2d14c7.
//
// Solidity: function unstakeClaimRestake(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWalletCST *StakingWalletCSTSession) UnstakeClaimRestake(stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.UnstakeClaimRestake(&_StakingWalletCST.TransactOpts, stakeActionId, ETHDepositId)
}

// UnstakeClaimRestake is a paid mutator transaction binding the contract method 0xab2d14c7.
//
// Solidity: function unstakeClaimRestake(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) UnstakeClaimRestake(stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.UnstakeClaimRestake(&_StakingWalletCST.TransactOpts, stakeActionId, ETHDepositId)
}

// UnstakeClaimRestakeMany is a paid mutator transaction binding the contract method 0x57f8dad9.
//
// Solidity: function unstakeClaimRestakeMany(uint256[] unstake_actions, uint256[] stake_actions, uint256[] claim_actions, uint256[] claim_deposits) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) UnstakeClaimRestakeMany(opts *bind.TransactOpts, unstake_actions []*big.Int, stake_actions []*big.Int, claim_actions []*big.Int, claim_deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "unstakeClaimRestakeMany", unstake_actions, stake_actions, claim_actions, claim_deposits)
}

// UnstakeClaimRestakeMany is a paid mutator transaction binding the contract method 0x57f8dad9.
//
// Solidity: function unstakeClaimRestakeMany(uint256[] unstake_actions, uint256[] stake_actions, uint256[] claim_actions, uint256[] claim_deposits) returns()
func (_StakingWalletCST *StakingWalletCSTSession) UnstakeClaimRestakeMany(unstake_actions []*big.Int, stake_actions []*big.Int, claim_actions []*big.Int, claim_deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.UnstakeClaimRestakeMany(&_StakingWalletCST.TransactOpts, unstake_actions, stake_actions, claim_actions, claim_deposits)
}

// UnstakeClaimRestakeMany is a paid mutator transaction binding the contract method 0x57f8dad9.
//
// Solidity: function unstakeClaimRestakeMany(uint256[] unstake_actions, uint256[] stake_actions, uint256[] claim_actions, uint256[] claim_deposits) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) UnstakeClaimRestakeMany(unstake_actions []*big.Int, stake_actions []*big.Int, claim_actions []*big.Int, claim_deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.UnstakeClaimRestakeMany(&_StakingWalletCST.TransactOpts, unstake_actions, stake_actions, claim_actions, claim_deposits)
}

// UnstakeMany is a paid mutator transaction binding the contract method 0x0d50c189.
//
// Solidity: function unstakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTTransactor) UnstakeMany(opts *bind.TransactOpts, ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.contract.Transact(opts, "unstakeMany", ids)
}

// UnstakeMany is a paid mutator transaction binding the contract method 0x0d50c189.
//
// Solidity: function unstakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTSession) UnstakeMany(ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.UnstakeMany(&_StakingWalletCST.TransactOpts, ids)
}

// UnstakeMany is a paid mutator transaction binding the contract method 0x0d50c189.
//
// Solidity: function unstakeMany(uint256[] ids) returns()
func (_StakingWalletCST *StakingWalletCSTTransactorSession) UnstakeMany(ids []*big.Int) (*types.Transaction, error) {
	return _StakingWalletCST.Contract.UnstakeMany(&_StakingWalletCST.TransactOpts, ids)
}

// StakingWalletCSTCharityDepositEventIterator is returned from FilterCharityDepositEvent and is used to iterate over the raw logs and unpacked data for CharityDepositEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTCharityDepositEventIterator struct {
	Event *StakingWalletCSTCharityDepositEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTCharityDepositEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTCharityDepositEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTCharityDepositEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTCharityDepositEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTCharityDepositEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTCharityDepositEvent represents a CharityDepositEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTCharityDepositEvent struct {
	Amount         *big.Int
	CharityAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCharityDepositEvent is a free log retrieval operation binding the contract event 0x70edffe0d8a2915bb852155db6f5f63024fb796983bbc1f5bab6ff8911fc1252.
//
// Solidity: event CharityDepositEvent(uint256 amount, address charityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterCharityDepositEvent(opts *bind.FilterOpts) (*StakingWalletCSTCharityDepositEventIterator, error) {

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "CharityDepositEvent")
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTCharityDepositEventIterator{contract: _StakingWalletCST.contract, event: "CharityDepositEvent", logs: logs, sub: sub}, nil
}

// WatchCharityDepositEvent is a free log subscription operation binding the contract event 0x70edffe0d8a2915bb852155db6f5f63024fb796983bbc1f5bab6ff8911fc1252.
//
// Solidity: event CharityDepositEvent(uint256 amount, address charityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchCharityDepositEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTCharityDepositEvent) (event.Subscription, error) {

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "CharityDepositEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTCharityDepositEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "CharityDepositEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCharityDepositEvent is a log parse operation binding the contract event 0x70edffe0d8a2915bb852155db6f5f63024fb796983bbc1f5bab6ff8911fc1252.
//
// Solidity: event CharityDepositEvent(uint256 amount, address charityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseCharityDepositEvent(log types.Log) (*StakingWalletCSTCharityDepositEvent, error) {
	event := new(StakingWalletCSTCharityDepositEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "CharityDepositEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTCharityUpdatedEventIterator is returned from FilterCharityUpdatedEvent and is used to iterate over the raw logs and unpacked data for CharityUpdatedEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTCharityUpdatedEventIterator struct {
	Event *StakingWalletCSTCharityUpdatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTCharityUpdatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTCharityUpdatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTCharityUpdatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTCharityUpdatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTCharityUpdatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTCharityUpdatedEvent represents a CharityUpdatedEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTCharityUpdatedEvent struct {
	NewCharityAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterCharityUpdatedEvent is a free log retrieval operation binding the contract event 0xa0bd6b2fdbf082ae2356710c23fc8d76d56d418cecb4514d119c77a8617b4ffe.
//
// Solidity: event CharityUpdatedEvent(address indexed newCharityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterCharityUpdatedEvent(opts *bind.FilterOpts, newCharityAddress []common.Address) (*StakingWalletCSTCharityUpdatedEventIterator, error) {

	var newCharityAddressRule []interface{}
	for _, newCharityAddressItem := range newCharityAddress {
		newCharityAddressRule = append(newCharityAddressRule, newCharityAddressItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "CharityUpdatedEvent", newCharityAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTCharityUpdatedEventIterator{contract: _StakingWalletCST.contract, event: "CharityUpdatedEvent", logs: logs, sub: sub}, nil
}

// WatchCharityUpdatedEvent is a free log subscription operation binding the contract event 0xa0bd6b2fdbf082ae2356710c23fc8d76d56d418cecb4514d119c77a8617b4ffe.
//
// Solidity: event CharityUpdatedEvent(address indexed newCharityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchCharityUpdatedEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTCharityUpdatedEvent, newCharityAddress []common.Address) (event.Subscription, error) {

	var newCharityAddressRule []interface{}
	for _, newCharityAddressItem := range newCharityAddress {
		newCharityAddressRule = append(newCharityAddressRule, newCharityAddressItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "CharityUpdatedEvent", newCharityAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTCharityUpdatedEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "CharityUpdatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCharityUpdatedEvent is a log parse operation binding the contract event 0xa0bd6b2fdbf082ae2356710c23fc8d76d56d418cecb4514d119c77a8617b4ffe.
//
// Solidity: event CharityUpdatedEvent(address indexed newCharityAddress)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseCharityUpdatedEvent(log types.Log) (*StakingWalletCSTCharityUpdatedEvent, error) {
	event := new(StakingWalletCSTCharityUpdatedEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "CharityUpdatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTClaimRewardEventIterator is returned from FilterClaimRewardEvent and is used to iterate over the raw logs and unpacked data for ClaimRewardEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTClaimRewardEventIterator struct {
	Event *StakingWalletCSTClaimRewardEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTClaimRewardEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTClaimRewardEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTClaimRewardEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTClaimRewardEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTClaimRewardEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTClaimRewardEvent represents a ClaimRewardEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTClaimRewardEvent struct {
	ActionId  *big.Int
	DepositId *big.Int
	Reward    *big.Int
	Staker    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaimRewardEvent is a free log retrieval operation binding the contract event 0xdde81df5caa033e783e2a39d93e3a8718a7dc27ba95a4757f5433a01f794ec36.
//
// Solidity: event ClaimRewardEvent(uint256 indexed actionId, uint256 indexed depositId, uint256 reward, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterClaimRewardEvent(opts *bind.FilterOpts, actionId []*big.Int, depositId []*big.Int, staker []common.Address) (*StakingWalletCSTClaimRewardEventIterator, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "ClaimRewardEvent", actionIdRule, depositIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTClaimRewardEventIterator{contract: _StakingWalletCST.contract, event: "ClaimRewardEvent", logs: logs, sub: sub}, nil
}

// WatchClaimRewardEvent is a free log subscription operation binding the contract event 0xdde81df5caa033e783e2a39d93e3a8718a7dc27ba95a4757f5433a01f794ec36.
//
// Solidity: event ClaimRewardEvent(uint256 indexed actionId, uint256 indexed depositId, uint256 reward, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchClaimRewardEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTClaimRewardEvent, actionId []*big.Int, depositId []*big.Int, staker []common.Address) (event.Subscription, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "ClaimRewardEvent", actionIdRule, depositIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTClaimRewardEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "ClaimRewardEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimRewardEvent is a log parse operation binding the contract event 0xdde81df5caa033e783e2a39d93e3a8718a7dc27ba95a4757f5433a01f794ec36.
//
// Solidity: event ClaimRewardEvent(uint256 indexed actionId, uint256 indexed depositId, uint256 reward, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseClaimRewardEvent(log types.Log) (*StakingWalletCSTClaimRewardEvent, error) {
	event := new(StakingWalletCSTClaimRewardEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "ClaimRewardEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTEthDepositEventIterator is returned from FilterEthDepositEvent and is used to iterate over the raw logs and unpacked data for EthDepositEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTEthDepositEventIterator struct {
	Event *StakingWalletCSTEthDepositEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTEthDepositEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTEthDepositEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTEthDepositEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTEthDepositEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTEthDepositEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTEthDepositEvent represents a EthDepositEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTEthDepositEvent struct {
	DepositTime   uint32
	DepositNum    *big.Int
	NumStakedNFTs *big.Int
	Amount        *big.Int
	Modulo        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterEthDepositEvent is a free log retrieval operation binding the contract event 0x54e2567a08c8670cf36776d2a76ba4481d6fd0d63f1f353b3d2301e2ed178c5b.
//
// Solidity: event EthDepositEvent(uint32 indexed depositTime, uint256 depositNum, uint256 numStakedNFTs, uint256 amount, uint256 modulo)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterEthDepositEvent(opts *bind.FilterOpts, depositTime []uint32) (*StakingWalletCSTEthDepositEventIterator, error) {

	var depositTimeRule []interface{}
	for _, depositTimeItem := range depositTime {
		depositTimeRule = append(depositTimeRule, depositTimeItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "EthDepositEvent", depositTimeRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTEthDepositEventIterator{contract: _StakingWalletCST.contract, event: "EthDepositEvent", logs: logs, sub: sub}, nil
}

// WatchEthDepositEvent is a free log subscription operation binding the contract event 0x54e2567a08c8670cf36776d2a76ba4481d6fd0d63f1f353b3d2301e2ed178c5b.
//
// Solidity: event EthDepositEvent(uint32 indexed depositTime, uint256 depositNum, uint256 numStakedNFTs, uint256 amount, uint256 modulo)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchEthDepositEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTEthDepositEvent, depositTime []uint32) (event.Subscription, error) {

	var depositTimeRule []interface{}
	for _, depositTimeItem := range depositTime {
		depositTimeRule = append(depositTimeRule, depositTimeItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "EthDepositEvent", depositTimeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTEthDepositEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "EthDepositEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEthDepositEvent is a log parse operation binding the contract event 0x54e2567a08c8670cf36776d2a76ba4481d6fd0d63f1f353b3d2301e2ed178c5b.
//
// Solidity: event EthDepositEvent(uint32 indexed depositTime, uint256 depositNum, uint256 numStakedNFTs, uint256 amount, uint256 modulo)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseEthDepositEvent(log types.Log) (*StakingWalletCSTEthDepositEvent, error) {
	event := new(StakingWalletCSTEthDepositEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "EthDepositEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTMinStakePeriodChangedIterator is returned from FilterMinStakePeriodChanged and is used to iterate over the raw logs and unpacked data for MinStakePeriodChanged events raised by the StakingWalletCST contract.
type StakingWalletCSTMinStakePeriodChangedIterator struct {
	Event *StakingWalletCSTMinStakePeriodChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTMinStakePeriodChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTMinStakePeriodChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTMinStakePeriodChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTMinStakePeriodChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTMinStakePeriodChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTMinStakePeriodChanged represents a MinStakePeriodChanged event raised by the StakingWalletCST contract.
type StakingWalletCSTMinStakePeriodChanged struct {
	NewPeriod *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMinStakePeriodChanged is a free log retrieval operation binding the contract event 0x3bc8e083bbd3346984c352a42f59129e9299433a69e464ed246798ba091831a5.
//
// Solidity: event MinStakePeriodChanged(uint256 newPeriod)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterMinStakePeriodChanged(opts *bind.FilterOpts) (*StakingWalletCSTMinStakePeriodChangedIterator, error) {

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "MinStakePeriodChanged")
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTMinStakePeriodChangedIterator{contract: _StakingWalletCST.contract, event: "MinStakePeriodChanged", logs: logs, sub: sub}, nil
}

// WatchMinStakePeriodChanged is a free log subscription operation binding the contract event 0x3bc8e083bbd3346984c352a42f59129e9299433a69e464ed246798ba091831a5.
//
// Solidity: event MinStakePeriodChanged(uint256 newPeriod)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchMinStakePeriodChanged(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTMinStakePeriodChanged) (event.Subscription, error) {

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "MinStakePeriodChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTMinStakePeriodChanged)
				if err := _StakingWalletCST.contract.UnpackLog(event, "MinStakePeriodChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinStakePeriodChanged is a log parse operation binding the contract event 0x3bc8e083bbd3346984c352a42f59129e9299433a69e464ed246798ba091831a5.
//
// Solidity: event MinStakePeriodChanged(uint256 newPeriod)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseMinStakePeriodChanged(log types.Log) (*StakingWalletCSTMinStakePeriodChanged, error) {
	event := new(StakingWalletCSTMinStakePeriodChanged)
	if err := _StakingWalletCST.contract.UnpackLog(event, "MinStakePeriodChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTModuloSentEventIterator is returned from FilterModuloSentEvent and is used to iterate over the raw logs and unpacked data for ModuloSentEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTModuloSentEventIterator struct {
	Event *StakingWalletCSTModuloSentEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTModuloSentEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTModuloSentEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTModuloSentEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTModuloSentEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTModuloSentEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTModuloSentEvent represents a ModuloSentEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTModuloSentEvent struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterModuloSentEvent is a free log retrieval operation binding the contract event 0x6905286e1ecb9b47a50224e76e31cf1383f75212bc0b06c8684317782566a0a7.
//
// Solidity: event ModuloSentEvent(uint256 amount)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterModuloSentEvent(opts *bind.FilterOpts) (*StakingWalletCSTModuloSentEventIterator, error) {

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "ModuloSentEvent")
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTModuloSentEventIterator{contract: _StakingWalletCST.contract, event: "ModuloSentEvent", logs: logs, sub: sub}, nil
}

// WatchModuloSentEvent is a free log subscription operation binding the contract event 0x6905286e1ecb9b47a50224e76e31cf1383f75212bc0b06c8684317782566a0a7.
//
// Solidity: event ModuloSentEvent(uint256 amount)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchModuloSentEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTModuloSentEvent) (event.Subscription, error) {

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "ModuloSentEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTModuloSentEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "ModuloSentEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseModuloSentEvent is a log parse operation binding the contract event 0x6905286e1ecb9b47a50224e76e31cf1383f75212bc0b06c8684317782566a0a7.
//
// Solidity: event ModuloSentEvent(uint256 amount)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseModuloSentEvent(log types.Log) (*StakingWalletCSTModuloSentEvent, error) {
	event := new(StakingWalletCSTModuloSentEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "ModuloSentEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the StakingWalletCST contract.
type StakingWalletCSTOwnershipTransferredIterator struct {
	Event *StakingWalletCSTOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTOwnershipTransferred represents a OwnershipTransferred event raised by the StakingWalletCST contract.
type StakingWalletCSTOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StakingWalletCSTOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTOwnershipTransferredIterator{contract: _StakingWalletCST.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTOwnershipTransferred)
				if err := _StakingWalletCST.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseOwnershipTransferred(log types.Log) (*StakingWalletCSTOwnershipTransferred, error) {
	event := new(StakingWalletCSTOwnershipTransferred)
	if err := _StakingWalletCST.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTStakeActionEventIterator is returned from FilterStakeActionEvent and is used to iterate over the raw logs and unpacked data for StakeActionEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTStakeActionEventIterator struct {
	Event *StakingWalletCSTStakeActionEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTStakeActionEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTStakeActionEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTStakeActionEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTStakeActionEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTStakeActionEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTStakeActionEvent represents a StakeActionEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTStakeActionEvent struct {
	ActionId    *big.Int
	TokenId     *big.Int
	TotalNFTs   *big.Int
	UnstakeTime *big.Int
	Staker      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStakeActionEvent is a free log retrieval operation binding the contract event 0x057eba8c4bba00f858e4f586f9c02794abb0df789ef316c741f9073fe2c435db.
//
// Solidity: event StakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, uint256 unstakeTime, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterStakeActionEvent(opts *bind.FilterOpts, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (*StakingWalletCSTStakeActionEventIterator, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "StakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTStakeActionEventIterator{contract: _StakingWalletCST.contract, event: "StakeActionEvent", logs: logs, sub: sub}, nil
}

// WatchStakeActionEvent is a free log subscription operation binding the contract event 0x057eba8c4bba00f858e4f586f9c02794abb0df789ef316c741f9073fe2c435db.
//
// Solidity: event StakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, uint256 unstakeTime, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchStakeActionEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTStakeActionEvent, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (event.Subscription, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "StakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTStakeActionEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "StakeActionEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeActionEvent is a log parse operation binding the contract event 0x057eba8c4bba00f858e4f586f9c02794abb0df789ef316c741f9073fe2c435db.
//
// Solidity: event StakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, uint256 unstakeTime, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseStakeActionEvent(log types.Log) (*StakingWalletCSTStakeActionEvent, error) {
	event := new(StakingWalletCSTStakeActionEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "StakeActionEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCSTUnstakeActionEventIterator is returned from FilterUnstakeActionEvent and is used to iterate over the raw logs and unpacked data for UnstakeActionEvent events raised by the StakingWalletCST contract.
type StakingWalletCSTUnstakeActionEventIterator struct {
	Event *StakingWalletCSTUnstakeActionEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCSTUnstakeActionEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCSTUnstakeActionEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCSTUnstakeActionEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCSTUnstakeActionEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCSTUnstakeActionEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCSTUnstakeActionEvent represents a UnstakeActionEvent event raised by the StakingWalletCST contract.
type StakingWalletCSTUnstakeActionEvent struct {
	ActionId  *big.Int
	TokenId   *big.Int
	TotalNFTs *big.Int
	Staker    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUnstakeActionEvent is a free log retrieval operation binding the contract event 0x33940a9fc3ee3c9150b29b34ef29ca397b5e1e340425a4f0da0346b5b90766c8.
//
// Solidity: event UnstakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) FilterUnstakeActionEvent(opts *bind.FilterOpts, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (*StakingWalletCSTUnstakeActionEventIterator, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.FilterLogs(opts, "UnstakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCSTUnstakeActionEventIterator{contract: _StakingWalletCST.contract, event: "UnstakeActionEvent", logs: logs, sub: sub}, nil
}

// WatchUnstakeActionEvent is a free log subscription operation binding the contract event 0x33940a9fc3ee3c9150b29b34ef29ca397b5e1e340425a4f0da0346b5b90766c8.
//
// Solidity: event UnstakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) WatchUnstakeActionEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCSTUnstakeActionEvent, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (event.Subscription, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWalletCST.contract.WatchLogs(opts, "UnstakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCSTUnstakeActionEvent)
				if err := _StakingWalletCST.contract.UnpackLog(event, "UnstakeActionEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstakeActionEvent is a log parse operation binding the contract event 0x33940a9fc3ee3c9150b29b34ef29ca397b5e1e340425a4f0da0346b5b90766c8.
//
// Solidity: event UnstakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWalletCST *StakingWalletCSTFilterer) ParseUnstakeActionEvent(log types.Log) (*StakingWalletCSTUnstakeActionEvent, error) {
	event := new(StakingWalletCSTUnstakeActionEvent)
	if err := _StakingWalletCST.contract.UnpackLog(event, "UnstakeActionEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
