// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StakingWalletMetaData contains all meta data concerning the StakingWallet contract.
var StakingWalletMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractCosmicSignature\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"contractCosmicGame\",\"name\":\"game_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charity_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"charityAddress\",\"type\":\"address\"}],\"name\":\"CharityDepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCharityAddress\",\"type\":\"address\"}],\"name\":\"CharityUpdatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"ClaimRewardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numStakedNFTs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"modulo\",\"type\":\"uint256\"}],\"name\":\"EthDepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"MinStakePeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ModuloSentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalNFTs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRandomWalkToken\",\"type\":\"bool\"}],\"name\":\"StakeActionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalNFTs\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"UnstakeActionEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ETHDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deposits\",\"type\":\"uint256[]\"}],\"name\":\"claimManyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeActionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHDepositId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"contractCosmicGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakePeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modulo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduloToCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contractCosmicSignature\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numETHDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStakeActions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStakedNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"numTokensByStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomWalk\",\"outputs\":[{\"internalType\":\"contractRandomWalkNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCharityAddress\",\"type\":\"address\"}],\"name\":\"setCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newStakePeriod\",\"type\":\"uint32\"}],\"name\":\"setMinStakePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRWalk\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeActions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakeTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unstakeTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unstakeEligibleTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isRandomWalk\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"areRandomWalk\",\"type\":\"bool[]\"}],\"name\":\"stakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stakerByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeActionId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeActionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRWalk\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ETHDepositId\",\"type\":\"uint256\"}],\"name\":\"unstakeClaimRestake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unstake_actions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stake_actions\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"areRandomWalk\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claim_actions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claim_deposits\",\"type\":\"uint256[]\"}],\"name\":\"unstakeClaimRestakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// StakingWalletABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingWalletMetaData.ABI instead.
var StakingWalletABI = StakingWalletMetaData.ABI

// StakingWalletBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingWalletMetaData.Bin instead.
var StakingWalletBin = StakingWalletMetaData.Bin

// DeployStakingWallet deploys a new Ethereum contract, binding an instance of StakingWallet to it.
func DeployStakingWallet(auth *bind.TransactOpts, backend bind.ContractBackend, nft_ common.Address, game_ common.Address, charity_ common.Address) (common.Address, *types.Transaction, *StakingWallet, error) {
	parsed, err := StakingWalletMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingWalletBin), backend, nft_, game_, charity_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingWallet{StakingWalletCaller: StakingWalletCaller{contract: contract}, StakingWalletTransactor: StakingWalletTransactor{contract: contract}, StakingWalletFilterer: StakingWalletFilterer{contract: contract}}, nil
}

// StakingWallet is an auto generated Go binding around an Ethereum contract.
type StakingWallet struct {
	StakingWalletCaller     // Read-only binding to the contract
	StakingWalletTransactor // Write-only binding to the contract
	StakingWalletFilterer   // Log filterer for contract events
}

// StakingWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingWalletSession struct {
	Contract     *StakingWallet    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingWalletCallerSession struct {
	Contract *StakingWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// StakingWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingWalletTransactorSession struct {
	Contract     *StakingWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StakingWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingWalletRaw struct {
	Contract *StakingWallet // Generic contract binding to access the raw methods on
}

// StakingWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingWalletCallerRaw struct {
	Contract *StakingWalletCaller // Generic read-only contract binding to access the raw methods on
}

// StakingWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingWalletTransactorRaw struct {
	Contract *StakingWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingWallet creates a new instance of StakingWallet, bound to a specific deployed contract.
func NewStakingWallet(address common.Address, backend bind.ContractBackend) (*StakingWallet, error) {
	contract, err := bindStakingWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingWallet{StakingWalletCaller: StakingWalletCaller{contract: contract}, StakingWalletTransactor: StakingWalletTransactor{contract: contract}, StakingWalletFilterer: StakingWalletFilterer{contract: contract}}, nil
}

// NewStakingWalletCaller creates a new read-only instance of StakingWallet, bound to a specific deployed contract.
func NewStakingWalletCaller(address common.Address, caller bind.ContractCaller) (*StakingWalletCaller, error) {
	contract, err := bindStakingWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCaller{contract: contract}, nil
}

// NewStakingWalletTransactor creates a new write-only instance of StakingWallet, bound to a specific deployed contract.
func NewStakingWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingWalletTransactor, error) {
	contract, err := bindStakingWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingWalletTransactor{contract: contract}, nil
}

// NewStakingWalletFilterer creates a new log filterer instance of StakingWallet, bound to a specific deployed contract.
func NewStakingWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingWalletFilterer, error) {
	contract, err := bindStakingWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingWalletFilterer{contract: contract}, nil
}

// bindStakingWallet binds a generic wrapper to an already deployed contract.
func bindStakingWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StakingWalletMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingWallet *StakingWalletRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingWallet.Contract.StakingWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingWallet *StakingWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWallet.Contract.StakingWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingWallet *StakingWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingWallet.Contract.StakingWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingWallet *StakingWalletCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingWallet *StakingWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingWallet *StakingWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingWallet.Contract.contract.Transact(opts, method, params...)
}

// ETHDeposits is a free data retrieval call binding the contract method 0x451f1adf.
//
// Solidity: function ETHDeposits(uint256 ) view returns(uint256 depositTime, uint256 depositAmount, uint256 numStaked)
func (_StakingWallet *StakingWalletCaller) ETHDeposits(opts *bind.CallOpts, arg0 *big.Int) (struct {
	DepositTime   *big.Int
	DepositAmount *big.Int
	NumStaked     *big.Int
}, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "ETHDeposits", arg0)

	outstruct := new(struct {
		DepositTime   *big.Int
		DepositAmount *big.Int
		NumStaked     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.DepositTime = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.DepositAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.NumStaked = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ETHDeposits is a free data retrieval call binding the contract method 0x451f1adf.
//
// Solidity: function ETHDeposits(uint256 ) view returns(uint256 depositTime, uint256 depositAmount, uint256 numStaked)
func (_StakingWallet *StakingWalletSession) ETHDeposits(arg0 *big.Int) (struct {
	DepositTime   *big.Int
	DepositAmount *big.Int
	NumStaked     *big.Int
}, error) {
	return _StakingWallet.Contract.ETHDeposits(&_StakingWallet.CallOpts, arg0)
}

// ETHDeposits is a free data retrieval call binding the contract method 0x451f1adf.
//
// Solidity: function ETHDeposits(uint256 ) view returns(uint256 depositTime, uint256 depositAmount, uint256 numStaked)
func (_StakingWallet *StakingWalletCallerSession) ETHDeposits(arg0 *big.Int) (struct {
	DepositTime   *big.Int
	DepositAmount *big.Int
	NumStaked     *big.Int
}, error) {
	return _StakingWallet.Contract.ETHDeposits(&_StakingWallet.CallOpts, arg0)
}

// Charity is a free data retrieval call binding the contract method 0x934aa023.
//
// Solidity: function charity() view returns(address)
func (_StakingWallet *StakingWalletCaller) Charity(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "charity")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Charity is a free data retrieval call binding the contract method 0x934aa023.
//
// Solidity: function charity() view returns(address)
func (_StakingWallet *StakingWalletSession) Charity() (common.Address, error) {
	return _StakingWallet.Contract.Charity(&_StakingWallet.CallOpts)
}

// Charity is a free data retrieval call binding the contract method 0x934aa023.
//
// Solidity: function charity() view returns(address)
func (_StakingWallet *StakingWalletCallerSession) Charity() (common.Address, error) {
	return _StakingWallet.Contract.Charity(&_StakingWallet.CallOpts)
}

// Game is a free data retrieval call binding the contract method 0xc3fe3e28.
//
// Solidity: function game() view returns(address)
func (_StakingWallet *StakingWalletCaller) Game(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "game")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Game is a free data retrieval call binding the contract method 0xc3fe3e28.
//
// Solidity: function game() view returns(address)
func (_StakingWallet *StakingWalletSession) Game() (common.Address, error) {
	return _StakingWallet.Contract.Game(&_StakingWallet.CallOpts)
}

// Game is a free data retrieval call binding the contract method 0xc3fe3e28.
//
// Solidity: function game() view returns(address)
func (_StakingWallet *StakingWalletCallerSession) Game() (common.Address, error) {
	return _StakingWallet.Contract.Game(&_StakingWallet.CallOpts)
}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address staker) view returns(bool)
func (_StakingWallet *StakingWalletCaller) IsStaker(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "isStaker", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address staker) view returns(bool)
func (_StakingWallet *StakingWalletSession) IsStaker(staker common.Address) (bool, error) {
	return _StakingWallet.Contract.IsStaker(&_StakingWallet.CallOpts, staker)
}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address staker) view returns(bool)
func (_StakingWallet *StakingWalletCallerSession) IsStaker(staker common.Address) (bool, error) {
	return _StakingWallet.Contract.IsStaker(&_StakingWallet.CallOpts, staker)
}

// MinStakePeriod is a free data retrieval call binding the contract method 0xd84f2bc6.
//
// Solidity: function minStakePeriod() view returns(uint32)
func (_StakingWallet *StakingWalletCaller) MinStakePeriod(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "minStakePeriod")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MinStakePeriod is a free data retrieval call binding the contract method 0xd84f2bc6.
//
// Solidity: function minStakePeriod() view returns(uint32)
func (_StakingWallet *StakingWalletSession) MinStakePeriod() (uint32, error) {
	return _StakingWallet.Contract.MinStakePeriod(&_StakingWallet.CallOpts)
}

// MinStakePeriod is a free data retrieval call binding the contract method 0xd84f2bc6.
//
// Solidity: function minStakePeriod() view returns(uint32)
func (_StakingWallet *StakingWalletCallerSession) MinStakePeriod() (uint32, error) {
	return _StakingWallet.Contract.MinStakePeriod(&_StakingWallet.CallOpts)
}

// Modulo is a free data retrieval call binding the contract method 0x29745262.
//
// Solidity: function modulo() view returns(uint256)
func (_StakingWallet *StakingWalletCaller) Modulo(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "modulo")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Modulo is a free data retrieval call binding the contract method 0x29745262.
//
// Solidity: function modulo() view returns(uint256)
func (_StakingWallet *StakingWalletSession) Modulo() (*big.Int, error) {
	return _StakingWallet.Contract.Modulo(&_StakingWallet.CallOpts)
}

// Modulo is a free data retrieval call binding the contract method 0x29745262.
//
// Solidity: function modulo() view returns(uint256)
func (_StakingWallet *StakingWalletCallerSession) Modulo() (*big.Int, error) {
	return _StakingWallet.Contract.Modulo(&_StakingWallet.CallOpts)
}

// Nft is a free data retrieval call binding the contract method 0x47ccca02.
//
// Solidity: function nft() view returns(address)
func (_StakingWallet *StakingWalletCaller) Nft(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "nft")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Nft is a free data retrieval call binding the contract method 0x47ccca02.
//
// Solidity: function nft() view returns(address)
func (_StakingWallet *StakingWalletSession) Nft() (common.Address, error) {
	return _StakingWallet.Contract.Nft(&_StakingWallet.CallOpts)
}

// Nft is a free data retrieval call binding the contract method 0x47ccca02.
//
// Solidity: function nft() view returns(address)
func (_StakingWallet *StakingWalletCallerSession) Nft() (common.Address, error) {
	return _StakingWallet.Contract.Nft(&_StakingWallet.CallOpts)
}

// NumETHDeposits is a free data retrieval call binding the contract method 0x55279fdb.
//
// Solidity: function numETHDeposits() view returns(uint256)
func (_StakingWallet *StakingWalletCaller) NumETHDeposits(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "numETHDeposits")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumETHDeposits is a free data retrieval call binding the contract method 0x55279fdb.
//
// Solidity: function numETHDeposits() view returns(uint256)
func (_StakingWallet *StakingWalletSession) NumETHDeposits() (*big.Int, error) {
	return _StakingWallet.Contract.NumETHDeposits(&_StakingWallet.CallOpts)
}

// NumETHDeposits is a free data retrieval call binding the contract method 0x55279fdb.
//
// Solidity: function numETHDeposits() view returns(uint256)
func (_StakingWallet *StakingWalletCallerSession) NumETHDeposits() (*big.Int, error) {
	return _StakingWallet.Contract.NumETHDeposits(&_StakingWallet.CallOpts)
}

// NumStakeActions is a free data retrieval call binding the contract method 0xa531aa86.
//
// Solidity: function numStakeActions() view returns(uint256)
func (_StakingWallet *StakingWalletCaller) NumStakeActions(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "numStakeActions")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStakeActions is a free data retrieval call binding the contract method 0xa531aa86.
//
// Solidity: function numStakeActions() view returns(uint256)
func (_StakingWallet *StakingWalletSession) NumStakeActions() (*big.Int, error) {
	return _StakingWallet.Contract.NumStakeActions(&_StakingWallet.CallOpts)
}

// NumStakeActions is a free data retrieval call binding the contract method 0xa531aa86.
//
// Solidity: function numStakeActions() view returns(uint256)
func (_StakingWallet *StakingWalletCallerSession) NumStakeActions() (*big.Int, error) {
	return _StakingWallet.Contract.NumStakeActions(&_StakingWallet.CallOpts)
}

// NumStakedNFTs is a free data retrieval call binding the contract method 0x17db6213.
//
// Solidity: function numStakedNFTs() view returns(uint256)
func (_StakingWallet *StakingWalletCaller) NumStakedNFTs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "numStakedNFTs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStakedNFTs is a free data retrieval call binding the contract method 0x17db6213.
//
// Solidity: function numStakedNFTs() view returns(uint256)
func (_StakingWallet *StakingWalletSession) NumStakedNFTs() (*big.Int, error) {
	return _StakingWallet.Contract.NumStakedNFTs(&_StakingWallet.CallOpts)
}

// NumStakedNFTs is a free data retrieval call binding the contract method 0x17db6213.
//
// Solidity: function numStakedNFTs() view returns(uint256)
func (_StakingWallet *StakingWalletCallerSession) NumStakedNFTs() (*big.Int, error) {
	return _StakingWallet.Contract.NumStakedNFTs(&_StakingWallet.CallOpts)
}

// NumStakers is a free data retrieval call binding the contract method 0x6c8b052a.
//
// Solidity: function numStakers() view returns(uint256)
func (_StakingWallet *StakingWalletCaller) NumStakers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "numStakers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStakers is a free data retrieval call binding the contract method 0x6c8b052a.
//
// Solidity: function numStakers() view returns(uint256)
func (_StakingWallet *StakingWalletSession) NumStakers() (*big.Int, error) {
	return _StakingWallet.Contract.NumStakers(&_StakingWallet.CallOpts)
}

// NumStakers is a free data retrieval call binding the contract method 0x6c8b052a.
//
// Solidity: function numStakers() view returns(uint256)
func (_StakingWallet *StakingWalletCallerSession) NumStakers() (*big.Int, error) {
	return _StakingWallet.Contract.NumStakers(&_StakingWallet.CallOpts)
}

// NumTokensByStaker is a free data retrieval call binding the contract method 0x5990d88a.
//
// Solidity: function numTokensByStaker(address staker) view returns(uint256)
func (_StakingWallet *StakingWalletCaller) NumTokensByStaker(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "numTokensByStaker", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumTokensByStaker is a free data retrieval call binding the contract method 0x5990d88a.
//
// Solidity: function numTokensByStaker(address staker) view returns(uint256)
func (_StakingWallet *StakingWalletSession) NumTokensByStaker(staker common.Address) (*big.Int, error) {
	return _StakingWallet.Contract.NumTokensByStaker(&_StakingWallet.CallOpts, staker)
}

// NumTokensByStaker is a free data retrieval call binding the contract method 0x5990d88a.
//
// Solidity: function numTokensByStaker(address staker) view returns(uint256)
func (_StakingWallet *StakingWalletCallerSession) NumTokensByStaker(staker common.Address) (*big.Int, error) {
	return _StakingWallet.Contract.NumTokensByStaker(&_StakingWallet.CallOpts, staker)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakingWallet *StakingWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakingWallet *StakingWalletSession) Owner() (common.Address, error) {
	return _StakingWallet.Contract.Owner(&_StakingWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakingWallet *StakingWalletCallerSession) Owner() (common.Address, error) {
	return _StakingWallet.Contract.Owner(&_StakingWallet.CallOpts)
}

// RandomWalk is a free data retrieval call binding the contract method 0x5111a2d6.
//
// Solidity: function randomWalk() view returns(address)
func (_StakingWallet *StakingWalletCaller) RandomWalk(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "randomWalk")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RandomWalk is a free data retrieval call binding the contract method 0x5111a2d6.
//
// Solidity: function randomWalk() view returns(address)
func (_StakingWallet *StakingWalletSession) RandomWalk() (common.Address, error) {
	return _StakingWallet.Contract.RandomWalk(&_StakingWallet.CallOpts)
}

// RandomWalk is a free data retrieval call binding the contract method 0x5111a2d6.
//
// Solidity: function randomWalk() view returns(address)
func (_StakingWallet *StakingWalletCallerSession) RandomWalk() (common.Address, error) {
	return _StakingWallet.Contract.RandomWalk(&_StakingWallet.CallOpts)
}

// StakeActions is a free data retrieval call binding the contract method 0xa2b136fb.
//
// Solidity: function stakeActions(uint256 ) view returns(uint256 tokenId, address owner, uint32 stakeTime, uint32 unstakeTime, uint32 unstakeEligibleTime, bool isRandomWalk)
func (_StakingWallet *StakingWalletCaller) StakeActions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	TokenId             *big.Int
	Owner               common.Address
	StakeTime           uint32
	UnstakeTime         uint32
	UnstakeEligibleTime uint32
	IsRandomWalk        bool
}, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "stakeActions", arg0)

	outstruct := new(struct {
		TokenId             *big.Int
		Owner               common.Address
		StakeTime           uint32
		UnstakeTime         uint32
		UnstakeEligibleTime uint32
		IsRandomWalk        bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TokenId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.StakeTime = *abi.ConvertType(out[2], new(uint32)).(*uint32)
	outstruct.UnstakeTime = *abi.ConvertType(out[3], new(uint32)).(*uint32)
	outstruct.UnstakeEligibleTime = *abi.ConvertType(out[4], new(uint32)).(*uint32)
	outstruct.IsRandomWalk = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// StakeActions is a free data retrieval call binding the contract method 0xa2b136fb.
//
// Solidity: function stakeActions(uint256 ) view returns(uint256 tokenId, address owner, uint32 stakeTime, uint32 unstakeTime, uint32 unstakeEligibleTime, bool isRandomWalk)
func (_StakingWallet *StakingWalletSession) StakeActions(arg0 *big.Int) (struct {
	TokenId             *big.Int
	Owner               common.Address
	StakeTime           uint32
	UnstakeTime         uint32
	UnstakeEligibleTime uint32
	IsRandomWalk        bool
}, error) {
	return _StakingWallet.Contract.StakeActions(&_StakingWallet.CallOpts, arg0)
}

// StakeActions is a free data retrieval call binding the contract method 0xa2b136fb.
//
// Solidity: function stakeActions(uint256 ) view returns(uint256 tokenId, address owner, uint32 stakeTime, uint32 unstakeTime, uint32 unstakeEligibleTime, bool isRandomWalk)
func (_StakingWallet *StakingWalletCallerSession) StakeActions(arg0 *big.Int) (struct {
	TokenId             *big.Int
	Owner               common.Address
	StakeTime           uint32
	UnstakeTime         uint32
	UnstakeEligibleTime uint32
	IsRandomWalk        bool
}, error) {
	return _StakingWallet.Contract.StakeActions(&_StakingWallet.CallOpts, arg0)
}

// StakerByIndex is a free data retrieval call binding the contract method 0x2c2933ad.
//
// Solidity: function stakerByIndex(uint256 index) view returns(address)
func (_StakingWallet *StakingWalletCaller) StakerByIndex(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "stakerByIndex", index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakerByIndex is a free data retrieval call binding the contract method 0x2c2933ad.
//
// Solidity: function stakerByIndex(uint256 index) view returns(address)
func (_StakingWallet *StakingWalletSession) StakerByIndex(index *big.Int) (common.Address, error) {
	return _StakingWallet.Contract.StakerByIndex(&_StakingWallet.CallOpts, index)
}

// StakerByIndex is a free data retrieval call binding the contract method 0x2c2933ad.
//
// Solidity: function stakerByIndex(uint256 index) view returns(address)
func (_StakingWallet *StakingWalletCallerSession) StakerByIndex(index *big.Int) (common.Address, error) {
	return _StakingWallet.Contract.StakerByIndex(&_StakingWallet.CallOpts, index)
}

// UniqueStakers is a free data retrieval call binding the contract method 0x89892e04.
//
// Solidity: function uniqueStakers(uint256 ) view returns(address)
func (_StakingWallet *StakingWalletCaller) UniqueStakers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakingWallet.contract.Call(opts, &out, "uniqueStakers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UniqueStakers is a free data retrieval call binding the contract method 0x89892e04.
//
// Solidity: function uniqueStakers(uint256 ) view returns(address)
func (_StakingWallet *StakingWalletSession) UniqueStakers(arg0 *big.Int) (common.Address, error) {
	return _StakingWallet.Contract.UniqueStakers(&_StakingWallet.CallOpts, arg0)
}

// UniqueStakers is a free data retrieval call binding the contract method 0x89892e04.
//
// Solidity: function uniqueStakers(uint256 ) view returns(address)
func (_StakingWallet *StakingWalletCallerSession) UniqueStakers(arg0 *big.Int) (common.Address, error) {
	return _StakingWallet.Contract.UniqueStakers(&_StakingWallet.CallOpts, arg0)
}

// ClaimManyRewards is a paid mutator transaction binding the contract method 0x6034eb5b.
//
// Solidity: function claimManyRewards(uint256[] actions, uint256[] deposits) returns()
func (_StakingWallet *StakingWalletTransactor) ClaimManyRewards(opts *bind.TransactOpts, actions []*big.Int, deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "claimManyRewards", actions, deposits)
}

// ClaimManyRewards is a paid mutator transaction binding the contract method 0x6034eb5b.
//
// Solidity: function claimManyRewards(uint256[] actions, uint256[] deposits) returns()
func (_StakingWallet *StakingWalletSession) ClaimManyRewards(actions []*big.Int, deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.ClaimManyRewards(&_StakingWallet.TransactOpts, actions, deposits)
}

// ClaimManyRewards is a paid mutator transaction binding the contract method 0x6034eb5b.
//
// Solidity: function claimManyRewards(uint256[] actions, uint256[] deposits) returns()
func (_StakingWallet *StakingWalletTransactorSession) ClaimManyRewards(actions []*big.Int, deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.ClaimManyRewards(&_StakingWallet.TransactOpts, actions, deposits)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWallet *StakingWalletTransactor) ClaimReward(opts *bind.TransactOpts, stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "claimReward", stakeActionId, ETHDepositId)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWallet *StakingWalletSession) ClaimReward(stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.ClaimReward(&_StakingWallet.TransactOpts, stakeActionId, ETHDepositId)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x86bb8f37.
//
// Solidity: function claimReward(uint256 stakeActionId, uint256 ETHDepositId) returns()
func (_StakingWallet *StakingWalletTransactorSession) ClaimReward(stakeActionId *big.Int, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.ClaimReward(&_StakingWallet.TransactOpts, stakeActionId, ETHDepositId)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakingWallet *StakingWalletTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakingWallet *StakingWalletSession) Deposit() (*types.Transaction, error) {
	return _StakingWallet.Contract.Deposit(&_StakingWallet.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakingWallet *StakingWalletTransactorSession) Deposit() (*types.Transaction, error) {
	return _StakingWallet.Contract.Deposit(&_StakingWallet.TransactOpts)
}

// ModuloToCharity is a paid mutator transaction binding the contract method 0xdb636898.
//
// Solidity: function moduloToCharity() returns()
func (_StakingWallet *StakingWalletTransactor) ModuloToCharity(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "moduloToCharity")
}

// ModuloToCharity is a paid mutator transaction binding the contract method 0xdb636898.
//
// Solidity: function moduloToCharity() returns()
func (_StakingWallet *StakingWalletSession) ModuloToCharity() (*types.Transaction, error) {
	return _StakingWallet.Contract.ModuloToCharity(&_StakingWallet.TransactOpts)
}

// ModuloToCharity is a paid mutator transaction binding the contract method 0xdb636898.
//
// Solidity: function moduloToCharity() returns()
func (_StakingWallet *StakingWalletTransactorSession) ModuloToCharity() (*types.Transaction, error) {
	return _StakingWallet.Contract.ModuloToCharity(&_StakingWallet.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingWallet *StakingWalletTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingWallet *StakingWalletSession) RenounceOwnership() (*types.Transaction, error) {
	return _StakingWallet.Contract.RenounceOwnership(&_StakingWallet.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingWallet *StakingWalletTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _StakingWallet.Contract.RenounceOwnership(&_StakingWallet.TransactOpts)
}

// SetCharity is a paid mutator transaction binding the contract method 0xfb6f71a3.
//
// Solidity: function setCharity(address newCharityAddress) returns()
func (_StakingWallet *StakingWalletTransactor) SetCharity(opts *bind.TransactOpts, newCharityAddress common.Address) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "setCharity", newCharityAddress)
}

// SetCharity is a paid mutator transaction binding the contract method 0xfb6f71a3.
//
// Solidity: function setCharity(address newCharityAddress) returns()
func (_StakingWallet *StakingWalletSession) SetCharity(newCharityAddress common.Address) (*types.Transaction, error) {
	return _StakingWallet.Contract.SetCharity(&_StakingWallet.TransactOpts, newCharityAddress)
}

// SetCharity is a paid mutator transaction binding the contract method 0xfb6f71a3.
//
// Solidity: function setCharity(address newCharityAddress) returns()
func (_StakingWallet *StakingWalletTransactorSession) SetCharity(newCharityAddress common.Address) (*types.Transaction, error) {
	return _StakingWallet.Contract.SetCharity(&_StakingWallet.TransactOpts, newCharityAddress)
}

// SetMinStakePeriod is a paid mutator transaction binding the contract method 0x25646e1f.
//
// Solidity: function setMinStakePeriod(uint32 newStakePeriod) returns()
func (_StakingWallet *StakingWalletTransactor) SetMinStakePeriod(opts *bind.TransactOpts, newStakePeriod uint32) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "setMinStakePeriod", newStakePeriod)
}

// SetMinStakePeriod is a paid mutator transaction binding the contract method 0x25646e1f.
//
// Solidity: function setMinStakePeriod(uint32 newStakePeriod) returns()
func (_StakingWallet *StakingWalletSession) SetMinStakePeriod(newStakePeriod uint32) (*types.Transaction, error) {
	return _StakingWallet.Contract.SetMinStakePeriod(&_StakingWallet.TransactOpts, newStakePeriod)
}

// SetMinStakePeriod is a paid mutator transaction binding the contract method 0x25646e1f.
//
// Solidity: function setMinStakePeriod(uint32 newStakePeriod) returns()
func (_StakingWallet *StakingWalletTransactorSession) SetMinStakePeriod(newStakePeriod uint32) (*types.Transaction, error) {
	return _StakingWallet.Contract.SetMinStakePeriod(&_StakingWallet.TransactOpts, newStakePeriod)
}

// Stake is a paid mutator transaction binding the contract method 0xabe50f19.
//
// Solidity: function stake(uint256 _tokenId, bool isRWalk) returns()
func (_StakingWallet *StakingWalletTransactor) Stake(opts *bind.TransactOpts, _tokenId *big.Int, isRWalk bool) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "stake", _tokenId, isRWalk)
}

// Stake is a paid mutator transaction binding the contract method 0xabe50f19.
//
// Solidity: function stake(uint256 _tokenId, bool isRWalk) returns()
func (_StakingWallet *StakingWalletSession) Stake(_tokenId *big.Int, isRWalk bool) (*types.Transaction, error) {
	return _StakingWallet.Contract.Stake(&_StakingWallet.TransactOpts, _tokenId, isRWalk)
}

// Stake is a paid mutator transaction binding the contract method 0xabe50f19.
//
// Solidity: function stake(uint256 _tokenId, bool isRWalk) returns()
func (_StakingWallet *StakingWalletTransactorSession) Stake(_tokenId *big.Int, isRWalk bool) (*types.Transaction, error) {
	return _StakingWallet.Contract.Stake(&_StakingWallet.TransactOpts, _tokenId, isRWalk)
}

// StakeMany is a paid mutator transaction binding the contract method 0xd7947f02.
//
// Solidity: function stakeMany(uint256[] ids, bool[] areRandomWalk) returns()
func (_StakingWallet *StakingWalletTransactor) StakeMany(opts *bind.TransactOpts, ids []*big.Int, areRandomWalk []bool) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "stakeMany", ids, areRandomWalk)
}

// StakeMany is a paid mutator transaction binding the contract method 0xd7947f02.
//
// Solidity: function stakeMany(uint256[] ids, bool[] areRandomWalk) returns()
func (_StakingWallet *StakingWalletSession) StakeMany(ids []*big.Int, areRandomWalk []bool) (*types.Transaction, error) {
	return _StakingWallet.Contract.StakeMany(&_StakingWallet.TransactOpts, ids, areRandomWalk)
}

// StakeMany is a paid mutator transaction binding the contract method 0xd7947f02.
//
// Solidity: function stakeMany(uint256[] ids, bool[] areRandomWalk) returns()
func (_StakingWallet *StakingWalletTransactorSession) StakeMany(ids []*big.Int, areRandomWalk []bool) (*types.Transaction, error) {
	return _StakingWallet.Contract.StakeMany(&_StakingWallet.TransactOpts, ids, areRandomWalk)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingWallet *StakingWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingWallet *StakingWalletSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StakingWallet.Contract.TransferOwnership(&_StakingWallet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingWallet *StakingWalletTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StakingWallet.Contract.TransferOwnership(&_StakingWallet.TransactOpts, newOwner)
}

// Unstake is a paid mutator transaction binding the contract method 0x2e17de78.
//
// Solidity: function unstake(uint256 stakeActionId) returns()
func (_StakingWallet *StakingWalletTransactor) Unstake(opts *bind.TransactOpts, stakeActionId *big.Int) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "unstake", stakeActionId)
}

// Unstake is a paid mutator transaction binding the contract method 0x2e17de78.
//
// Solidity: function unstake(uint256 stakeActionId) returns()
func (_StakingWallet *StakingWalletSession) Unstake(stakeActionId *big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.Unstake(&_StakingWallet.TransactOpts, stakeActionId)
}

// Unstake is a paid mutator transaction binding the contract method 0x2e17de78.
//
// Solidity: function unstake(uint256 stakeActionId) returns()
func (_StakingWallet *StakingWalletTransactorSession) Unstake(stakeActionId *big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.Unstake(&_StakingWallet.TransactOpts, stakeActionId)
}

// UnstakeClaimRestake is a paid mutator transaction binding the contract method 0x4e621345.
//
// Solidity: function unstakeClaimRestake(uint256 stakeActionId, bool isRWalk, uint256 ETHDepositId) returns()
func (_StakingWallet *StakingWalletTransactor) UnstakeClaimRestake(opts *bind.TransactOpts, stakeActionId *big.Int, isRWalk bool, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "unstakeClaimRestake", stakeActionId, isRWalk, ETHDepositId)
}

// UnstakeClaimRestake is a paid mutator transaction binding the contract method 0x4e621345.
//
// Solidity: function unstakeClaimRestake(uint256 stakeActionId, bool isRWalk, uint256 ETHDepositId) returns()
func (_StakingWallet *StakingWalletSession) UnstakeClaimRestake(stakeActionId *big.Int, isRWalk bool, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.UnstakeClaimRestake(&_StakingWallet.TransactOpts, stakeActionId, isRWalk, ETHDepositId)
}

// UnstakeClaimRestake is a paid mutator transaction binding the contract method 0x4e621345.
//
// Solidity: function unstakeClaimRestake(uint256 stakeActionId, bool isRWalk, uint256 ETHDepositId) returns()
func (_StakingWallet *StakingWalletTransactorSession) UnstakeClaimRestake(stakeActionId *big.Int, isRWalk bool, ETHDepositId *big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.UnstakeClaimRestake(&_StakingWallet.TransactOpts, stakeActionId, isRWalk, ETHDepositId)
}

// UnstakeClaimRestakeMany is a paid mutator transaction binding the contract method 0x118e8b85.
//
// Solidity: function unstakeClaimRestakeMany(uint256[] unstake_actions, uint256[] stake_actions, bool[] areRandomWalk, uint256[] claim_actions, uint256[] claim_deposits) returns()
func (_StakingWallet *StakingWalletTransactor) UnstakeClaimRestakeMany(opts *bind.TransactOpts, unstake_actions []*big.Int, stake_actions []*big.Int, areRandomWalk []bool, claim_actions []*big.Int, claim_deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "unstakeClaimRestakeMany", unstake_actions, stake_actions, areRandomWalk, claim_actions, claim_deposits)
}

// UnstakeClaimRestakeMany is a paid mutator transaction binding the contract method 0x118e8b85.
//
// Solidity: function unstakeClaimRestakeMany(uint256[] unstake_actions, uint256[] stake_actions, bool[] areRandomWalk, uint256[] claim_actions, uint256[] claim_deposits) returns()
func (_StakingWallet *StakingWalletSession) UnstakeClaimRestakeMany(unstake_actions []*big.Int, stake_actions []*big.Int, areRandomWalk []bool, claim_actions []*big.Int, claim_deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.UnstakeClaimRestakeMany(&_StakingWallet.TransactOpts, unstake_actions, stake_actions, areRandomWalk, claim_actions, claim_deposits)
}

// UnstakeClaimRestakeMany is a paid mutator transaction binding the contract method 0x118e8b85.
//
// Solidity: function unstakeClaimRestakeMany(uint256[] unstake_actions, uint256[] stake_actions, bool[] areRandomWalk, uint256[] claim_actions, uint256[] claim_deposits) returns()
func (_StakingWallet *StakingWalletTransactorSession) UnstakeClaimRestakeMany(unstake_actions []*big.Int, stake_actions []*big.Int, areRandomWalk []bool, claim_actions []*big.Int, claim_deposits []*big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.UnstakeClaimRestakeMany(&_StakingWallet.TransactOpts, unstake_actions, stake_actions, areRandomWalk, claim_actions, claim_deposits)
}

// UnstakeMany is a paid mutator transaction binding the contract method 0x0d50c189.
//
// Solidity: function unstakeMany(uint256[] ids) returns()
func (_StakingWallet *StakingWalletTransactor) UnstakeMany(opts *bind.TransactOpts, ids []*big.Int) (*types.Transaction, error) {
	return _StakingWallet.contract.Transact(opts, "unstakeMany", ids)
}

// UnstakeMany is a paid mutator transaction binding the contract method 0x0d50c189.
//
// Solidity: function unstakeMany(uint256[] ids) returns()
func (_StakingWallet *StakingWalletSession) UnstakeMany(ids []*big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.UnstakeMany(&_StakingWallet.TransactOpts, ids)
}

// UnstakeMany is a paid mutator transaction binding the contract method 0x0d50c189.
//
// Solidity: function unstakeMany(uint256[] ids) returns()
func (_StakingWallet *StakingWalletTransactorSession) UnstakeMany(ids []*big.Int) (*types.Transaction, error) {
	return _StakingWallet.Contract.UnstakeMany(&_StakingWallet.TransactOpts, ids)
}

// StakingWalletCharityDepositEventIterator is returned from FilterCharityDepositEvent and is used to iterate over the raw logs and unpacked data for CharityDepositEvent events raised by the StakingWallet contract.
type StakingWalletCharityDepositEventIterator struct {
	Event *StakingWalletCharityDepositEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCharityDepositEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCharityDepositEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCharityDepositEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCharityDepositEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCharityDepositEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCharityDepositEvent represents a CharityDepositEvent event raised by the StakingWallet contract.
type StakingWalletCharityDepositEvent struct {
	Amount         *big.Int
	CharityAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCharityDepositEvent is a free log retrieval operation binding the contract event 0x70edffe0d8a2915bb852155db6f5f63024fb796983bbc1f5bab6ff8911fc1252.
//
// Solidity: event CharityDepositEvent(uint256 amount, address charityAddress)
func (_StakingWallet *StakingWalletFilterer) FilterCharityDepositEvent(opts *bind.FilterOpts) (*StakingWalletCharityDepositEventIterator, error) {

	logs, sub, err := _StakingWallet.contract.FilterLogs(opts, "CharityDepositEvent")
	if err != nil {
		return nil, err
	}
	return &StakingWalletCharityDepositEventIterator{contract: _StakingWallet.contract, event: "CharityDepositEvent", logs: logs, sub: sub}, nil
}

// WatchCharityDepositEvent is a free log subscription operation binding the contract event 0x70edffe0d8a2915bb852155db6f5f63024fb796983bbc1f5bab6ff8911fc1252.
//
// Solidity: event CharityDepositEvent(uint256 amount, address charityAddress)
func (_StakingWallet *StakingWalletFilterer) WatchCharityDepositEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCharityDepositEvent) (event.Subscription, error) {

	logs, sub, err := _StakingWallet.contract.WatchLogs(opts, "CharityDepositEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCharityDepositEvent)
				if err := _StakingWallet.contract.UnpackLog(event, "CharityDepositEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCharityDepositEvent is a log parse operation binding the contract event 0x70edffe0d8a2915bb852155db6f5f63024fb796983bbc1f5bab6ff8911fc1252.
//
// Solidity: event CharityDepositEvent(uint256 amount, address charityAddress)
func (_StakingWallet *StakingWalletFilterer) ParseCharityDepositEvent(log types.Log) (*StakingWalletCharityDepositEvent, error) {
	event := new(StakingWalletCharityDepositEvent)
	if err := _StakingWallet.contract.UnpackLog(event, "CharityDepositEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletCharityUpdatedEventIterator is returned from FilterCharityUpdatedEvent and is used to iterate over the raw logs and unpacked data for CharityUpdatedEvent events raised by the StakingWallet contract.
type StakingWalletCharityUpdatedEventIterator struct {
	Event *StakingWalletCharityUpdatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletCharityUpdatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletCharityUpdatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletCharityUpdatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletCharityUpdatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletCharityUpdatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletCharityUpdatedEvent represents a CharityUpdatedEvent event raised by the StakingWallet contract.
type StakingWalletCharityUpdatedEvent struct {
	NewCharityAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterCharityUpdatedEvent is a free log retrieval operation binding the contract event 0xa0bd6b2fdbf082ae2356710c23fc8d76d56d418cecb4514d119c77a8617b4ffe.
//
// Solidity: event CharityUpdatedEvent(address indexed newCharityAddress)
func (_StakingWallet *StakingWalletFilterer) FilterCharityUpdatedEvent(opts *bind.FilterOpts, newCharityAddress []common.Address) (*StakingWalletCharityUpdatedEventIterator, error) {

	var newCharityAddressRule []interface{}
	for _, newCharityAddressItem := range newCharityAddress {
		newCharityAddressRule = append(newCharityAddressRule, newCharityAddressItem)
	}

	logs, sub, err := _StakingWallet.contract.FilterLogs(opts, "CharityUpdatedEvent", newCharityAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletCharityUpdatedEventIterator{contract: _StakingWallet.contract, event: "CharityUpdatedEvent", logs: logs, sub: sub}, nil
}

// WatchCharityUpdatedEvent is a free log subscription operation binding the contract event 0xa0bd6b2fdbf082ae2356710c23fc8d76d56d418cecb4514d119c77a8617b4ffe.
//
// Solidity: event CharityUpdatedEvent(address indexed newCharityAddress)
func (_StakingWallet *StakingWalletFilterer) WatchCharityUpdatedEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletCharityUpdatedEvent, newCharityAddress []common.Address) (event.Subscription, error) {

	var newCharityAddressRule []interface{}
	for _, newCharityAddressItem := range newCharityAddress {
		newCharityAddressRule = append(newCharityAddressRule, newCharityAddressItem)
	}

	logs, sub, err := _StakingWallet.contract.WatchLogs(opts, "CharityUpdatedEvent", newCharityAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletCharityUpdatedEvent)
				if err := _StakingWallet.contract.UnpackLog(event, "CharityUpdatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCharityUpdatedEvent is a log parse operation binding the contract event 0xa0bd6b2fdbf082ae2356710c23fc8d76d56d418cecb4514d119c77a8617b4ffe.
//
// Solidity: event CharityUpdatedEvent(address indexed newCharityAddress)
func (_StakingWallet *StakingWalletFilterer) ParseCharityUpdatedEvent(log types.Log) (*StakingWalletCharityUpdatedEvent, error) {
	event := new(StakingWalletCharityUpdatedEvent)
	if err := _StakingWallet.contract.UnpackLog(event, "CharityUpdatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletClaimRewardEventIterator is returned from FilterClaimRewardEvent and is used to iterate over the raw logs and unpacked data for ClaimRewardEvent events raised by the StakingWallet contract.
type StakingWalletClaimRewardEventIterator struct {
	Event *StakingWalletClaimRewardEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletClaimRewardEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletClaimRewardEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletClaimRewardEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletClaimRewardEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletClaimRewardEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletClaimRewardEvent represents a ClaimRewardEvent event raised by the StakingWallet contract.
type StakingWalletClaimRewardEvent struct {
	ActionId  *big.Int
	DepositId *big.Int
	Reward    *big.Int
	Staker    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaimRewardEvent is a free log retrieval operation binding the contract event 0xdde81df5caa033e783e2a39d93e3a8718a7dc27ba95a4757f5433a01f794ec36.
//
// Solidity: event ClaimRewardEvent(uint256 indexed actionId, uint256 indexed depositId, uint256 reward, address indexed staker)
func (_StakingWallet *StakingWalletFilterer) FilterClaimRewardEvent(opts *bind.FilterOpts, actionId []*big.Int, depositId []*big.Int, staker []common.Address) (*StakingWalletClaimRewardEventIterator, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWallet.contract.FilterLogs(opts, "ClaimRewardEvent", actionIdRule, depositIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletClaimRewardEventIterator{contract: _StakingWallet.contract, event: "ClaimRewardEvent", logs: logs, sub: sub}, nil
}

// WatchClaimRewardEvent is a free log subscription operation binding the contract event 0xdde81df5caa033e783e2a39d93e3a8718a7dc27ba95a4757f5433a01f794ec36.
//
// Solidity: event ClaimRewardEvent(uint256 indexed actionId, uint256 indexed depositId, uint256 reward, address indexed staker)
func (_StakingWallet *StakingWalletFilterer) WatchClaimRewardEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletClaimRewardEvent, actionId []*big.Int, depositId []*big.Int, staker []common.Address) (event.Subscription, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWallet.contract.WatchLogs(opts, "ClaimRewardEvent", actionIdRule, depositIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletClaimRewardEvent)
				if err := _StakingWallet.contract.UnpackLog(event, "ClaimRewardEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimRewardEvent is a log parse operation binding the contract event 0xdde81df5caa033e783e2a39d93e3a8718a7dc27ba95a4757f5433a01f794ec36.
//
// Solidity: event ClaimRewardEvent(uint256 indexed actionId, uint256 indexed depositId, uint256 reward, address indexed staker)
func (_StakingWallet *StakingWalletFilterer) ParseClaimRewardEvent(log types.Log) (*StakingWalletClaimRewardEvent, error) {
	event := new(StakingWalletClaimRewardEvent)
	if err := _StakingWallet.contract.UnpackLog(event, "ClaimRewardEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletEthDepositEventIterator is returned from FilterEthDepositEvent and is used to iterate over the raw logs and unpacked data for EthDepositEvent events raised by the StakingWallet contract.
type StakingWalletEthDepositEventIterator struct {
	Event *StakingWalletEthDepositEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletEthDepositEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletEthDepositEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletEthDepositEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletEthDepositEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletEthDepositEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletEthDepositEvent represents a EthDepositEvent event raised by the StakingWallet contract.
type StakingWalletEthDepositEvent struct {
	DepositTime   *big.Int
	DepositNum    *big.Int
	NumStakedNFTs *big.Int
	Amount        *big.Int
	Modulo        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterEthDepositEvent is a free log retrieval operation binding the contract event 0xdc0eacba8b1f88284dca5eec8be23173aefa7206298fe22de43e064b6ccd8418.
//
// Solidity: event EthDepositEvent(uint256 indexed depositTime, uint256 depositNum, uint256 numStakedNFTs, uint256 amount, uint256 modulo)
func (_StakingWallet *StakingWalletFilterer) FilterEthDepositEvent(opts *bind.FilterOpts, depositTime []*big.Int) (*StakingWalletEthDepositEventIterator, error) {

	var depositTimeRule []interface{}
	for _, depositTimeItem := range depositTime {
		depositTimeRule = append(depositTimeRule, depositTimeItem)
	}

	logs, sub, err := _StakingWallet.contract.FilterLogs(opts, "EthDepositEvent", depositTimeRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletEthDepositEventIterator{contract: _StakingWallet.contract, event: "EthDepositEvent", logs: logs, sub: sub}, nil
}

// WatchEthDepositEvent is a free log subscription operation binding the contract event 0xdc0eacba8b1f88284dca5eec8be23173aefa7206298fe22de43e064b6ccd8418.
//
// Solidity: event EthDepositEvent(uint256 indexed depositTime, uint256 depositNum, uint256 numStakedNFTs, uint256 amount, uint256 modulo)
func (_StakingWallet *StakingWalletFilterer) WatchEthDepositEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletEthDepositEvent, depositTime []*big.Int) (event.Subscription, error) {

	var depositTimeRule []interface{}
	for _, depositTimeItem := range depositTime {
		depositTimeRule = append(depositTimeRule, depositTimeItem)
	}

	logs, sub, err := _StakingWallet.contract.WatchLogs(opts, "EthDepositEvent", depositTimeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletEthDepositEvent)
				if err := _StakingWallet.contract.UnpackLog(event, "EthDepositEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEthDepositEvent is a log parse operation binding the contract event 0xdc0eacba8b1f88284dca5eec8be23173aefa7206298fe22de43e064b6ccd8418.
//
// Solidity: event EthDepositEvent(uint256 indexed depositTime, uint256 depositNum, uint256 numStakedNFTs, uint256 amount, uint256 modulo)
func (_StakingWallet *StakingWalletFilterer) ParseEthDepositEvent(log types.Log) (*StakingWalletEthDepositEvent, error) {
	event := new(StakingWalletEthDepositEvent)
	if err := _StakingWallet.contract.UnpackLog(event, "EthDepositEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletMinStakePeriodChangedIterator is returned from FilterMinStakePeriodChanged and is used to iterate over the raw logs and unpacked data for MinStakePeriodChanged events raised by the StakingWallet contract.
type StakingWalletMinStakePeriodChangedIterator struct {
	Event *StakingWalletMinStakePeriodChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletMinStakePeriodChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletMinStakePeriodChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletMinStakePeriodChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletMinStakePeriodChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletMinStakePeriodChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletMinStakePeriodChanged represents a MinStakePeriodChanged event raised by the StakingWallet contract.
type StakingWalletMinStakePeriodChanged struct {
	NewPeriod *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMinStakePeriodChanged is a free log retrieval operation binding the contract event 0x3bc8e083bbd3346984c352a42f59129e9299433a69e464ed246798ba091831a5.
//
// Solidity: event MinStakePeriodChanged(uint256 newPeriod)
func (_StakingWallet *StakingWalletFilterer) FilterMinStakePeriodChanged(opts *bind.FilterOpts) (*StakingWalletMinStakePeriodChangedIterator, error) {

	logs, sub, err := _StakingWallet.contract.FilterLogs(opts, "MinStakePeriodChanged")
	if err != nil {
		return nil, err
	}
	return &StakingWalletMinStakePeriodChangedIterator{contract: _StakingWallet.contract, event: "MinStakePeriodChanged", logs: logs, sub: sub}, nil
}

// WatchMinStakePeriodChanged is a free log subscription operation binding the contract event 0x3bc8e083bbd3346984c352a42f59129e9299433a69e464ed246798ba091831a5.
//
// Solidity: event MinStakePeriodChanged(uint256 newPeriod)
func (_StakingWallet *StakingWalletFilterer) WatchMinStakePeriodChanged(opts *bind.WatchOpts, sink chan<- *StakingWalletMinStakePeriodChanged) (event.Subscription, error) {

	logs, sub, err := _StakingWallet.contract.WatchLogs(opts, "MinStakePeriodChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletMinStakePeriodChanged)
				if err := _StakingWallet.contract.UnpackLog(event, "MinStakePeriodChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinStakePeriodChanged is a log parse operation binding the contract event 0x3bc8e083bbd3346984c352a42f59129e9299433a69e464ed246798ba091831a5.
//
// Solidity: event MinStakePeriodChanged(uint256 newPeriod)
func (_StakingWallet *StakingWalletFilterer) ParseMinStakePeriodChanged(log types.Log) (*StakingWalletMinStakePeriodChanged, error) {
	event := new(StakingWalletMinStakePeriodChanged)
	if err := _StakingWallet.contract.UnpackLog(event, "MinStakePeriodChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletModuloSentEventIterator is returned from FilterModuloSentEvent and is used to iterate over the raw logs and unpacked data for ModuloSentEvent events raised by the StakingWallet contract.
type StakingWalletModuloSentEventIterator struct {
	Event *StakingWalletModuloSentEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletModuloSentEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletModuloSentEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletModuloSentEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletModuloSentEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletModuloSentEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletModuloSentEvent represents a ModuloSentEvent event raised by the StakingWallet contract.
type StakingWalletModuloSentEvent struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterModuloSentEvent is a free log retrieval operation binding the contract event 0x6905286e1ecb9b47a50224e76e31cf1383f75212bc0b06c8684317782566a0a7.
//
// Solidity: event ModuloSentEvent(uint256 amount)
func (_StakingWallet *StakingWalletFilterer) FilterModuloSentEvent(opts *bind.FilterOpts) (*StakingWalletModuloSentEventIterator, error) {

	logs, sub, err := _StakingWallet.contract.FilterLogs(opts, "ModuloSentEvent")
	if err != nil {
		return nil, err
	}
	return &StakingWalletModuloSentEventIterator{contract: _StakingWallet.contract, event: "ModuloSentEvent", logs: logs, sub: sub}, nil
}

// WatchModuloSentEvent is a free log subscription operation binding the contract event 0x6905286e1ecb9b47a50224e76e31cf1383f75212bc0b06c8684317782566a0a7.
//
// Solidity: event ModuloSentEvent(uint256 amount)
func (_StakingWallet *StakingWalletFilterer) WatchModuloSentEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletModuloSentEvent) (event.Subscription, error) {

	logs, sub, err := _StakingWallet.contract.WatchLogs(opts, "ModuloSentEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletModuloSentEvent)
				if err := _StakingWallet.contract.UnpackLog(event, "ModuloSentEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseModuloSentEvent is a log parse operation binding the contract event 0x6905286e1ecb9b47a50224e76e31cf1383f75212bc0b06c8684317782566a0a7.
//
// Solidity: event ModuloSentEvent(uint256 amount)
func (_StakingWallet *StakingWalletFilterer) ParseModuloSentEvent(log types.Log) (*StakingWalletModuloSentEvent, error) {
	event := new(StakingWalletModuloSentEvent)
	if err := _StakingWallet.contract.UnpackLog(event, "ModuloSentEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the StakingWallet contract.
type StakingWalletOwnershipTransferredIterator struct {
	Event *StakingWalletOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletOwnershipTransferred represents a OwnershipTransferred event raised by the StakingWallet contract.
type StakingWalletOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingWallet *StakingWalletFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StakingWalletOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StakingWallet.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletOwnershipTransferredIterator{contract: _StakingWallet.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingWallet *StakingWalletFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StakingWalletOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StakingWallet.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletOwnershipTransferred)
				if err := _StakingWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingWallet *StakingWalletFilterer) ParseOwnershipTransferred(log types.Log) (*StakingWalletOwnershipTransferred, error) {
	event := new(StakingWalletOwnershipTransferred)
	if err := _StakingWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletStakeActionEventIterator is returned from FilterStakeActionEvent and is used to iterate over the raw logs and unpacked data for StakeActionEvent events raised by the StakingWallet contract.
type StakingWalletStakeActionEventIterator struct {
	Event *StakingWalletStakeActionEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletStakeActionEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletStakeActionEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletStakeActionEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletStakeActionEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletStakeActionEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletStakeActionEvent represents a StakeActionEvent event raised by the StakingWallet contract.
type StakingWalletStakeActionEvent struct {
	ActionId          *big.Int
	TokenId           *big.Int
	TotalNFTs         *big.Int
	UnstakeTime       *big.Int
	Staker            common.Address
	IsRandomWalkToken bool
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterStakeActionEvent is a free log retrieval operation binding the contract event 0xfc5cf5c5f6cbe80581e46dc67e0d882f36b5b4dd66ac607f7a95985d41aa83f4.
//
// Solidity: event StakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, uint256 unstakeTime, address indexed staker, bool isRandomWalkToken)
func (_StakingWallet *StakingWalletFilterer) FilterStakeActionEvent(opts *bind.FilterOpts, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (*StakingWalletStakeActionEventIterator, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWallet.contract.FilterLogs(opts, "StakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletStakeActionEventIterator{contract: _StakingWallet.contract, event: "StakeActionEvent", logs: logs, sub: sub}, nil
}

// WatchStakeActionEvent is a free log subscription operation binding the contract event 0xfc5cf5c5f6cbe80581e46dc67e0d882f36b5b4dd66ac607f7a95985d41aa83f4.
//
// Solidity: event StakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, uint256 unstakeTime, address indexed staker, bool isRandomWalkToken)
func (_StakingWallet *StakingWalletFilterer) WatchStakeActionEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletStakeActionEvent, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (event.Subscription, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWallet.contract.WatchLogs(opts, "StakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletStakeActionEvent)
				if err := _StakingWallet.contract.UnpackLog(event, "StakeActionEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeActionEvent is a log parse operation binding the contract event 0xfc5cf5c5f6cbe80581e46dc67e0d882f36b5b4dd66ac607f7a95985d41aa83f4.
//
// Solidity: event StakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, uint256 unstakeTime, address indexed staker, bool isRandomWalkToken)
func (_StakingWallet *StakingWalletFilterer) ParseStakeActionEvent(log types.Log) (*StakingWalletStakeActionEvent, error) {
	event := new(StakingWalletStakeActionEvent)
	if err := _StakingWallet.contract.UnpackLog(event, "StakeActionEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWalletUnstakeActionEventIterator is returned from FilterUnstakeActionEvent and is used to iterate over the raw logs and unpacked data for UnstakeActionEvent events raised by the StakingWallet contract.
type StakingWalletUnstakeActionEventIterator struct {
	Event *StakingWalletUnstakeActionEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWalletUnstakeActionEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWalletUnstakeActionEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWalletUnstakeActionEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWalletUnstakeActionEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWalletUnstakeActionEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWalletUnstakeActionEvent represents a UnstakeActionEvent event raised by the StakingWallet contract.
type StakingWalletUnstakeActionEvent struct {
	ActionId  *big.Int
	TokenId   *big.Int
	TotalNFTs *big.Int
	Staker    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUnstakeActionEvent is a free log retrieval operation binding the contract event 0x33940a9fc3ee3c9150b29b34ef29ca397b5e1e340425a4f0da0346b5b90766c8.
//
// Solidity: event UnstakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWallet *StakingWalletFilterer) FilterUnstakeActionEvent(opts *bind.FilterOpts, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (*StakingWalletUnstakeActionEventIterator, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWallet.contract.FilterLogs(opts, "UnstakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &StakingWalletUnstakeActionEventIterator{contract: _StakingWallet.contract, event: "UnstakeActionEvent", logs: logs, sub: sub}, nil
}

// WatchUnstakeActionEvent is a free log subscription operation binding the contract event 0x33940a9fc3ee3c9150b29b34ef29ca397b5e1e340425a4f0da0346b5b90766c8.
//
// Solidity: event UnstakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWallet *StakingWalletFilterer) WatchUnstakeActionEvent(opts *bind.WatchOpts, sink chan<- *StakingWalletUnstakeActionEvent, actionId []*big.Int, tokenId []*big.Int, staker []common.Address) (event.Subscription, error) {

	var actionIdRule []interface{}
	for _, actionIdItem := range actionId {
		actionIdRule = append(actionIdRule, actionIdItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _StakingWallet.contract.WatchLogs(opts, "UnstakeActionEvent", actionIdRule, tokenIdRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWalletUnstakeActionEvent)
				if err := _StakingWallet.contract.UnpackLog(event, "UnstakeActionEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstakeActionEvent is a log parse operation binding the contract event 0x33940a9fc3ee3c9150b29b34ef29ca397b5e1e340425a4f0da0346b5b90766c8.
//
// Solidity: event UnstakeActionEvent(uint256 indexed actionId, uint256 indexed tokenId, uint256 totalNFTs, address indexed staker)
func (_StakingWallet *StakingWalletFilterer) ParseUnstakeActionEvent(log types.Log) (*StakingWalletUnstakeActionEvent, error) {
	event := new(StakingWalletUnstakeActionEvent)
	if err := _StakingWallet.contract.UnpackLog(event, "UnstakeActionEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
