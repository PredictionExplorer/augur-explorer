--- /home/niko/eth/dev/Cosmic-Signature/contracts/CosmicGame.sol	2023-12-04 08:44:54.205224547 -0600
+++ CosmicGame.sol	2023-12-13 16:46:39.166060867 -0600
@@ -28,14 +28,14 @@
     uint256 public priceIncrease = 1010000; // we are going to divide this number by a million
 
     // how much the deadline is pushed after every bid
-    uint256 public nanoSecondsExtra = 3600 * 10**9;
+    uint256 public nanoSecondsExtra = 180 * 10**9;
 
     // how much is the secondsExtra increased by after every bid (You can think of it as the second derivative)
     // 1.0001
     uint256 public timeIncrease = 1000100;
 
 	// timeout for the winner to claim prize (seconds)
-	uint256 public timeoutClaimPrize = 24 * 3600;	
+	uint256 public timeoutClaimPrize = 300;	
 
     // we need to set the bidPrice to anything higher than 0 because the
     // contract would break if it's zero and someone bids before a donation is made
@@ -54,7 +54,7 @@
     address public charity;
 
     // After a prize was claimed, start off the clock with this much time.
-    uint256 public initialSecondsUntilPrize = 24 * 3600;
+    uint256 public initialSecondsUntilPrize = 1 * 180;
 
     // The bid size will be 1000 times smaller than the prize amount initially
     uint256 public initialBidAmountFraction = 200;
@@ -218,7 +218,7 @@
     // We are doing a dutch auction that lasts 24 hours.
     function currentCSTPrice() public view returns (uint256) {
         uint256 secondsElapsed = block.timestamp - lastCSTBidTime;
-        uint256 auction_duration = (nanoSecondsExtra * CSTAuctionLength) / 1e9;
+        uint256 auction_duration = (nanoSecondsExtra * CSTAuctionLength) / 1e14;
         if (secondsElapsed >= auction_duration) {
             return 0;
         }
--- /home/niko/eth/dev/Cosmic-Signature/contracts/StakingWallet.sol	2023-12-04 08:44:54.205224547 -0600
+++ StakingWallet.sol	2023-12-13 09:19:54.142112771 -0600
@@ -72,11 +72,11 @@
         stakedNFTs[numStakeActions].owner = msg.sender;
         stakedNFTs[numStakeActions].stakeTime = block.timestamp;
         uint256 fractionStaked = (1e6 * numStakedNFTs) / nft.totalSupply();
-        uint256 extraTime = fractionStaked * fractionStaked / 1500 + 2600000;
+        uint256 extraTime = fractionStaked * fractionStaked / 1000000 + 1;
         stakedNFTs[numStakeActions].unstakeEligibleTime = block.timestamp + extraTime;
         numStakeActions += 1;
         numStakedNFTs += 1;
-		emit StakeActionEvent(numStakeActions-1,_tokenId,numStakedNFTs,stakedNFTs[numStakeActions].unstakeEligibleTime,msg.sender);
+		emit StakeActionEvent(numStakeActions-1,_tokenId,numStakedNFTs,stakedNFTs[numStakeActions-1].unstakeEligibleTime,msg.sender);
     }
 
 	function stakeMany(uint256[] memory ids) external {
